generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  Id         String    @id
  Name       RoleType
  DateCreate DateTime  @default(now())
  DateUpdate DateTime? @updatedAt
  User       User[]
}

model User {
  Id              String            @id
  DateCreate      DateTime          @default(now())
  DateUpdate      DateTime?         @updatedAt
  CreatedBy       String?
  UpdatedBy       String?
  Name            String
  Username        String
  Password        String
  RoleId          String
  Birthdate       DateTime
  PhoneNumber     String
  Gender          Boolean
  Email           String?           @unique
  Status          ActiveStatus      @default(ACTIVE)
  Role            Role              @relation(fields: [RoleId], references: [Id])
  Student         Student[]
  CompetitionRoom CompetitionRoom[]
}

model Student {
  Id                     String                   @id
  DateCreate             DateTime                 @default(now())
  DateUpdate             DateTime?                @updatedAt
  CreatedBy              String?
  UpdatedBy              String?
  Address                String
  Class                  String
  NIK                    String
  FatherName             String
  MotherName             String
  IdUser                 String
  PhotoPath              String
  Birthdate              DateTime
  CompetitionParticipant CompetitionParticipant[]
  User                   User                     @relation(fields: [IdUser], references: [Id], onDelete: Restrict)
}

model Season {
  Id          String        @id
  DateCreate  DateTime      @default(now())
  DateUpdate  DateTime?     @updatedAt
  CreatedBy   String?
  UpdatedBy   String?
  Name        String
  StartDate   DateTime
  EndDate     DateTime
  Competition Competition[]
}

model Subject {
  Id          String        @id
  DateCreate  DateTime      @default(now())
  DateUpdate  DateTime?     @updatedAt
  CreatedBy   String?
  UpdatedBy   String?
  Name        String
  Competition Competition[]
}

model Competition {
  Id                     String                   @id
  DateCreate             DateTime                 @default(now())
  DateUpdate             DateTime?                @updatedAt
  CreatedBy              String?
  UpdatedBy              String?
  Name                   String
  Date                   DateTime
  Level                  Int
  Stage                  String
  Price                  Int
  SeasonId               String
  SubjectId              String
  Season                 Season                   @relation(fields: [SeasonId], references: [Id])
  Subject                Subject                  @relation(fields: [SubjectId], references: [Id])
  CompetitionParticipant CompetitionParticipant[]
  CompetitionRoom        CompetitionRoom[]
  Discussion             Discussion[]
  Exam                   Exam[]
  Kisi                   Kisi[]
  Tryout                 Tryout[]
}

model Exam {
  Id            String      @id
  DateCreate    DateTime    @default(now())
  DateUpdate    DateTime?   @updatedAt
  CreatedBy     String?
  UpdatedBy     String?
  CompetitionId String
  Correct       Int
  Incorrect     Int
  Score         Int
  QuestionCode  String
  Competition   Competition @relation(fields: [CompetitionId], references: [Id])
}

model Region {
  Id           String    @id
  DateCreate   DateTime  @default(now())
  DateUpdate   DateTime? @updatedAt
  CreatedBy    String?
  UpdatedBy    String?
  Name         String
  RegionDetail String
}

model Supervisor {
  Id              String            @id
  DateCreate      DateTime          @default(now())
  DateUpdate      DateTime?         @updatedAt
  CreatedBy       String?
  UpdatedBy       String?
  Name            String
  Birthdate       DateTime
  PhoneNumber     String
  CompetitionRoom CompetitionRoom[]
}

model CompetitionRoom {
  Id                     String                   @id
  DateCreate             DateTime                 @default(now())
  DateUpdate             DateTime?                @updatedAt
  CreatedBy              String?
  UpdatedBy              String?
  Name                   String
  CompetitionId          String
  SupervisorId           String
  CompetitionParticipant CompetitionParticipant[]
  Competition            Competition              @relation(fields: [CompetitionId], references: [Id], onDelete: Restrict)
  Supervisor             Supervisor               @relation(fields: [SupervisorId], references: [Id], onDelete: Restrict)
  User                   User?                    @relation(fields: [userId], references: [Id])
  userId                 String?
}

model CompetitionParticipant {
  Id                String           @id
  DateCreate        DateTime         @default(now())
  DateUpdate        DateTime?        @updatedAt
  CreatedBy         String?
  UpdatedBy         String?
  StudentId         String
  CompetitionId     String
  CompetitionRoomId String?
  PaymentId         String?
  Attedance         Boolean
  Score             Int
  Competition       Competition      @relation(fields: [CompetitionId], references: [Id])
  CompetitionRoom   CompetitionRoom? @relation(fields: [CompetitionRoomId], references: [Id], onDelete: Restrict)
  Student           Student          @relation(fields: [StudentId], references: [Id])
  Payment           Payment?         @relation(fields: [PaymentId], references: [Id], onDelete: Restrict)
}

model Kisi {
  Id            String      @id
  DateCreate    DateTime    @default(now())
  DateUpdate    DateTime?   @updatedAt
  CreatedBy     String?
  UpdatedBy     String?
  Content       String
  CompetitionId String
  Competition   Competition @relation(fields: [CompetitionId], references: [Id])
}

model Tryout {
  Id            String      @id
  DateCreate    DateTime    @default(now())
  DateUpdate    DateTime?   @updatedAt
  CreatedBy     String?
  UpdatedBy     String?
  Name          String
  CompetitionId String
  Question      Question[]
  Competition   Competition @relation(fields: [CompetitionId], references: [Id])
}

model Question {
  Id         String    @id
  DateCreate DateTime  @default(now())
  DateUpdate DateTime? @updatedAt
  CreatedBy  String?
  UpdatedBy  String?
  TryoutId   String
  Content    String
  Option     Option[]
  Tryout     Tryout    @relation(fields: [TryoutId], references: [Id])
}

model Option {
  Id         String    @id
  DateCreate DateTime  @default(now())
  DateUpdate DateTime? @updatedAt
  CreatedBy  String?
  UpdatedBy  String?
  Answer     String
  IsCorrect  Boolean
  QuestionId String
  Question   Question  @relation(fields: [QuestionId], references: [Id])
}

model Discussion {
  Id            String      @id
  DateCreate    DateTime    @default(now())
  DateUpdate    DateTime?   @updatedAt
  CreatedBy     String?
  UpdatedBy     String?
  Name          String
  CompetitionId String
  Competition   Competition @relation(fields: [CompetitionId], references: [Id])
}

model Payment {
  Id                     String                   @id
  DateCreate             DateTime                 @default(now())
  DateUpdate             DateTime?                @updatedAt
  CreatedBy              String?
  UpdatedBy              String?
  Invoice                String
  Date                   DateTime
  Amount                 Int
  Status                 PaymentType
  UserId                 String
  CompetitionParticipant CompetitionParticipant[]
}

model News {
  Id          String    @id
  DateCreate  DateTime  @default(now())
  DateUpdate  DateTime? @updatedAt
  CreatedBy   String?
  UpdatedBy   String?
  Title       String
  Description String
}

enum ActiveStatus {
  ACTIVE
  INACTIVE
}

enum RoleType {
  SUPERADMIN
  ADMIN
  EVENTADMIN
  PARTICIPANT
  FACILITATOR
}

enum PaymentType {
  PENDING
  CONFIRMED
  COMPLETED
}
