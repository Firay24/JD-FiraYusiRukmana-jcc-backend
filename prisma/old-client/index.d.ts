
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model Achievement
 * 
 */
export type Achievement = $Result.DefaultSelection<Prisma.$AchievementPayload>
/**
 * Model Season
 * 
 */
export type Season = $Result.DefaultSelection<Prisma.$SeasonPayload>
/**
 * Model Subject
 * 
 */
export type Subject = $Result.DefaultSelection<Prisma.$SubjectPayload>
/**
 * Model Competition
 * 
 */
export type Competition = $Result.DefaultSelection<Prisma.$CompetitionPayload>
/**
 * Model Subscription
 * 
 */
export type Subscription = $Result.DefaultSelection<Prisma.$SubscriptionPayload>
/**
 * Model Region
 * 
 */
export type Region = $Result.DefaultSelection<Prisma.$RegionPayload>
/**
 * Model Supervisor
 * 
 */
export type Supervisor = $Result.DefaultSelection<Prisma.$SupervisorPayload>
/**
 * Model CompetitionRoom
 * 
 */
export type CompetitionRoom = $Result.DefaultSelection<Prisma.$CompetitionRoomPayload>
/**
 * Model CompetitionParticipant
 * 
 */
export type CompetitionParticipant = $Result.DefaultSelection<Prisma.$CompetitionParticipantPayload>
/**
 * Model Kisi
 * 
 */
export type Kisi = $Result.DefaultSelection<Prisma.$KisiPayload>
/**
 * Model Tryout
 * 
 */
export type Tryout = $Result.DefaultSelection<Prisma.$TryoutPayload>
/**
 * Model Question
 * 
 */
export type Question = $Result.DefaultSelection<Prisma.$QuestionPayload>
/**
 * Model Option
 * 
 */
export type Option = $Result.DefaultSelection<Prisma.$OptionPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model PaymentStatusHistory
 * 
 */
export type PaymentStatusHistory = $Result.DefaultSelection<Prisma.$PaymentStatusHistoryPayload>
/**
 * Model School
 * 
 */
export type School = $Result.DefaultSelection<Prisma.$SchoolPayload>
/**
 * Model News
 * 
 */
export type News = $Result.DefaultSelection<Prisma.$NewsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const RoleType: {
  SUPERADMIN: 'SUPERADMIN',
  ADMIN: 'ADMIN',
  EVENTADMIN: 'EVENTADMIN',
  PARTICIPANT: 'PARTICIPANT',
  FACILITATOR: 'FACILITATOR'
};

export type RoleType = (typeof RoleType)[keyof typeof RoleType]


export const ActiveStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

export type ActiveStatus = (typeof ActiveStatus)[keyof typeof ActiveStatus]


export const StageType: {
  TK: 'TK',
  SD: 'SD',
  SMP: 'SMP',
  LEMBAGA: 'LEMBAGA'
};

export type StageType = (typeof StageType)[keyof typeof StageType]


export const PaymentType: {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  COMPLETED: 'COMPLETED'
};

export type PaymentType = (typeof PaymentType)[keyof typeof PaymentType]


export const Subdistrict: {
  PESANGGARAN: 'PESANGGARAN',
  SILIRAGUNG: 'SILIRAGUNG',
  BANGOREJO: 'BANGOREJO',
  PURWOHARJO: 'PURWOHARJO',
  TEGALDLIMO: 'TEGALDLIMO',
  MUNCAR: 'MUNCAR',
  CLURING: 'CLURING',
  GAMBIRAN: 'GAMBIRAN',
  TEGALSARI: 'TEGALSARI',
  GLENMORE: 'GLENMORE',
  KALIBARU: 'KALIBARU',
  GENTENG: 'GENTENG',
  SRONO: 'SRONO',
  ROGOJAMPI: 'ROGOJAMPI',
  BLIMBINGSARI: 'BLIMBINGSARI',
  KABAT: 'KABAT',
  SINGOJURUH: 'SINGOJURUH',
  SEMPU: 'SEMPU',
  SONGGON: 'SONGGON',
  GLAGAH: 'GLAGAH',
  LICIN: 'LICIN',
  BANYUWANGI: 'BANYUWANGI',
  GIRI: 'GIRI',
  KALIPURO: 'KALIPURO',
  WONGSOREJO: 'WONGSOREJO',
  TROPODO: 'TROPODO'
};

export type Subdistrict = (typeof Subdistrict)[keyof typeof Subdistrict]


export const StatusSchool: {
  SWASTA: 'SWASTA',
  NEGERI: 'NEGERI'
};

export type StatusSchool = (typeof StatusSchool)[keyof typeof StatusSchool]

}

export type RoleType = $Enums.RoleType

export const RoleType: typeof $Enums.RoleType

export type ActiveStatus = $Enums.ActiveStatus

export const ActiveStatus: typeof $Enums.ActiveStatus

export type StageType = $Enums.StageType

export const StageType: typeof $Enums.StageType

export type PaymentType = $Enums.PaymentType

export const PaymentType: typeof $Enums.PaymentType

export type Subdistrict = $Enums.Subdistrict

export const Subdistrict: typeof $Enums.Subdistrict

export type StatusSchool = $Enums.StatusSchool

export const StatusSchool: typeof $Enums.StatusSchool

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Roles
 * const roles = await prisma.role.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Roles
   * const roles = await prisma.role.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs>;

  /**
   * `prisma.achievement`: Exposes CRUD operations for the **Achievement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Achievements
    * const achievements = await prisma.achievement.findMany()
    * ```
    */
  get achievement(): Prisma.AchievementDelegate<ExtArgs>;

  /**
   * `prisma.season`: Exposes CRUD operations for the **Season** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Seasons
    * const seasons = await prisma.season.findMany()
    * ```
    */
  get season(): Prisma.SeasonDelegate<ExtArgs>;

  /**
   * `prisma.subject`: Exposes CRUD operations for the **Subject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subject.findMany()
    * ```
    */
  get subject(): Prisma.SubjectDelegate<ExtArgs>;

  /**
   * `prisma.competition`: Exposes CRUD operations for the **Competition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Competitions
    * const competitions = await prisma.competition.findMany()
    * ```
    */
  get competition(): Prisma.CompetitionDelegate<ExtArgs>;

  /**
   * `prisma.subscription`: Exposes CRUD operations for the **Subscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subscriptions
    * const subscriptions = await prisma.subscription.findMany()
    * ```
    */
  get subscription(): Prisma.SubscriptionDelegate<ExtArgs>;

  /**
   * `prisma.region`: Exposes CRUD operations for the **Region** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Regions
    * const regions = await prisma.region.findMany()
    * ```
    */
  get region(): Prisma.RegionDelegate<ExtArgs>;

  /**
   * `prisma.supervisor`: Exposes CRUD operations for the **Supervisor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Supervisors
    * const supervisors = await prisma.supervisor.findMany()
    * ```
    */
  get supervisor(): Prisma.SupervisorDelegate<ExtArgs>;

  /**
   * `prisma.competitionRoom`: Exposes CRUD operations for the **CompetitionRoom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompetitionRooms
    * const competitionRooms = await prisma.competitionRoom.findMany()
    * ```
    */
  get competitionRoom(): Prisma.CompetitionRoomDelegate<ExtArgs>;

  /**
   * `prisma.competitionParticipant`: Exposes CRUD operations for the **CompetitionParticipant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompetitionParticipants
    * const competitionParticipants = await prisma.competitionParticipant.findMany()
    * ```
    */
  get competitionParticipant(): Prisma.CompetitionParticipantDelegate<ExtArgs>;

  /**
   * `prisma.kisi`: Exposes CRUD operations for the **Kisi** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kisis
    * const kisis = await prisma.kisi.findMany()
    * ```
    */
  get kisi(): Prisma.KisiDelegate<ExtArgs>;

  /**
   * `prisma.tryout`: Exposes CRUD operations for the **Tryout** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tryouts
    * const tryouts = await prisma.tryout.findMany()
    * ```
    */
  get tryout(): Prisma.TryoutDelegate<ExtArgs>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<ExtArgs>;

  /**
   * `prisma.option`: Exposes CRUD operations for the **Option** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Options
    * const options = await prisma.option.findMany()
    * ```
    */
  get option(): Prisma.OptionDelegate<ExtArgs>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs>;

  /**
   * `prisma.paymentStatusHistory`: Exposes CRUD operations for the **PaymentStatusHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentStatusHistories
    * const paymentStatusHistories = await prisma.paymentStatusHistory.findMany()
    * ```
    */
  get paymentStatusHistory(): Prisma.PaymentStatusHistoryDelegate<ExtArgs>;

  /**
   * `prisma.school`: Exposes CRUD operations for the **School** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schools
    * const schools = await prisma.school.findMany()
    * ```
    */
  get school(): Prisma.SchoolDelegate<ExtArgs>;

  /**
   * `prisma.news`: Exposes CRUD operations for the **News** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more News
    * const news = await prisma.news.findMany()
    * ```
    */
  get news(): Prisma.NewsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Role: 'Role',
    User: 'User',
    Student: 'Student',
    Achievement: 'Achievement',
    Season: 'Season',
    Subject: 'Subject',
    Competition: 'Competition',
    Subscription: 'Subscription',
    Region: 'Region',
    Supervisor: 'Supervisor',
    CompetitionRoom: 'CompetitionRoom',
    CompetitionParticipant: 'CompetitionParticipant',
    Kisi: 'Kisi',
    Tryout: 'Tryout',
    Question: 'Question',
    Option: 'Option',
    Payment: 'Payment',
    PaymentStatusHistory: 'PaymentStatusHistory',
    School: 'School',
    News: 'News'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "role" | "user" | "student" | "achievement" | "season" | "subject" | "competition" | "subscription" | "region" | "supervisor" | "competitionRoom" | "competitionParticipant" | "kisi" | "tryout" | "question" | "option" | "payment" | "paymentStatusHistory" | "school" | "news"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      Achievement: {
        payload: Prisma.$AchievementPayload<ExtArgs>
        fields: Prisma.AchievementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AchievementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AchievementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          findFirst: {
            args: Prisma.AchievementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AchievementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          findMany: {
            args: Prisma.AchievementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>[]
          }
          create: {
            args: Prisma.AchievementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          createMany: {
            args: Prisma.AchievementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AchievementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>[]
          }
          delete: {
            args: Prisma.AchievementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          update: {
            args: Prisma.AchievementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          deleteMany: {
            args: Prisma.AchievementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AchievementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AchievementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          aggregate: {
            args: Prisma.AchievementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAchievement>
          }
          groupBy: {
            args: Prisma.AchievementGroupByArgs<ExtArgs>
            result: $Utils.Optional<AchievementGroupByOutputType>[]
          }
          count: {
            args: Prisma.AchievementCountArgs<ExtArgs>
            result: $Utils.Optional<AchievementCountAggregateOutputType> | number
          }
        }
      }
      Season: {
        payload: Prisma.$SeasonPayload<ExtArgs>
        fields: Prisma.SeasonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeasonFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeasonFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          findFirst: {
            args: Prisma.SeasonFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeasonFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          findMany: {
            args: Prisma.SeasonFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>[]
          }
          create: {
            args: Prisma.SeasonCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          createMany: {
            args: Prisma.SeasonCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SeasonCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>[]
          }
          delete: {
            args: Prisma.SeasonDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          update: {
            args: Prisma.SeasonUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          deleteMany: {
            args: Prisma.SeasonDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SeasonUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SeasonUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          aggregate: {
            args: Prisma.SeasonAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeason>
          }
          groupBy: {
            args: Prisma.SeasonGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeasonGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeasonCountArgs<ExtArgs>
            result: $Utils.Optional<SeasonCountAggregateOutputType> | number
          }
        }
      }
      Subject: {
        payload: Prisma.$SubjectPayload<ExtArgs>
        fields: Prisma.SubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findFirst: {
            args: Prisma.SubjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findMany: {
            args: Prisma.SubjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          create: {
            args: Prisma.SubjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          createMany: {
            args: Prisma.SubjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          delete: {
            args: Prisma.SubjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          update: {
            args: Prisma.SubjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          deleteMany: {
            args: Prisma.SubjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          aggregate: {
            args: Prisma.SubjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubject>
          }
          groupBy: {
            args: Prisma.SubjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubjectCountArgs<ExtArgs>
            result: $Utils.Optional<SubjectCountAggregateOutputType> | number
          }
        }
      }
      Competition: {
        payload: Prisma.$CompetitionPayload<ExtArgs>
        fields: Prisma.CompetitionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompetitionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompetitionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionPayload>
          }
          findFirst: {
            args: Prisma.CompetitionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompetitionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionPayload>
          }
          findMany: {
            args: Prisma.CompetitionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionPayload>[]
          }
          create: {
            args: Prisma.CompetitionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionPayload>
          }
          createMany: {
            args: Prisma.CompetitionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompetitionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionPayload>[]
          }
          delete: {
            args: Prisma.CompetitionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionPayload>
          }
          update: {
            args: Prisma.CompetitionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionPayload>
          }
          deleteMany: {
            args: Prisma.CompetitionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompetitionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompetitionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionPayload>
          }
          aggregate: {
            args: Prisma.CompetitionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompetition>
          }
          groupBy: {
            args: Prisma.CompetitionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompetitionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompetitionCountArgs<ExtArgs>
            result: $Utils.Optional<CompetitionCountAggregateOutputType> | number
          }
        }
      }
      Subscription: {
        payload: Prisma.$SubscriptionPayload<ExtArgs>
        fields: Prisma.SubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findMany: {
            args: Prisma.SubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          create: {
            args: Prisma.SubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          createMany: {
            args: Prisma.SubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          delete: {
            args: Prisma.SubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          update: {
            args: Prisma.SubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubscription>
          }
          groupBy: {
            args: Prisma.SubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionCountAggregateOutputType> | number
          }
        }
      }
      Region: {
        payload: Prisma.$RegionPayload<ExtArgs>
        fields: Prisma.RegionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findFirst: {
            args: Prisma.RegionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findMany: {
            args: Prisma.RegionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          create: {
            args: Prisma.RegionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          createMany: {
            args: Prisma.RegionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          delete: {
            args: Prisma.RegionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          update: {
            args: Prisma.RegionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          deleteMany: {
            args: Prisma.RegionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RegionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          aggregate: {
            args: Prisma.RegionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegion>
          }
          groupBy: {
            args: Prisma.RegionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegionCountArgs<ExtArgs>
            result: $Utils.Optional<RegionCountAggregateOutputType> | number
          }
        }
      }
      Supervisor: {
        payload: Prisma.$SupervisorPayload<ExtArgs>
        fields: Prisma.SupervisorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SupervisorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupervisorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SupervisorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupervisorPayload>
          }
          findFirst: {
            args: Prisma.SupervisorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupervisorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SupervisorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupervisorPayload>
          }
          findMany: {
            args: Prisma.SupervisorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupervisorPayload>[]
          }
          create: {
            args: Prisma.SupervisorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupervisorPayload>
          }
          createMany: {
            args: Prisma.SupervisorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SupervisorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupervisorPayload>[]
          }
          delete: {
            args: Prisma.SupervisorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupervisorPayload>
          }
          update: {
            args: Prisma.SupervisorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupervisorPayload>
          }
          deleteMany: {
            args: Prisma.SupervisorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SupervisorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SupervisorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupervisorPayload>
          }
          aggregate: {
            args: Prisma.SupervisorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSupervisor>
          }
          groupBy: {
            args: Prisma.SupervisorGroupByArgs<ExtArgs>
            result: $Utils.Optional<SupervisorGroupByOutputType>[]
          }
          count: {
            args: Prisma.SupervisorCountArgs<ExtArgs>
            result: $Utils.Optional<SupervisorCountAggregateOutputType> | number
          }
        }
      }
      CompetitionRoom: {
        payload: Prisma.$CompetitionRoomPayload<ExtArgs>
        fields: Prisma.CompetitionRoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompetitionRoomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionRoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompetitionRoomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionRoomPayload>
          }
          findFirst: {
            args: Prisma.CompetitionRoomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionRoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompetitionRoomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionRoomPayload>
          }
          findMany: {
            args: Prisma.CompetitionRoomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionRoomPayload>[]
          }
          create: {
            args: Prisma.CompetitionRoomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionRoomPayload>
          }
          createMany: {
            args: Prisma.CompetitionRoomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompetitionRoomCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionRoomPayload>[]
          }
          delete: {
            args: Prisma.CompetitionRoomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionRoomPayload>
          }
          update: {
            args: Prisma.CompetitionRoomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionRoomPayload>
          }
          deleteMany: {
            args: Prisma.CompetitionRoomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompetitionRoomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompetitionRoomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionRoomPayload>
          }
          aggregate: {
            args: Prisma.CompetitionRoomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompetitionRoom>
          }
          groupBy: {
            args: Prisma.CompetitionRoomGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompetitionRoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompetitionRoomCountArgs<ExtArgs>
            result: $Utils.Optional<CompetitionRoomCountAggregateOutputType> | number
          }
        }
      }
      CompetitionParticipant: {
        payload: Prisma.$CompetitionParticipantPayload<ExtArgs>
        fields: Prisma.CompetitionParticipantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompetitionParticipantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionParticipantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompetitionParticipantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionParticipantPayload>
          }
          findFirst: {
            args: Prisma.CompetitionParticipantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionParticipantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompetitionParticipantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionParticipantPayload>
          }
          findMany: {
            args: Prisma.CompetitionParticipantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionParticipantPayload>[]
          }
          create: {
            args: Prisma.CompetitionParticipantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionParticipantPayload>
          }
          createMany: {
            args: Prisma.CompetitionParticipantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompetitionParticipantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionParticipantPayload>[]
          }
          delete: {
            args: Prisma.CompetitionParticipantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionParticipantPayload>
          }
          update: {
            args: Prisma.CompetitionParticipantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionParticipantPayload>
          }
          deleteMany: {
            args: Prisma.CompetitionParticipantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompetitionParticipantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompetitionParticipantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionParticipantPayload>
          }
          aggregate: {
            args: Prisma.CompetitionParticipantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompetitionParticipant>
          }
          groupBy: {
            args: Prisma.CompetitionParticipantGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompetitionParticipantGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompetitionParticipantCountArgs<ExtArgs>
            result: $Utils.Optional<CompetitionParticipantCountAggregateOutputType> | number
          }
        }
      }
      Kisi: {
        payload: Prisma.$KisiPayload<ExtArgs>
        fields: Prisma.KisiFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KisiFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KisiPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KisiFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KisiPayload>
          }
          findFirst: {
            args: Prisma.KisiFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KisiPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KisiFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KisiPayload>
          }
          findMany: {
            args: Prisma.KisiFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KisiPayload>[]
          }
          create: {
            args: Prisma.KisiCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KisiPayload>
          }
          createMany: {
            args: Prisma.KisiCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KisiCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KisiPayload>[]
          }
          delete: {
            args: Prisma.KisiDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KisiPayload>
          }
          update: {
            args: Prisma.KisiUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KisiPayload>
          }
          deleteMany: {
            args: Prisma.KisiDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KisiUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.KisiUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KisiPayload>
          }
          aggregate: {
            args: Prisma.KisiAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKisi>
          }
          groupBy: {
            args: Prisma.KisiGroupByArgs<ExtArgs>
            result: $Utils.Optional<KisiGroupByOutputType>[]
          }
          count: {
            args: Prisma.KisiCountArgs<ExtArgs>
            result: $Utils.Optional<KisiCountAggregateOutputType> | number
          }
        }
      }
      Tryout: {
        payload: Prisma.$TryoutPayload<ExtArgs>
        fields: Prisma.TryoutFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TryoutFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TryoutPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TryoutFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TryoutPayload>
          }
          findFirst: {
            args: Prisma.TryoutFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TryoutPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TryoutFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TryoutPayload>
          }
          findMany: {
            args: Prisma.TryoutFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TryoutPayload>[]
          }
          create: {
            args: Prisma.TryoutCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TryoutPayload>
          }
          createMany: {
            args: Prisma.TryoutCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TryoutCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TryoutPayload>[]
          }
          delete: {
            args: Prisma.TryoutDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TryoutPayload>
          }
          update: {
            args: Prisma.TryoutUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TryoutPayload>
          }
          deleteMany: {
            args: Prisma.TryoutDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TryoutUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TryoutUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TryoutPayload>
          }
          aggregate: {
            args: Prisma.TryoutAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTryout>
          }
          groupBy: {
            args: Prisma.TryoutGroupByArgs<ExtArgs>
            result: $Utils.Optional<TryoutGroupByOutputType>[]
          }
          count: {
            args: Prisma.TryoutCountArgs<ExtArgs>
            result: $Utils.Optional<TryoutCountAggregateOutputType> | number
          }
        }
      }
      Question: {
        payload: Prisma.$QuestionPayload<ExtArgs>
        fields: Prisma.QuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findFirst: {
            args: Prisma.QuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findMany: {
            args: Prisma.QuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          create: {
            args: Prisma.QuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          createMany: {
            args: Prisma.QuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          delete: {
            args: Prisma.QuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          update: {
            args: Prisma.QuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.QuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      Option: {
        payload: Prisma.$OptionPayload<ExtArgs>
        fields: Prisma.OptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>
          }
          findFirst: {
            args: Prisma.OptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>
          }
          findMany: {
            args: Prisma.OptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>[]
          }
          create: {
            args: Prisma.OptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>
          }
          createMany: {
            args: Prisma.OptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>[]
          }
          delete: {
            args: Prisma.OptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>
          }
          update: {
            args: Prisma.OptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>
          }
          deleteMany: {
            args: Prisma.OptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>
          }
          aggregate: {
            args: Prisma.OptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOption>
          }
          groupBy: {
            args: Prisma.OptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<OptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.OptionCountArgs<ExtArgs>
            result: $Utils.Optional<OptionCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      PaymentStatusHistory: {
        payload: Prisma.$PaymentStatusHistoryPayload<ExtArgs>
        fields: Prisma.PaymentStatusHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentStatusHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentStatusHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentStatusHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentStatusHistoryPayload>
          }
          findFirst: {
            args: Prisma.PaymentStatusHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentStatusHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentStatusHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentStatusHistoryPayload>
          }
          findMany: {
            args: Prisma.PaymentStatusHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentStatusHistoryPayload>[]
          }
          create: {
            args: Prisma.PaymentStatusHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentStatusHistoryPayload>
          }
          createMany: {
            args: Prisma.PaymentStatusHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentStatusHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentStatusHistoryPayload>[]
          }
          delete: {
            args: Prisma.PaymentStatusHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentStatusHistoryPayload>
          }
          update: {
            args: Prisma.PaymentStatusHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentStatusHistoryPayload>
          }
          deleteMany: {
            args: Prisma.PaymentStatusHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentStatusHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentStatusHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentStatusHistoryPayload>
          }
          aggregate: {
            args: Prisma.PaymentStatusHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentStatusHistory>
          }
          groupBy: {
            args: Prisma.PaymentStatusHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentStatusHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentStatusHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentStatusHistoryCountAggregateOutputType> | number
          }
        }
      }
      School: {
        payload: Prisma.$SchoolPayload<ExtArgs>
        fields: Prisma.SchoolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SchoolFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SchoolFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          findFirst: {
            args: Prisma.SchoolFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SchoolFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          findMany: {
            args: Prisma.SchoolFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>[]
          }
          create: {
            args: Prisma.SchoolCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          createMany: {
            args: Prisma.SchoolCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SchoolCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>[]
          }
          delete: {
            args: Prisma.SchoolDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          update: {
            args: Prisma.SchoolUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          deleteMany: {
            args: Prisma.SchoolDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SchoolUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SchoolUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          aggregate: {
            args: Prisma.SchoolAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchool>
          }
          groupBy: {
            args: Prisma.SchoolGroupByArgs<ExtArgs>
            result: $Utils.Optional<SchoolGroupByOutputType>[]
          }
          count: {
            args: Prisma.SchoolCountArgs<ExtArgs>
            result: $Utils.Optional<SchoolCountAggregateOutputType> | number
          }
        }
      }
      News: {
        payload: Prisma.$NewsPayload<ExtArgs>
        fields: Prisma.NewsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NewsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NewsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>
          }
          findFirst: {
            args: Prisma.NewsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NewsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>
          }
          findMany: {
            args: Prisma.NewsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>[]
          }
          create: {
            args: Prisma.NewsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>
          }
          createMany: {
            args: Prisma.NewsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NewsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>[]
          }
          delete: {
            args: Prisma.NewsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>
          }
          update: {
            args: Prisma.NewsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>
          }
          deleteMany: {
            args: Prisma.NewsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NewsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NewsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>
          }
          aggregate: {
            args: Prisma.NewsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNews>
          }
          groupBy: {
            args: Prisma.NewsGroupByArgs<ExtArgs>
            result: $Utils.Optional<NewsGroupByOutputType>[]
          }
          count: {
            args: Prisma.NewsCountArgs<ExtArgs>
            result: $Utils.Optional<NewsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    User: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | RoleCountOutputTypeCountUserArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    Achievement: number
    Student: number
    Payment: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Achievement?: boolean | UserCountOutputTypeCountAchievementArgs
    Student?: boolean | UserCountOutputTypeCountStudentArgs
    Payment?: boolean | UserCountOutputTypeCountPaymentArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAchievementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AchievementWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }


  /**
   * Count Type StudentCountOutputType
   */

  export type StudentCountOutputType = {
    CompetitionParticipant: number
    Subscription: number
  }

  export type StudentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CompetitionParticipant?: boolean | StudentCountOutputTypeCountCompetitionParticipantArgs
    Subscription?: boolean | StudentCountOutputTypeCountSubscriptionArgs
  }

  // Custom InputTypes
  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     */
    select?: StudentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountCompetitionParticipantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitionParticipantWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }


  /**
   * Count Type SeasonCountOutputType
   */

  export type SeasonCountOutputType = {
    Competition: number
  }

  export type SeasonCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Competition?: boolean | SeasonCountOutputTypeCountCompetitionArgs
  }

  // Custom InputTypes
  /**
   * SeasonCountOutputType without action
   */
  export type SeasonCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeasonCountOutputType
     */
    select?: SeasonCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SeasonCountOutputType without action
   */
  export type SeasonCountOutputTypeCountCompetitionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitionWhereInput
  }


  /**
   * Count Type SubjectCountOutputType
   */

  export type SubjectCountOutputType = {
    Competition: number
  }

  export type SubjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Competition?: boolean | SubjectCountOutputTypeCountCompetitionArgs
  }

  // Custom InputTypes
  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectCountOutputType
     */
    select?: SubjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountCompetitionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitionWhereInput
  }


  /**
   * Count Type CompetitionCountOutputType
   */

  export type CompetitionCountOutputType = {
    Achievement: number
    CompetitionParticipant: number
    CompetitionRoom: number
    Kisi: number
    Subscription: number
    Tryout: number
  }

  export type CompetitionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Achievement?: boolean | CompetitionCountOutputTypeCountAchievementArgs
    CompetitionParticipant?: boolean | CompetitionCountOutputTypeCountCompetitionParticipantArgs
    CompetitionRoom?: boolean | CompetitionCountOutputTypeCountCompetitionRoomArgs
    Kisi?: boolean | CompetitionCountOutputTypeCountKisiArgs
    Subscription?: boolean | CompetitionCountOutputTypeCountSubscriptionArgs
    Tryout?: boolean | CompetitionCountOutputTypeCountTryoutArgs
  }

  // Custom InputTypes
  /**
   * CompetitionCountOutputType without action
   */
  export type CompetitionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionCountOutputType
     */
    select?: CompetitionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompetitionCountOutputType without action
   */
  export type CompetitionCountOutputTypeCountAchievementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AchievementWhereInput
  }

  /**
   * CompetitionCountOutputType without action
   */
  export type CompetitionCountOutputTypeCountCompetitionParticipantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitionParticipantWhereInput
  }

  /**
   * CompetitionCountOutputType without action
   */
  export type CompetitionCountOutputTypeCountCompetitionRoomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitionRoomWhereInput
  }

  /**
   * CompetitionCountOutputType without action
   */
  export type CompetitionCountOutputTypeCountKisiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KisiWhereInput
  }

  /**
   * CompetitionCountOutputType without action
   */
  export type CompetitionCountOutputTypeCountSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }

  /**
   * CompetitionCountOutputType without action
   */
  export type CompetitionCountOutputTypeCountTryoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TryoutWhereInput
  }


  /**
   * Count Type RegionCountOutputType
   */

  export type RegionCountOutputType = {
    Competition: number
  }

  export type RegionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Competition?: boolean | RegionCountOutputTypeCountCompetitionArgs
  }

  // Custom InputTypes
  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionCountOutputType
     */
    select?: RegionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeCountCompetitionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitionWhereInput
  }


  /**
   * Count Type SupervisorCountOutputType
   */

  export type SupervisorCountOutputType = {
    CompetitionRoom: number
  }

  export type SupervisorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CompetitionRoom?: boolean | SupervisorCountOutputTypeCountCompetitionRoomArgs
  }

  // Custom InputTypes
  /**
   * SupervisorCountOutputType without action
   */
  export type SupervisorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupervisorCountOutputType
     */
    select?: SupervisorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SupervisorCountOutputType without action
   */
  export type SupervisorCountOutputTypeCountCompetitionRoomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitionRoomWhereInput
  }


  /**
   * Count Type CompetitionRoomCountOutputType
   */

  export type CompetitionRoomCountOutputType = {
    CompetitionParticipant: number
  }

  export type CompetitionRoomCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CompetitionParticipant?: boolean | CompetitionRoomCountOutputTypeCountCompetitionParticipantArgs
  }

  // Custom InputTypes
  /**
   * CompetitionRoomCountOutputType without action
   */
  export type CompetitionRoomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionRoomCountOutputType
     */
    select?: CompetitionRoomCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompetitionRoomCountOutputType without action
   */
  export type CompetitionRoomCountOutputTypeCountCompetitionParticipantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitionParticipantWhereInput
  }


  /**
   * Count Type TryoutCountOutputType
   */

  export type TryoutCountOutputType = {
    Question: number
  }

  export type TryoutCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Question?: boolean | TryoutCountOutputTypeCountQuestionArgs
  }

  // Custom InputTypes
  /**
   * TryoutCountOutputType without action
   */
  export type TryoutCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TryoutCountOutputType
     */
    select?: TryoutCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TryoutCountOutputType without action
   */
  export type TryoutCountOutputTypeCountQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }


  /**
   * Count Type QuestionCountOutputType
   */

  export type QuestionCountOutputType = {
    Option: number
  }

  export type QuestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Option?: boolean | QuestionCountOutputTypeCountOptionArgs
  }

  // Custom InputTypes
  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCountOutputType
     */
    select?: QuestionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountOptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OptionWhereInput
  }


  /**
   * Count Type PaymentCountOutputType
   */

  export type PaymentCountOutputType = {
    CompetitionParticipant: number
    PaymentStatusHistory: number
  }

  export type PaymentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CompetitionParticipant?: boolean | PaymentCountOutputTypeCountCompetitionParticipantArgs
    PaymentStatusHistory?: boolean | PaymentCountOutputTypeCountPaymentStatusHistoryArgs
  }

  // Custom InputTypes
  /**
   * PaymentCountOutputType without action
   */
  export type PaymentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentCountOutputType
     */
    select?: PaymentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PaymentCountOutputType without action
   */
  export type PaymentCountOutputTypeCountCompetitionParticipantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitionParticipantWhereInput
  }

  /**
   * PaymentCountOutputType without action
   */
  export type PaymentCountOutputTypeCountPaymentStatusHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentStatusHistoryWhereInput
  }


  /**
   * Count Type SchoolCountOutputType
   */

  export type SchoolCountOutputType = {
    Student: number
  }

  export type SchoolCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Student?: boolean | SchoolCountOutputTypeCountStudentArgs
  }

  // Custom InputTypes
  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolCountOutputType
     */
    select?: SchoolCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountStudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleMinAggregateOutputType = {
    Id: string | null
    Name: $Enums.RoleType | null
    DateCreate: Date | null
    DateUpdate: Date | null
  }

  export type RoleMaxAggregateOutputType = {
    Id: string | null
    Name: $Enums.RoleType | null
    DateCreate: Date | null
    DateUpdate: Date | null
  }

  export type RoleCountAggregateOutputType = {
    Id: number
    Name: number
    DateCreate: number
    DateUpdate: number
    _all: number
  }


  export type RoleMinAggregateInputType = {
    Id?: true
    Name?: true
    DateCreate?: true
    DateUpdate?: true
  }

  export type RoleMaxAggregateInputType = {
    Id?: true
    Name?: true
    DateCreate?: true
    DateUpdate?: true
  }

  export type RoleCountAggregateInputType = {
    Id?: true
    Name?: true
    DateCreate?: true
    DateUpdate?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    Id: string
    Name: $Enums.RoleType
    DateCreate: Date
    DateUpdate: Date | null
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    Name?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    User?: boolean | Role$UserArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    Name?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    Id?: boolean
    Name?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
  }

  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | Role$UserArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: string
      Name: $Enums.RoleType
      DateCreate: Date
      DateUpdate: Date | null
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {RoleCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `Id`
     * const roleWithIdOnly = await prisma.role.createManyAndReturn({ 
     *   select: { Id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoleCreateManyAndReturnArgs>(args?: SelectSubset<T, RoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends Role$UserArgs<ExtArgs> = {}>(args?: Subset<T, Role$UserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */ 
  interface RoleFieldRefs {
    readonly Id: FieldRef<"Role", 'String'>
    readonly Name: FieldRef<"Role", 'RoleType'>
    readonly DateCreate: FieldRef<"Role", 'DateTime'>
    readonly DateUpdate: FieldRef<"Role", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role createManyAndReturn
   */
  export type RoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
  }

  /**
   * Role.User
   */
  export type Role$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    Birthdate: number | null
  }

  export type UserSumAggregateOutputType = {
    Birthdate: number | null
  }

  export type UserMinAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Name: string | null
    Username: string | null
    Password: string | null
    RoleId: string | null
    Birthdate: number | null
    BirthPlace: string | null
    PhoneNumber: string | null
    Gender: boolean | null
    Email: string | null
    Status: $Enums.ActiveStatus | null
  }

  export type UserMaxAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Name: string | null
    Username: string | null
    Password: string | null
    RoleId: string | null
    Birthdate: number | null
    BirthPlace: string | null
    PhoneNumber: string | null
    Gender: boolean | null
    Email: string | null
    Status: $Enums.ActiveStatus | null
  }

  export type UserCountAggregateOutputType = {
    Id: number
    DateCreate: number
    DateUpdate: number
    Name: number
    Username: number
    Password: number
    RoleId: number
    Birthdate: number
    BirthPlace: number
    PhoneNumber: number
    Gender: number
    Email: number
    Status: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    Birthdate?: true
  }

  export type UserSumAggregateInputType = {
    Birthdate?: true
  }

  export type UserMinAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    Username?: true
    Password?: true
    RoleId?: true
    Birthdate?: true
    BirthPlace?: true
    PhoneNumber?: true
    Gender?: true
    Email?: true
    Status?: true
  }

  export type UserMaxAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    Username?: true
    Password?: true
    RoleId?: true
    Birthdate?: true
    BirthPlace?: true
    PhoneNumber?: true
    Gender?: true
    Email?: true
    Status?: true
  }

  export type UserCountAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    Username?: true
    Password?: true
    RoleId?: true
    Birthdate?: true
    BirthPlace?: true
    PhoneNumber?: true
    Gender?: true
    Email?: true
    Status?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    Id: string
    DateCreate: Date
    DateUpdate: Date | null
    Name: string
    Username: string
    Password: string
    RoleId: string
    Birthdate: number
    BirthPlace: string | null
    PhoneNumber: string
    Gender: boolean
    Email: string | null
    Status: $Enums.ActiveStatus
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    Username?: boolean
    Password?: boolean
    RoleId?: boolean
    Birthdate?: boolean
    BirthPlace?: boolean
    PhoneNumber?: boolean
    Gender?: boolean
    Email?: boolean
    Status?: boolean
    Achievement?: boolean | User$AchievementArgs<ExtArgs>
    Student?: boolean | User$StudentArgs<ExtArgs>
    Role?: boolean | RoleDefaultArgs<ExtArgs>
    Payment?: boolean | User$PaymentArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    Username?: boolean
    Password?: boolean
    RoleId?: boolean
    Birthdate?: boolean
    BirthPlace?: boolean
    PhoneNumber?: boolean
    Gender?: boolean
    Email?: boolean
    Status?: boolean
    Role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    Username?: boolean
    Password?: boolean
    RoleId?: boolean
    Birthdate?: boolean
    BirthPlace?: boolean
    PhoneNumber?: boolean
    Gender?: boolean
    Email?: boolean
    Status?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Achievement?: boolean | User$AchievementArgs<ExtArgs>
    Student?: boolean | User$StudentArgs<ExtArgs>
    Role?: boolean | RoleDefaultArgs<ExtArgs>
    Payment?: boolean | User$PaymentArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Role?: boolean | RoleDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Achievement: Prisma.$AchievementPayload<ExtArgs>[]
      Student: Prisma.$StudentPayload<ExtArgs>[]
      Role: Prisma.$RolePayload<ExtArgs>
      Payment: Prisma.$PaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: string
      DateCreate: Date
      DateUpdate: Date | null
      Name: string
      Username: string
      Password: string
      RoleId: string
      Birthdate: number
      BirthPlace: string | null
      PhoneNumber: string
      Gender: boolean
      Email: string | null
      Status: $Enums.ActiveStatus
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `Id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { Id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Achievement<T extends User$AchievementArgs<ExtArgs> = {}>(args?: Subset<T, User$AchievementArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findMany"> | Null>
    Student<T extends User$StudentArgs<ExtArgs> = {}>(args?: Subset<T, User$StudentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany"> | Null>
    Role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Payment<T extends User$PaymentArgs<ExtArgs> = {}>(args?: Subset<T, User$PaymentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly Id: FieldRef<"User", 'String'>
    readonly DateCreate: FieldRef<"User", 'DateTime'>
    readonly DateUpdate: FieldRef<"User", 'DateTime'>
    readonly Name: FieldRef<"User", 'String'>
    readonly Username: FieldRef<"User", 'String'>
    readonly Password: FieldRef<"User", 'String'>
    readonly RoleId: FieldRef<"User", 'String'>
    readonly Birthdate: FieldRef<"User", 'Int'>
    readonly BirthPlace: FieldRef<"User", 'String'>
    readonly PhoneNumber: FieldRef<"User", 'String'>
    readonly Gender: FieldRef<"User", 'Boolean'>
    readonly Email: FieldRef<"User", 'String'>
    readonly Status: FieldRef<"User", 'ActiveStatus'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.Achievement
   */
  export type User$AchievementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    where?: AchievementWhereInput
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    cursor?: AchievementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * User.Student
   */
  export type User$StudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * User.Payment
   */
  export type User$PaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    Poin: number | null
  }

  export type StudentSumAggregateOutputType = {
    Poin: number | null
  }

  export type StudentMinAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    IdMember: string | null
    Address: string | null
    Stage: $Enums.StageType | null
    Class: string | null
    SchoolId: string | null
    NIK: string | null
    FatherName: string | null
    MotherName: string | null
    IdUser: string | null
    PhotoPath: string | null
    Poin: number | null
  }

  export type StudentMaxAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    IdMember: string | null
    Address: string | null
    Stage: $Enums.StageType | null
    Class: string | null
    SchoolId: string | null
    NIK: string | null
    FatherName: string | null
    MotherName: string | null
    IdUser: string | null
    PhotoPath: string | null
    Poin: number | null
  }

  export type StudentCountAggregateOutputType = {
    Id: number
    DateCreate: number
    DateUpdate: number
    IdMember: number
    Address: number
    Stage: number
    Class: number
    SchoolId: number
    NIK: number
    FatherName: number
    MotherName: number
    IdUser: number
    PhotoPath: number
    Poin: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    Poin?: true
  }

  export type StudentSumAggregateInputType = {
    Poin?: true
  }

  export type StudentMinAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    IdMember?: true
    Address?: true
    Stage?: true
    Class?: true
    SchoolId?: true
    NIK?: true
    FatherName?: true
    MotherName?: true
    IdUser?: true
    PhotoPath?: true
    Poin?: true
  }

  export type StudentMaxAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    IdMember?: true
    Address?: true
    Stage?: true
    Class?: true
    SchoolId?: true
    NIK?: true
    FatherName?: true
    MotherName?: true
    IdUser?: true
    PhotoPath?: true
    Poin?: true
  }

  export type StudentCountAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    IdMember?: true
    Address?: true
    Stage?: true
    Class?: true
    SchoolId?: true
    NIK?: true
    FatherName?: true
    MotherName?: true
    IdUser?: true
    PhotoPath?: true
    Poin?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    Id: string
    DateCreate: Date
    DateUpdate: Date | null
    IdMember: string | null
    Address: string
    Stage: $Enums.StageType
    Class: string
    SchoolId: string
    NIK: string
    FatherName: string | null
    MotherName: string | null
    IdUser: string
    PhotoPath: string | null
    Poin: number
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    IdMember?: boolean
    Address?: boolean
    Stage?: boolean
    Class?: boolean
    SchoolId?: boolean
    NIK?: boolean
    FatherName?: boolean
    MotherName?: boolean
    IdUser?: boolean
    PhotoPath?: boolean
    Poin?: boolean
    CompetitionParticipant?: boolean | Student$CompetitionParticipantArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    School?: boolean | SchoolDefaultArgs<ExtArgs>
    Subscription?: boolean | Student$SubscriptionArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    IdMember?: boolean
    Address?: boolean
    Stage?: boolean
    Class?: boolean
    SchoolId?: boolean
    NIK?: boolean
    FatherName?: boolean
    MotherName?: boolean
    IdUser?: boolean
    PhotoPath?: boolean
    Poin?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    School?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectScalar = {
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    IdMember?: boolean
    Address?: boolean
    Stage?: boolean
    Class?: boolean
    SchoolId?: boolean
    NIK?: boolean
    FatherName?: boolean
    MotherName?: boolean
    IdUser?: boolean
    PhotoPath?: boolean
    Poin?: boolean
  }

  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CompetitionParticipant?: boolean | Student$CompetitionParticipantArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    School?: boolean | SchoolDefaultArgs<ExtArgs>
    Subscription?: boolean | Student$SubscriptionArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    School?: boolean | SchoolDefaultArgs<ExtArgs>
  }

  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      CompetitionParticipant: Prisma.$CompetitionParticipantPayload<ExtArgs>[]
      User: Prisma.$UserPayload<ExtArgs>
      School: Prisma.$SchoolPayload<ExtArgs>
      Subscription: Prisma.$SubscriptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: string
      DateCreate: Date
      DateUpdate: Date | null
      IdMember: string | null
      Address: string
      Stage: $Enums.StageType
      Class: string
      SchoolId: string
      NIK: string
      FatherName: string | null
      MotherName: string | null
      IdUser: string
      PhotoPath: string | null
      Poin: number
    }, ExtArgs["result"]["student"]>
    composites: {}
  }

  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentFindUniqueArgs>(args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Student that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentFindFirstArgs>(args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends StudentFindManyArgs>(args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
     */
    create<T extends StudentCreateArgs>(args: SelectSubset<T, StudentCreateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Students.
     * @param {StudentCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentCreateManyArgs>(args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Students and returns the data saved in the database.
     * @param {StudentCreateManyAndReturnArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Students and only return the `Id`
     * const studentWithIdOnly = await prisma.student.createManyAndReturn({ 
     *   select: { Id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
     */
    delete<T extends StudentDeleteArgs>(args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentUpdateArgs>(args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentDeleteManyArgs>(args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentUpdateManyArgs>(args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
     */
    upsert<T extends StudentUpsertArgs>(args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    CompetitionParticipant<T extends Student$CompetitionParticipantArgs<ExtArgs> = {}>(args?: Subset<T, Student$CompetitionParticipantArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    School<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Subscription<T extends Student$SubscriptionArgs<ExtArgs> = {}>(args?: Subset<T, Student$SubscriptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student model
   */ 
  interface StudentFieldRefs {
    readonly Id: FieldRef<"Student", 'String'>
    readonly DateCreate: FieldRef<"Student", 'DateTime'>
    readonly DateUpdate: FieldRef<"Student", 'DateTime'>
    readonly IdMember: FieldRef<"Student", 'String'>
    readonly Address: FieldRef<"Student", 'String'>
    readonly Stage: FieldRef<"Student", 'StageType'>
    readonly Class: FieldRef<"Student", 'String'>
    readonly SchoolId: FieldRef<"Student", 'String'>
    readonly NIK: FieldRef<"Student", 'String'>
    readonly FatherName: FieldRef<"Student", 'String'>
    readonly MotherName: FieldRef<"Student", 'String'>
    readonly IdUser: FieldRef<"Student", 'String'>
    readonly PhotoPath: FieldRef<"Student", 'String'>
    readonly Poin: FieldRef<"Student", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student createManyAndReturn
   */
  export type StudentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
  }

  /**
   * Student.CompetitionParticipant
   */
  export type Student$CompetitionParticipantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionParticipant
     */
    select?: CompetitionParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionParticipantInclude<ExtArgs> | null
    where?: CompetitionParticipantWhereInput
    orderBy?: CompetitionParticipantOrderByWithRelationInput | CompetitionParticipantOrderByWithRelationInput[]
    cursor?: CompetitionParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompetitionParticipantScalarFieldEnum | CompetitionParticipantScalarFieldEnum[]
  }

  /**
   * Student.Subscription
   */
  export type Student$SubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model Achievement
   */

  export type AggregateAchievement = {
    _count: AchievementCountAggregateOutputType | null
    _min: AchievementMinAggregateOutputType | null
    _max: AchievementMaxAggregateOutputType | null
  }

  export type AchievementMinAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    UserId: string | null
    Category: string | null
    Describe: string | null
    CompetitionId: string | null
  }

  export type AchievementMaxAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    UserId: string | null
    Category: string | null
    Describe: string | null
    CompetitionId: string | null
  }

  export type AchievementCountAggregateOutputType = {
    Id: number
    DateCreate: number
    DateUpdate: number
    UserId: number
    Category: number
    Describe: number
    CompetitionId: number
    _all: number
  }


  export type AchievementMinAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    UserId?: true
    Category?: true
    Describe?: true
    CompetitionId?: true
  }

  export type AchievementMaxAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    UserId?: true
    Category?: true
    Describe?: true
    CompetitionId?: true
  }

  export type AchievementCountAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    UserId?: true
    Category?: true
    Describe?: true
    CompetitionId?: true
    _all?: true
  }

  export type AchievementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Achievement to aggregate.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Achievements
    **/
    _count?: true | AchievementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AchievementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AchievementMaxAggregateInputType
  }

  export type GetAchievementAggregateType<T extends AchievementAggregateArgs> = {
        [P in keyof T & keyof AggregateAchievement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAchievement[P]>
      : GetScalarType<T[P], AggregateAchievement[P]>
  }




  export type AchievementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AchievementWhereInput
    orderBy?: AchievementOrderByWithAggregationInput | AchievementOrderByWithAggregationInput[]
    by: AchievementScalarFieldEnum[] | AchievementScalarFieldEnum
    having?: AchievementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AchievementCountAggregateInputType | true
    _min?: AchievementMinAggregateInputType
    _max?: AchievementMaxAggregateInputType
  }

  export type AchievementGroupByOutputType = {
    Id: string
    DateCreate: Date
    DateUpdate: Date | null
    UserId: string
    Category: string
    Describe: string | null
    CompetitionId: string
    _count: AchievementCountAggregateOutputType | null
    _min: AchievementMinAggregateOutputType | null
    _max: AchievementMaxAggregateOutputType | null
  }

  type GetAchievementGroupByPayload<T extends AchievementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AchievementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AchievementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AchievementGroupByOutputType[P]>
            : GetScalarType<T[P], AchievementGroupByOutputType[P]>
        }
      >
    >


  export type AchievementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    UserId?: boolean
    Category?: boolean
    Describe?: boolean
    CompetitionId?: boolean
    Competition?: boolean | CompetitionDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["achievement"]>

  export type AchievementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    UserId?: boolean
    Category?: boolean
    Describe?: boolean
    CompetitionId?: boolean
    Competition?: boolean | CompetitionDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["achievement"]>

  export type AchievementSelectScalar = {
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    UserId?: boolean
    Category?: boolean
    Describe?: boolean
    CompetitionId?: boolean
  }

  export type AchievementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Competition?: boolean | CompetitionDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AchievementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Competition?: boolean | CompetitionDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AchievementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Achievement"
    objects: {
      Competition: Prisma.$CompetitionPayload<ExtArgs>
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: string
      DateCreate: Date
      DateUpdate: Date | null
      UserId: string
      Category: string
      Describe: string | null
      CompetitionId: string
    }, ExtArgs["result"]["achievement"]>
    composites: {}
  }

  type AchievementGetPayload<S extends boolean | null | undefined | AchievementDefaultArgs> = $Result.GetResult<Prisma.$AchievementPayload, S>

  type AchievementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AchievementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AchievementCountAggregateInputType | true
    }

  export interface AchievementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Achievement'], meta: { name: 'Achievement' } }
    /**
     * Find zero or one Achievement that matches the filter.
     * @param {AchievementFindUniqueArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AchievementFindUniqueArgs>(args: SelectSubset<T, AchievementFindUniqueArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Achievement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AchievementFindUniqueOrThrowArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AchievementFindUniqueOrThrowArgs>(args: SelectSubset<T, AchievementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Achievement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindFirstArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AchievementFindFirstArgs>(args?: SelectSubset<T, AchievementFindFirstArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Achievement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindFirstOrThrowArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AchievementFindFirstOrThrowArgs>(args?: SelectSubset<T, AchievementFindFirstOrThrowArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Achievements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Achievements
     * const achievements = await prisma.achievement.findMany()
     * 
     * // Get first 10 Achievements
     * const achievements = await prisma.achievement.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const achievementWithIdOnly = await prisma.achievement.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends AchievementFindManyArgs>(args?: SelectSubset<T, AchievementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Achievement.
     * @param {AchievementCreateArgs} args - Arguments to create a Achievement.
     * @example
     * // Create one Achievement
     * const Achievement = await prisma.achievement.create({
     *   data: {
     *     // ... data to create a Achievement
     *   }
     * })
     * 
     */
    create<T extends AchievementCreateArgs>(args: SelectSubset<T, AchievementCreateArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Achievements.
     * @param {AchievementCreateManyArgs} args - Arguments to create many Achievements.
     * @example
     * // Create many Achievements
     * const achievement = await prisma.achievement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AchievementCreateManyArgs>(args?: SelectSubset<T, AchievementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Achievements and returns the data saved in the database.
     * @param {AchievementCreateManyAndReturnArgs} args - Arguments to create many Achievements.
     * @example
     * // Create many Achievements
     * const achievement = await prisma.achievement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Achievements and only return the `Id`
     * const achievementWithIdOnly = await prisma.achievement.createManyAndReturn({ 
     *   select: { Id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AchievementCreateManyAndReturnArgs>(args?: SelectSubset<T, AchievementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Achievement.
     * @param {AchievementDeleteArgs} args - Arguments to delete one Achievement.
     * @example
     * // Delete one Achievement
     * const Achievement = await prisma.achievement.delete({
     *   where: {
     *     // ... filter to delete one Achievement
     *   }
     * })
     * 
     */
    delete<T extends AchievementDeleteArgs>(args: SelectSubset<T, AchievementDeleteArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Achievement.
     * @param {AchievementUpdateArgs} args - Arguments to update one Achievement.
     * @example
     * // Update one Achievement
     * const achievement = await prisma.achievement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AchievementUpdateArgs>(args: SelectSubset<T, AchievementUpdateArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Achievements.
     * @param {AchievementDeleteManyArgs} args - Arguments to filter Achievements to delete.
     * @example
     * // Delete a few Achievements
     * const { count } = await prisma.achievement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AchievementDeleteManyArgs>(args?: SelectSubset<T, AchievementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Achievements
     * const achievement = await prisma.achievement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AchievementUpdateManyArgs>(args: SelectSubset<T, AchievementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Achievement.
     * @param {AchievementUpsertArgs} args - Arguments to update or create a Achievement.
     * @example
     * // Update or create a Achievement
     * const achievement = await prisma.achievement.upsert({
     *   create: {
     *     // ... data to create a Achievement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Achievement we want to update
     *   }
     * })
     */
    upsert<T extends AchievementUpsertArgs>(args: SelectSubset<T, AchievementUpsertArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementCountArgs} args - Arguments to filter Achievements to count.
     * @example
     * // Count the number of Achievements
     * const count = await prisma.achievement.count({
     *   where: {
     *     // ... the filter for the Achievements we want to count
     *   }
     * })
    **/
    count<T extends AchievementCountArgs>(
      args?: Subset<T, AchievementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AchievementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Achievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AchievementAggregateArgs>(args: Subset<T, AchievementAggregateArgs>): Prisma.PrismaPromise<GetAchievementAggregateType<T>>

    /**
     * Group by Achievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AchievementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AchievementGroupByArgs['orderBy'] }
        : { orderBy?: AchievementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AchievementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAchievementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Achievement model
   */
  readonly fields: AchievementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Achievement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AchievementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Competition<T extends CompetitionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompetitionDefaultArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Achievement model
   */ 
  interface AchievementFieldRefs {
    readonly Id: FieldRef<"Achievement", 'String'>
    readonly DateCreate: FieldRef<"Achievement", 'DateTime'>
    readonly DateUpdate: FieldRef<"Achievement", 'DateTime'>
    readonly UserId: FieldRef<"Achievement", 'String'>
    readonly Category: FieldRef<"Achievement", 'String'>
    readonly Describe: FieldRef<"Achievement", 'String'>
    readonly CompetitionId: FieldRef<"Achievement", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Achievement findUnique
   */
  export type AchievementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement findUniqueOrThrow
   */
  export type AchievementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement findFirst
   */
  export type AchievementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achievements.
     */
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Achievement findFirstOrThrow
   */
  export type AchievementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achievements.
     */
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Achievement findMany
   */
  export type AchievementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievements to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Achievement create
   */
  export type AchievementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The data needed to create a Achievement.
     */
    data: XOR<AchievementCreateInput, AchievementUncheckedCreateInput>
  }

  /**
   * Achievement createMany
   */
  export type AchievementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Achievements.
     */
    data: AchievementCreateManyInput | AchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Achievement createManyAndReturn
   */
  export type AchievementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Achievements.
     */
    data: AchievementCreateManyInput | AchievementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Achievement update
   */
  export type AchievementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The data needed to update a Achievement.
     */
    data: XOR<AchievementUpdateInput, AchievementUncheckedUpdateInput>
    /**
     * Choose, which Achievement to update.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement updateMany
   */
  export type AchievementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Achievements.
     */
    data: XOR<AchievementUpdateManyMutationInput, AchievementUncheckedUpdateManyInput>
    /**
     * Filter which Achievements to update
     */
    where?: AchievementWhereInput
  }

  /**
   * Achievement upsert
   */
  export type AchievementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The filter to search for the Achievement to update in case it exists.
     */
    where: AchievementWhereUniqueInput
    /**
     * In case the Achievement found by the `where` argument doesn't exist, create a new Achievement with this data.
     */
    create: XOR<AchievementCreateInput, AchievementUncheckedCreateInput>
    /**
     * In case the Achievement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AchievementUpdateInput, AchievementUncheckedUpdateInput>
  }

  /**
   * Achievement delete
   */
  export type AchievementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter which Achievement to delete.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement deleteMany
   */
  export type AchievementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Achievements to delete
     */
    where?: AchievementWhereInput
  }

  /**
   * Achievement without action
   */
  export type AchievementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
  }


  /**
   * Model Season
   */

  export type AggregateSeason = {
    _count: SeasonCountAggregateOutputType | null
    _avg: SeasonAvgAggregateOutputType | null
    _sum: SeasonSumAggregateOutputType | null
    _min: SeasonMinAggregateOutputType | null
    _max: SeasonMaxAggregateOutputType | null
  }

  export type SeasonAvgAggregateOutputType = {
    StartDate: number | null
    EndDate: number | null
  }

  export type SeasonSumAggregateOutputType = {
    StartDate: number | null
    EndDate: number | null
  }

  export type SeasonMinAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Name: string | null
    StartDate: number | null
    EndDate: number | null
  }

  export type SeasonMaxAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Name: string | null
    StartDate: number | null
    EndDate: number | null
  }

  export type SeasonCountAggregateOutputType = {
    Id: number
    DateCreate: number
    DateUpdate: number
    Name: number
    StartDate: number
    EndDate: number
    _all: number
  }


  export type SeasonAvgAggregateInputType = {
    StartDate?: true
    EndDate?: true
  }

  export type SeasonSumAggregateInputType = {
    StartDate?: true
    EndDate?: true
  }

  export type SeasonMinAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    StartDate?: true
    EndDate?: true
  }

  export type SeasonMaxAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    StartDate?: true
    EndDate?: true
  }

  export type SeasonCountAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    StartDate?: true
    EndDate?: true
    _all?: true
  }

  export type SeasonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Season to aggregate.
     */
    where?: SeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seasons to fetch.
     */
    orderBy?: SeasonOrderByWithRelationInput | SeasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Seasons
    **/
    _count?: true | SeasonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeasonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeasonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeasonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeasonMaxAggregateInputType
  }

  export type GetSeasonAggregateType<T extends SeasonAggregateArgs> = {
        [P in keyof T & keyof AggregateSeason]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeason[P]>
      : GetScalarType<T[P], AggregateSeason[P]>
  }




  export type SeasonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeasonWhereInput
    orderBy?: SeasonOrderByWithAggregationInput | SeasonOrderByWithAggregationInput[]
    by: SeasonScalarFieldEnum[] | SeasonScalarFieldEnum
    having?: SeasonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeasonCountAggregateInputType | true
    _avg?: SeasonAvgAggregateInputType
    _sum?: SeasonSumAggregateInputType
    _min?: SeasonMinAggregateInputType
    _max?: SeasonMaxAggregateInputType
  }

  export type SeasonGroupByOutputType = {
    Id: string
    DateCreate: Date
    DateUpdate: Date | null
    Name: string
    StartDate: number
    EndDate: number
    _count: SeasonCountAggregateOutputType | null
    _avg: SeasonAvgAggregateOutputType | null
    _sum: SeasonSumAggregateOutputType | null
    _min: SeasonMinAggregateOutputType | null
    _max: SeasonMaxAggregateOutputType | null
  }

  type GetSeasonGroupByPayload<T extends SeasonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeasonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeasonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeasonGroupByOutputType[P]>
            : GetScalarType<T[P], SeasonGroupByOutputType[P]>
        }
      >
    >


  export type SeasonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    StartDate?: boolean
    EndDate?: boolean
    Competition?: boolean | Season$CompetitionArgs<ExtArgs>
    _count?: boolean | SeasonCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["season"]>

  export type SeasonSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    StartDate?: boolean
    EndDate?: boolean
  }, ExtArgs["result"]["season"]>

  export type SeasonSelectScalar = {
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    StartDate?: boolean
    EndDate?: boolean
  }

  export type SeasonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Competition?: boolean | Season$CompetitionArgs<ExtArgs>
    _count?: boolean | SeasonCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SeasonIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SeasonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Season"
    objects: {
      Competition: Prisma.$CompetitionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: string
      DateCreate: Date
      DateUpdate: Date | null
      Name: string
      StartDate: number
      EndDate: number
    }, ExtArgs["result"]["season"]>
    composites: {}
  }

  type SeasonGetPayload<S extends boolean | null | undefined | SeasonDefaultArgs> = $Result.GetResult<Prisma.$SeasonPayload, S>

  type SeasonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SeasonFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SeasonCountAggregateInputType | true
    }

  export interface SeasonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Season'], meta: { name: 'Season' } }
    /**
     * Find zero or one Season that matches the filter.
     * @param {SeasonFindUniqueArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SeasonFindUniqueArgs>(args: SelectSubset<T, SeasonFindUniqueArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Season that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SeasonFindUniqueOrThrowArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SeasonFindUniqueOrThrowArgs>(args: SelectSubset<T, SeasonFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Season that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonFindFirstArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SeasonFindFirstArgs>(args?: SelectSubset<T, SeasonFindFirstArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Season that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonFindFirstOrThrowArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SeasonFindFirstOrThrowArgs>(args?: SelectSubset<T, SeasonFindFirstOrThrowArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Seasons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Seasons
     * const seasons = await prisma.season.findMany()
     * 
     * // Get first 10 Seasons
     * const seasons = await prisma.season.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const seasonWithIdOnly = await prisma.season.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends SeasonFindManyArgs>(args?: SelectSubset<T, SeasonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Season.
     * @param {SeasonCreateArgs} args - Arguments to create a Season.
     * @example
     * // Create one Season
     * const Season = await prisma.season.create({
     *   data: {
     *     // ... data to create a Season
     *   }
     * })
     * 
     */
    create<T extends SeasonCreateArgs>(args: SelectSubset<T, SeasonCreateArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Seasons.
     * @param {SeasonCreateManyArgs} args - Arguments to create many Seasons.
     * @example
     * // Create many Seasons
     * const season = await prisma.season.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SeasonCreateManyArgs>(args?: SelectSubset<T, SeasonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Seasons and returns the data saved in the database.
     * @param {SeasonCreateManyAndReturnArgs} args - Arguments to create many Seasons.
     * @example
     * // Create many Seasons
     * const season = await prisma.season.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Seasons and only return the `Id`
     * const seasonWithIdOnly = await prisma.season.createManyAndReturn({ 
     *   select: { Id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SeasonCreateManyAndReturnArgs>(args?: SelectSubset<T, SeasonCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Season.
     * @param {SeasonDeleteArgs} args - Arguments to delete one Season.
     * @example
     * // Delete one Season
     * const Season = await prisma.season.delete({
     *   where: {
     *     // ... filter to delete one Season
     *   }
     * })
     * 
     */
    delete<T extends SeasonDeleteArgs>(args: SelectSubset<T, SeasonDeleteArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Season.
     * @param {SeasonUpdateArgs} args - Arguments to update one Season.
     * @example
     * // Update one Season
     * const season = await prisma.season.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SeasonUpdateArgs>(args: SelectSubset<T, SeasonUpdateArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Seasons.
     * @param {SeasonDeleteManyArgs} args - Arguments to filter Seasons to delete.
     * @example
     * // Delete a few Seasons
     * const { count } = await prisma.season.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SeasonDeleteManyArgs>(args?: SelectSubset<T, SeasonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seasons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Seasons
     * const season = await prisma.season.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SeasonUpdateManyArgs>(args: SelectSubset<T, SeasonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Season.
     * @param {SeasonUpsertArgs} args - Arguments to update or create a Season.
     * @example
     * // Update or create a Season
     * const season = await prisma.season.upsert({
     *   create: {
     *     // ... data to create a Season
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Season we want to update
     *   }
     * })
     */
    upsert<T extends SeasonUpsertArgs>(args: SelectSubset<T, SeasonUpsertArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Seasons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonCountArgs} args - Arguments to filter Seasons to count.
     * @example
     * // Count the number of Seasons
     * const count = await prisma.season.count({
     *   where: {
     *     // ... the filter for the Seasons we want to count
     *   }
     * })
    **/
    count<T extends SeasonCountArgs>(
      args?: Subset<T, SeasonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeasonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Season.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeasonAggregateArgs>(args: Subset<T, SeasonAggregateArgs>): Prisma.PrismaPromise<GetSeasonAggregateType<T>>

    /**
     * Group by Season.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeasonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeasonGroupByArgs['orderBy'] }
        : { orderBy?: SeasonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeasonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeasonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Season model
   */
  readonly fields: SeasonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Season.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeasonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Competition<T extends Season$CompetitionArgs<ExtArgs> = {}>(args?: Subset<T, Season$CompetitionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Season model
   */ 
  interface SeasonFieldRefs {
    readonly Id: FieldRef<"Season", 'String'>
    readonly DateCreate: FieldRef<"Season", 'DateTime'>
    readonly DateUpdate: FieldRef<"Season", 'DateTime'>
    readonly Name: FieldRef<"Season", 'String'>
    readonly StartDate: FieldRef<"Season", 'Int'>
    readonly EndDate: FieldRef<"Season", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Season findUnique
   */
  export type SeasonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Season to fetch.
     */
    where: SeasonWhereUniqueInput
  }

  /**
   * Season findUniqueOrThrow
   */
  export type SeasonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Season to fetch.
     */
    where: SeasonWhereUniqueInput
  }

  /**
   * Season findFirst
   */
  export type SeasonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Season to fetch.
     */
    where?: SeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seasons to fetch.
     */
    orderBy?: SeasonOrderByWithRelationInput | SeasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seasons.
     */
    cursor?: SeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seasons.
     */
    distinct?: SeasonScalarFieldEnum | SeasonScalarFieldEnum[]
  }

  /**
   * Season findFirstOrThrow
   */
  export type SeasonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Season to fetch.
     */
    where?: SeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seasons to fetch.
     */
    orderBy?: SeasonOrderByWithRelationInput | SeasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seasons.
     */
    cursor?: SeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seasons.
     */
    distinct?: SeasonScalarFieldEnum | SeasonScalarFieldEnum[]
  }

  /**
   * Season findMany
   */
  export type SeasonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Seasons to fetch.
     */
    where?: SeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seasons to fetch.
     */
    orderBy?: SeasonOrderByWithRelationInput | SeasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Seasons.
     */
    cursor?: SeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seasons.
     */
    skip?: number
    distinct?: SeasonScalarFieldEnum | SeasonScalarFieldEnum[]
  }

  /**
   * Season create
   */
  export type SeasonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * The data needed to create a Season.
     */
    data: XOR<SeasonCreateInput, SeasonUncheckedCreateInput>
  }

  /**
   * Season createMany
   */
  export type SeasonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Seasons.
     */
    data: SeasonCreateManyInput | SeasonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Season createManyAndReturn
   */
  export type SeasonCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Seasons.
     */
    data: SeasonCreateManyInput | SeasonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Season update
   */
  export type SeasonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * The data needed to update a Season.
     */
    data: XOR<SeasonUpdateInput, SeasonUncheckedUpdateInput>
    /**
     * Choose, which Season to update.
     */
    where: SeasonWhereUniqueInput
  }

  /**
   * Season updateMany
   */
  export type SeasonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Seasons.
     */
    data: XOR<SeasonUpdateManyMutationInput, SeasonUncheckedUpdateManyInput>
    /**
     * Filter which Seasons to update
     */
    where?: SeasonWhereInput
  }

  /**
   * Season upsert
   */
  export type SeasonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * The filter to search for the Season to update in case it exists.
     */
    where: SeasonWhereUniqueInput
    /**
     * In case the Season found by the `where` argument doesn't exist, create a new Season with this data.
     */
    create: XOR<SeasonCreateInput, SeasonUncheckedCreateInput>
    /**
     * In case the Season was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeasonUpdateInput, SeasonUncheckedUpdateInput>
  }

  /**
   * Season delete
   */
  export type SeasonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter which Season to delete.
     */
    where: SeasonWhereUniqueInput
  }

  /**
   * Season deleteMany
   */
  export type SeasonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Seasons to delete
     */
    where?: SeasonWhereInput
  }

  /**
   * Season.Competition
   */
  export type Season$CompetitionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    where?: CompetitionWhereInput
    orderBy?: CompetitionOrderByWithRelationInput | CompetitionOrderByWithRelationInput[]
    cursor?: CompetitionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompetitionScalarFieldEnum | CompetitionScalarFieldEnum[]
  }

  /**
   * Season without action
   */
  export type SeasonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
  }


  /**
   * Model Subject
   */

  export type AggregateSubject = {
    _count: SubjectCountAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  export type SubjectMinAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Name: string | null
  }

  export type SubjectMaxAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Name: string | null
  }

  export type SubjectCountAggregateOutputType = {
    Id: number
    DateCreate: number
    DateUpdate: number
    Name: number
    _all: number
  }


  export type SubjectMinAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
  }

  export type SubjectMaxAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
  }

  export type SubjectCountAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    _all?: true
  }

  export type SubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subject to aggregate.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subjects
    **/
    _count?: true | SubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectMaxAggregateInputType
  }

  export type GetSubjectAggregateType<T extends SubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubject[P]>
      : GetScalarType<T[P], AggregateSubject[P]>
  }




  export type SubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithAggregationInput | SubjectOrderByWithAggregationInput[]
    by: SubjectScalarFieldEnum[] | SubjectScalarFieldEnum
    having?: SubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectCountAggregateInputType | true
    _min?: SubjectMinAggregateInputType
    _max?: SubjectMaxAggregateInputType
  }

  export type SubjectGroupByOutputType = {
    Id: string
    DateCreate: Date
    DateUpdate: Date | null
    Name: string
    _count: SubjectCountAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  type GetSubjectGroupByPayload<T extends SubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectGroupByOutputType[P]>
        }
      >
    >


  export type SubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    Competition?: boolean | Subject$CompetitionArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectScalar = {
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
  }

  export type SubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Competition?: boolean | Subject$CompetitionArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subject"
    objects: {
      Competition: Prisma.$CompetitionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: string
      DateCreate: Date
      DateUpdate: Date | null
      Name: string
    }, ExtArgs["result"]["subject"]>
    composites: {}
  }

  type SubjectGetPayload<S extends boolean | null | undefined | SubjectDefaultArgs> = $Result.GetResult<Prisma.$SubjectPayload, S>

  type SubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubjectCountAggregateInputType | true
    }

  export interface SubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subject'], meta: { name: 'Subject' } }
    /**
     * Find zero or one Subject that matches the filter.
     * @param {SubjectFindUniqueArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubjectFindUniqueArgs>(args: SelectSubset<T, SubjectFindUniqueArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Subject that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SubjectFindUniqueOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubjectFindUniqueOrThrowArgs>(args: SelectSubset<T, SubjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Subject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubjectFindFirstArgs>(args?: SelectSubset<T, SubjectFindFirstArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Subject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubjectFindFirstOrThrowArgs>(args?: SelectSubset<T, SubjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subjects
     * const subjects = await prisma.subject.findMany()
     * 
     * // Get first 10 Subjects
     * const subjects = await prisma.subject.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const subjectWithIdOnly = await prisma.subject.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends SubjectFindManyArgs>(args?: SelectSubset<T, SubjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Subject.
     * @param {SubjectCreateArgs} args - Arguments to create a Subject.
     * @example
     * // Create one Subject
     * const Subject = await prisma.subject.create({
     *   data: {
     *     // ... data to create a Subject
     *   }
     * })
     * 
     */
    create<T extends SubjectCreateArgs>(args: SelectSubset<T, SubjectCreateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Subjects.
     * @param {SubjectCreateManyArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subject = await prisma.subject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubjectCreateManyArgs>(args?: SelectSubset<T, SubjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subjects and returns the data saved in the database.
     * @param {SubjectCreateManyAndReturnArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subject = await prisma.subject.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subjects and only return the `Id`
     * const subjectWithIdOnly = await prisma.subject.createManyAndReturn({ 
     *   select: { Id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubjectCreateManyAndReturnArgs>(args?: SelectSubset<T, SubjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Subject.
     * @param {SubjectDeleteArgs} args - Arguments to delete one Subject.
     * @example
     * // Delete one Subject
     * const Subject = await prisma.subject.delete({
     *   where: {
     *     // ... filter to delete one Subject
     *   }
     * })
     * 
     */
    delete<T extends SubjectDeleteArgs>(args: SelectSubset<T, SubjectDeleteArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Subject.
     * @param {SubjectUpdateArgs} args - Arguments to update one Subject.
     * @example
     * // Update one Subject
     * const subject = await prisma.subject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubjectUpdateArgs>(args: SelectSubset<T, SubjectUpdateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Subjects.
     * @param {SubjectDeleteManyArgs} args - Arguments to filter Subjects to delete.
     * @example
     * // Delete a few Subjects
     * const { count } = await prisma.subject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubjectDeleteManyArgs>(args?: SelectSubset<T, SubjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubjectUpdateManyArgs>(args: SelectSubset<T, SubjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subject.
     * @param {SubjectUpsertArgs} args - Arguments to update or create a Subject.
     * @example
     * // Update or create a Subject
     * const subject = await prisma.subject.upsert({
     *   create: {
     *     // ... data to create a Subject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subject we want to update
     *   }
     * })
     */
    upsert<T extends SubjectUpsertArgs>(args: SelectSubset<T, SubjectUpsertArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectCountArgs} args - Arguments to filter Subjects to count.
     * @example
     * // Count the number of Subjects
     * const count = await prisma.subject.count({
     *   where: {
     *     // ... the filter for the Subjects we want to count
     *   }
     * })
    **/
    count<T extends SubjectCountArgs>(
      args?: Subset<T, SubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectAggregateArgs>(args: Subset<T, SubjectAggregateArgs>): Prisma.PrismaPromise<GetSubjectAggregateType<T>>

    /**
     * Group by Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectGroupByArgs['orderBy'] }
        : { orderBy?: SubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subject model
   */
  readonly fields: SubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Competition<T extends Subject$CompetitionArgs<ExtArgs> = {}>(args?: Subset<T, Subject$CompetitionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subject model
   */ 
  interface SubjectFieldRefs {
    readonly Id: FieldRef<"Subject", 'String'>
    readonly DateCreate: FieldRef<"Subject", 'DateTime'>
    readonly DateUpdate: FieldRef<"Subject", 'DateTime'>
    readonly Name: FieldRef<"Subject", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Subject findUnique
   */
  export type SubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findUniqueOrThrow
   */
  export type SubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findFirst
   */
  export type SubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findFirstOrThrow
   */
  export type SubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findMany
   */
  export type SubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subjects to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject create
   */
  export type SubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Subject.
     */
    data: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
  }

  /**
   * Subject createMany
   */
  export type SubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subject createManyAndReturn
   */
  export type SubjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subject update
   */
  export type SubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Subject.
     */
    data: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
    /**
     * Choose, which Subject to update.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject updateMany
   */
  export type SubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectWhereInput
  }

  /**
   * Subject upsert
   */
  export type SubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Subject to update in case it exists.
     */
    where: SubjectWhereUniqueInput
    /**
     * In case the Subject found by the `where` argument doesn't exist, create a new Subject with this data.
     */
    create: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
    /**
     * In case the Subject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
  }

  /**
   * Subject delete
   */
  export type SubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter which Subject to delete.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject deleteMany
   */
  export type SubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subjects to delete
     */
    where?: SubjectWhereInput
  }

  /**
   * Subject.Competition
   */
  export type Subject$CompetitionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    where?: CompetitionWhereInput
    orderBy?: CompetitionOrderByWithRelationInput | CompetitionOrderByWithRelationInput[]
    cursor?: CompetitionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompetitionScalarFieldEnum | CompetitionScalarFieldEnum[]
  }

  /**
   * Subject without action
   */
  export type SubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
  }


  /**
   * Model Competition
   */

  export type AggregateCompetition = {
    _count: CompetitionCountAggregateOutputType | null
    _avg: CompetitionAvgAggregateOutputType | null
    _sum: CompetitionSumAggregateOutputType | null
    _min: CompetitionMinAggregateOutputType | null
    _max: CompetitionMaxAggregateOutputType | null
  }

  export type CompetitionAvgAggregateOutputType = {
    Date: number | null
    Level: number | null
    Price: number | null
  }

  export type CompetitionSumAggregateOutputType = {
    Date: number | null
    Level: number | null
    Price: number | null
  }

  export type CompetitionMinAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Name: string | null
    Description: string | null
    Date: number | null
    Level: number | null
    Stage: $Enums.StageType | null
    Price: number | null
    Location: string | null
    SeasonId: string | null
    RegionId: string | null
    SubjectId: string | null
    CodePackage: string | null
    PathAnswer: string | null
    regionId: string | null
  }

  export type CompetitionMaxAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Name: string | null
    Description: string | null
    Date: number | null
    Level: number | null
    Stage: $Enums.StageType | null
    Price: number | null
    Location: string | null
    SeasonId: string | null
    RegionId: string | null
    SubjectId: string | null
    CodePackage: string | null
    PathAnswer: string | null
    regionId: string | null
  }

  export type CompetitionCountAggregateOutputType = {
    Id: number
    DateCreate: number
    DateUpdate: number
    Name: number
    Description: number
    Date: number
    Level: number
    Stage: number
    Price: number
    Location: number
    SeasonId: number
    RegionId: number
    SubjectId: number
    CodePackage: number
    PathAnswer: number
    regionId: number
    _all: number
  }


  export type CompetitionAvgAggregateInputType = {
    Date?: true
    Level?: true
    Price?: true
  }

  export type CompetitionSumAggregateInputType = {
    Date?: true
    Level?: true
    Price?: true
  }

  export type CompetitionMinAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    Description?: true
    Date?: true
    Level?: true
    Stage?: true
    Price?: true
    Location?: true
    SeasonId?: true
    RegionId?: true
    SubjectId?: true
    CodePackage?: true
    PathAnswer?: true
    regionId?: true
  }

  export type CompetitionMaxAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    Description?: true
    Date?: true
    Level?: true
    Stage?: true
    Price?: true
    Location?: true
    SeasonId?: true
    RegionId?: true
    SubjectId?: true
    CodePackage?: true
    PathAnswer?: true
    regionId?: true
  }

  export type CompetitionCountAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    Description?: true
    Date?: true
    Level?: true
    Stage?: true
    Price?: true
    Location?: true
    SeasonId?: true
    RegionId?: true
    SubjectId?: true
    CodePackage?: true
    PathAnswer?: true
    regionId?: true
    _all?: true
  }

  export type CompetitionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Competition to aggregate.
     */
    where?: CompetitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competitions to fetch.
     */
    orderBy?: CompetitionOrderByWithRelationInput | CompetitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompetitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Competitions
    **/
    _count?: true | CompetitionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompetitionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompetitionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompetitionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompetitionMaxAggregateInputType
  }

  export type GetCompetitionAggregateType<T extends CompetitionAggregateArgs> = {
        [P in keyof T & keyof AggregateCompetition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompetition[P]>
      : GetScalarType<T[P], AggregateCompetition[P]>
  }




  export type CompetitionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitionWhereInput
    orderBy?: CompetitionOrderByWithAggregationInput | CompetitionOrderByWithAggregationInput[]
    by: CompetitionScalarFieldEnum[] | CompetitionScalarFieldEnum
    having?: CompetitionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompetitionCountAggregateInputType | true
    _avg?: CompetitionAvgAggregateInputType
    _sum?: CompetitionSumAggregateInputType
    _min?: CompetitionMinAggregateInputType
    _max?: CompetitionMaxAggregateInputType
  }

  export type CompetitionGroupByOutputType = {
    Id: string
    DateCreate: Date
    DateUpdate: Date | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    SeasonId: string
    RegionId: string
    SubjectId: string
    CodePackage: string | null
    PathAnswer: string | null
    regionId: string | null
    _count: CompetitionCountAggregateOutputType | null
    _avg: CompetitionAvgAggregateOutputType | null
    _sum: CompetitionSumAggregateOutputType | null
    _min: CompetitionMinAggregateOutputType | null
    _max: CompetitionMaxAggregateOutputType | null
  }

  type GetCompetitionGroupByPayload<T extends CompetitionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompetitionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompetitionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompetitionGroupByOutputType[P]>
            : GetScalarType<T[P], CompetitionGroupByOutputType[P]>
        }
      >
    >


  export type CompetitionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    Description?: boolean
    Date?: boolean
    Level?: boolean
    Stage?: boolean
    Price?: boolean
    Location?: boolean
    SeasonId?: boolean
    RegionId?: boolean
    SubjectId?: boolean
    CodePackage?: boolean
    PathAnswer?: boolean
    regionId?: boolean
    Achievement?: boolean | Competition$AchievementArgs<ExtArgs>
    Region?: boolean | RegionDefaultArgs<ExtArgs>
    Season?: boolean | SeasonDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
    CompetitionParticipant?: boolean | Competition$CompetitionParticipantArgs<ExtArgs>
    CompetitionRoom?: boolean | Competition$CompetitionRoomArgs<ExtArgs>
    Kisi?: boolean | Competition$KisiArgs<ExtArgs>
    Subscription?: boolean | Competition$SubscriptionArgs<ExtArgs>
    Tryout?: boolean | Competition$TryoutArgs<ExtArgs>
    _count?: boolean | CompetitionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["competition"]>

  export type CompetitionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    Description?: boolean
    Date?: boolean
    Level?: boolean
    Stage?: boolean
    Price?: boolean
    Location?: boolean
    SeasonId?: boolean
    RegionId?: boolean
    SubjectId?: boolean
    CodePackage?: boolean
    PathAnswer?: boolean
    regionId?: boolean
    Region?: boolean | RegionDefaultArgs<ExtArgs>
    Season?: boolean | SeasonDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["competition"]>

  export type CompetitionSelectScalar = {
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    Description?: boolean
    Date?: boolean
    Level?: boolean
    Stage?: boolean
    Price?: boolean
    Location?: boolean
    SeasonId?: boolean
    RegionId?: boolean
    SubjectId?: boolean
    CodePackage?: boolean
    PathAnswer?: boolean
    regionId?: boolean
  }

  export type CompetitionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Achievement?: boolean | Competition$AchievementArgs<ExtArgs>
    Region?: boolean | RegionDefaultArgs<ExtArgs>
    Season?: boolean | SeasonDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
    CompetitionParticipant?: boolean | Competition$CompetitionParticipantArgs<ExtArgs>
    CompetitionRoom?: boolean | Competition$CompetitionRoomArgs<ExtArgs>
    Kisi?: boolean | Competition$KisiArgs<ExtArgs>
    Subscription?: boolean | Competition$SubscriptionArgs<ExtArgs>
    Tryout?: boolean | Competition$TryoutArgs<ExtArgs>
    _count?: boolean | CompetitionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompetitionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Region?: boolean | RegionDefaultArgs<ExtArgs>
    Season?: boolean | SeasonDefaultArgs<ExtArgs>
    Subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }

  export type $CompetitionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Competition"
    objects: {
      Achievement: Prisma.$AchievementPayload<ExtArgs>[]
      Region: Prisma.$RegionPayload<ExtArgs>
      Season: Prisma.$SeasonPayload<ExtArgs>
      Subject: Prisma.$SubjectPayload<ExtArgs>
      CompetitionParticipant: Prisma.$CompetitionParticipantPayload<ExtArgs>[]
      CompetitionRoom: Prisma.$CompetitionRoomPayload<ExtArgs>[]
      Kisi: Prisma.$KisiPayload<ExtArgs>[]
      Subscription: Prisma.$SubscriptionPayload<ExtArgs>[]
      Tryout: Prisma.$TryoutPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: string
      DateCreate: Date
      DateUpdate: Date | null
      Name: string
      Description: string
      Date: number
      Level: number
      Stage: $Enums.StageType
      Price: number
      Location: string
      SeasonId: string
      RegionId: string
      SubjectId: string
      CodePackage: string | null
      PathAnswer: string | null
      regionId: string | null
    }, ExtArgs["result"]["competition"]>
    composites: {}
  }

  type CompetitionGetPayload<S extends boolean | null | undefined | CompetitionDefaultArgs> = $Result.GetResult<Prisma.$CompetitionPayload, S>

  type CompetitionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompetitionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompetitionCountAggregateInputType | true
    }

  export interface CompetitionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Competition'], meta: { name: 'Competition' } }
    /**
     * Find zero or one Competition that matches the filter.
     * @param {CompetitionFindUniqueArgs} args - Arguments to find a Competition
     * @example
     * // Get one Competition
     * const competition = await prisma.competition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompetitionFindUniqueArgs>(args: SelectSubset<T, CompetitionFindUniqueArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Competition that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompetitionFindUniqueOrThrowArgs} args - Arguments to find a Competition
     * @example
     * // Get one Competition
     * const competition = await prisma.competition.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompetitionFindUniqueOrThrowArgs>(args: SelectSubset<T, CompetitionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Competition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionFindFirstArgs} args - Arguments to find a Competition
     * @example
     * // Get one Competition
     * const competition = await prisma.competition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompetitionFindFirstArgs>(args?: SelectSubset<T, CompetitionFindFirstArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Competition that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionFindFirstOrThrowArgs} args - Arguments to find a Competition
     * @example
     * // Get one Competition
     * const competition = await prisma.competition.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompetitionFindFirstOrThrowArgs>(args?: SelectSubset<T, CompetitionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Competitions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Competitions
     * const competitions = await prisma.competition.findMany()
     * 
     * // Get first 10 Competitions
     * const competitions = await prisma.competition.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const competitionWithIdOnly = await prisma.competition.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends CompetitionFindManyArgs>(args?: SelectSubset<T, CompetitionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Competition.
     * @param {CompetitionCreateArgs} args - Arguments to create a Competition.
     * @example
     * // Create one Competition
     * const Competition = await prisma.competition.create({
     *   data: {
     *     // ... data to create a Competition
     *   }
     * })
     * 
     */
    create<T extends CompetitionCreateArgs>(args: SelectSubset<T, CompetitionCreateArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Competitions.
     * @param {CompetitionCreateManyArgs} args - Arguments to create many Competitions.
     * @example
     * // Create many Competitions
     * const competition = await prisma.competition.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompetitionCreateManyArgs>(args?: SelectSubset<T, CompetitionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Competitions and returns the data saved in the database.
     * @param {CompetitionCreateManyAndReturnArgs} args - Arguments to create many Competitions.
     * @example
     * // Create many Competitions
     * const competition = await prisma.competition.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Competitions and only return the `Id`
     * const competitionWithIdOnly = await prisma.competition.createManyAndReturn({ 
     *   select: { Id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompetitionCreateManyAndReturnArgs>(args?: SelectSubset<T, CompetitionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Competition.
     * @param {CompetitionDeleteArgs} args - Arguments to delete one Competition.
     * @example
     * // Delete one Competition
     * const Competition = await prisma.competition.delete({
     *   where: {
     *     // ... filter to delete one Competition
     *   }
     * })
     * 
     */
    delete<T extends CompetitionDeleteArgs>(args: SelectSubset<T, CompetitionDeleteArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Competition.
     * @param {CompetitionUpdateArgs} args - Arguments to update one Competition.
     * @example
     * // Update one Competition
     * const competition = await prisma.competition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompetitionUpdateArgs>(args: SelectSubset<T, CompetitionUpdateArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Competitions.
     * @param {CompetitionDeleteManyArgs} args - Arguments to filter Competitions to delete.
     * @example
     * // Delete a few Competitions
     * const { count } = await prisma.competition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompetitionDeleteManyArgs>(args?: SelectSubset<T, CompetitionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Competitions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Competitions
     * const competition = await prisma.competition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompetitionUpdateManyArgs>(args: SelectSubset<T, CompetitionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Competition.
     * @param {CompetitionUpsertArgs} args - Arguments to update or create a Competition.
     * @example
     * // Update or create a Competition
     * const competition = await prisma.competition.upsert({
     *   create: {
     *     // ... data to create a Competition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Competition we want to update
     *   }
     * })
     */
    upsert<T extends CompetitionUpsertArgs>(args: SelectSubset<T, CompetitionUpsertArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Competitions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionCountArgs} args - Arguments to filter Competitions to count.
     * @example
     * // Count the number of Competitions
     * const count = await prisma.competition.count({
     *   where: {
     *     // ... the filter for the Competitions we want to count
     *   }
     * })
    **/
    count<T extends CompetitionCountArgs>(
      args?: Subset<T, CompetitionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompetitionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Competition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompetitionAggregateArgs>(args: Subset<T, CompetitionAggregateArgs>): Prisma.PrismaPromise<GetCompetitionAggregateType<T>>

    /**
     * Group by Competition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompetitionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompetitionGroupByArgs['orderBy'] }
        : { orderBy?: CompetitionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompetitionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompetitionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Competition model
   */
  readonly fields: CompetitionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Competition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompetitionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Achievement<T extends Competition$AchievementArgs<ExtArgs> = {}>(args?: Subset<T, Competition$AchievementArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findMany"> | Null>
    Region<T extends RegionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RegionDefaultArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Season<T extends SeasonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SeasonDefaultArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    CompetitionParticipant<T extends Competition$CompetitionParticipantArgs<ExtArgs> = {}>(args?: Subset<T, Competition$CompetitionParticipantArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    CompetitionRoom<T extends Competition$CompetitionRoomArgs<ExtArgs> = {}>(args?: Subset<T, Competition$CompetitionRoomArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionRoomPayload<ExtArgs>, T, "findMany"> | Null>
    Kisi<T extends Competition$KisiArgs<ExtArgs> = {}>(args?: Subset<T, Competition$KisiArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KisiPayload<ExtArgs>, T, "findMany"> | Null>
    Subscription<T extends Competition$SubscriptionArgs<ExtArgs> = {}>(args?: Subset<T, Competition$SubscriptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany"> | Null>
    Tryout<T extends Competition$TryoutArgs<ExtArgs> = {}>(args?: Subset<T, Competition$TryoutArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TryoutPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Competition model
   */ 
  interface CompetitionFieldRefs {
    readonly Id: FieldRef<"Competition", 'String'>
    readonly DateCreate: FieldRef<"Competition", 'DateTime'>
    readonly DateUpdate: FieldRef<"Competition", 'DateTime'>
    readonly Name: FieldRef<"Competition", 'String'>
    readonly Description: FieldRef<"Competition", 'String'>
    readonly Date: FieldRef<"Competition", 'Int'>
    readonly Level: FieldRef<"Competition", 'Int'>
    readonly Stage: FieldRef<"Competition", 'StageType'>
    readonly Price: FieldRef<"Competition", 'Int'>
    readonly Location: FieldRef<"Competition", 'String'>
    readonly SeasonId: FieldRef<"Competition", 'String'>
    readonly RegionId: FieldRef<"Competition", 'String'>
    readonly SubjectId: FieldRef<"Competition", 'String'>
    readonly CodePackage: FieldRef<"Competition", 'String'>
    readonly PathAnswer: FieldRef<"Competition", 'String'>
    readonly regionId: FieldRef<"Competition", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Competition findUnique
   */
  export type CompetitionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    /**
     * Filter, which Competition to fetch.
     */
    where: CompetitionWhereUniqueInput
  }

  /**
   * Competition findUniqueOrThrow
   */
  export type CompetitionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    /**
     * Filter, which Competition to fetch.
     */
    where: CompetitionWhereUniqueInput
  }

  /**
   * Competition findFirst
   */
  export type CompetitionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    /**
     * Filter, which Competition to fetch.
     */
    where?: CompetitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competitions to fetch.
     */
    orderBy?: CompetitionOrderByWithRelationInput | CompetitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Competitions.
     */
    cursor?: CompetitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Competitions.
     */
    distinct?: CompetitionScalarFieldEnum | CompetitionScalarFieldEnum[]
  }

  /**
   * Competition findFirstOrThrow
   */
  export type CompetitionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    /**
     * Filter, which Competition to fetch.
     */
    where?: CompetitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competitions to fetch.
     */
    orderBy?: CompetitionOrderByWithRelationInput | CompetitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Competitions.
     */
    cursor?: CompetitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Competitions.
     */
    distinct?: CompetitionScalarFieldEnum | CompetitionScalarFieldEnum[]
  }

  /**
   * Competition findMany
   */
  export type CompetitionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    /**
     * Filter, which Competitions to fetch.
     */
    where?: CompetitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competitions to fetch.
     */
    orderBy?: CompetitionOrderByWithRelationInput | CompetitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Competitions.
     */
    cursor?: CompetitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competitions.
     */
    skip?: number
    distinct?: CompetitionScalarFieldEnum | CompetitionScalarFieldEnum[]
  }

  /**
   * Competition create
   */
  export type CompetitionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    /**
     * The data needed to create a Competition.
     */
    data: XOR<CompetitionCreateInput, CompetitionUncheckedCreateInput>
  }

  /**
   * Competition createMany
   */
  export type CompetitionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Competitions.
     */
    data: CompetitionCreateManyInput | CompetitionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Competition createManyAndReturn
   */
  export type CompetitionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Competitions.
     */
    data: CompetitionCreateManyInput | CompetitionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Competition update
   */
  export type CompetitionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    /**
     * The data needed to update a Competition.
     */
    data: XOR<CompetitionUpdateInput, CompetitionUncheckedUpdateInput>
    /**
     * Choose, which Competition to update.
     */
    where: CompetitionWhereUniqueInput
  }

  /**
   * Competition updateMany
   */
  export type CompetitionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Competitions.
     */
    data: XOR<CompetitionUpdateManyMutationInput, CompetitionUncheckedUpdateManyInput>
    /**
     * Filter which Competitions to update
     */
    where?: CompetitionWhereInput
  }

  /**
   * Competition upsert
   */
  export type CompetitionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    /**
     * The filter to search for the Competition to update in case it exists.
     */
    where: CompetitionWhereUniqueInput
    /**
     * In case the Competition found by the `where` argument doesn't exist, create a new Competition with this data.
     */
    create: XOR<CompetitionCreateInput, CompetitionUncheckedCreateInput>
    /**
     * In case the Competition was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompetitionUpdateInput, CompetitionUncheckedUpdateInput>
  }

  /**
   * Competition delete
   */
  export type CompetitionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    /**
     * Filter which Competition to delete.
     */
    where: CompetitionWhereUniqueInput
  }

  /**
   * Competition deleteMany
   */
  export type CompetitionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Competitions to delete
     */
    where?: CompetitionWhereInput
  }

  /**
   * Competition.Achievement
   */
  export type Competition$AchievementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    where?: AchievementWhereInput
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    cursor?: AchievementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Competition.CompetitionParticipant
   */
  export type Competition$CompetitionParticipantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionParticipant
     */
    select?: CompetitionParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionParticipantInclude<ExtArgs> | null
    where?: CompetitionParticipantWhereInput
    orderBy?: CompetitionParticipantOrderByWithRelationInput | CompetitionParticipantOrderByWithRelationInput[]
    cursor?: CompetitionParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompetitionParticipantScalarFieldEnum | CompetitionParticipantScalarFieldEnum[]
  }

  /**
   * Competition.CompetitionRoom
   */
  export type Competition$CompetitionRoomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionRoom
     */
    select?: CompetitionRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionRoomInclude<ExtArgs> | null
    where?: CompetitionRoomWhereInput
    orderBy?: CompetitionRoomOrderByWithRelationInput | CompetitionRoomOrderByWithRelationInput[]
    cursor?: CompetitionRoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompetitionRoomScalarFieldEnum | CompetitionRoomScalarFieldEnum[]
  }

  /**
   * Competition.Kisi
   */
  export type Competition$KisiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kisi
     */
    select?: KisiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KisiInclude<ExtArgs> | null
    where?: KisiWhereInput
    orderBy?: KisiOrderByWithRelationInput | KisiOrderByWithRelationInput[]
    cursor?: KisiWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KisiScalarFieldEnum | KisiScalarFieldEnum[]
  }

  /**
   * Competition.Subscription
   */
  export type Competition$SubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Competition.Tryout
   */
  export type Competition$TryoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tryout
     */
    select?: TryoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryoutInclude<ExtArgs> | null
    where?: TryoutWhereInput
    orderBy?: TryoutOrderByWithRelationInput | TryoutOrderByWithRelationInput[]
    cursor?: TryoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TryoutScalarFieldEnum | TryoutScalarFieldEnum[]
  }

  /**
   * Competition without action
   */
  export type CompetitionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
  }


  /**
   * Model Subscription
   */

  export type AggregateSubscription = {
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  export type SubscriptionMinAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    StartDate: Date | null
    EndDate: Date | null
    Status: boolean | null
    StudentId: string | null
    CompetitionId: string | null
  }

  export type SubscriptionMaxAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    StartDate: Date | null
    EndDate: Date | null
    Status: boolean | null
    StudentId: string | null
    CompetitionId: string | null
  }

  export type SubscriptionCountAggregateOutputType = {
    Id: number
    DateCreate: number
    DateUpdate: number
    StartDate: number
    EndDate: number
    Status: number
    StudentId: number
    CompetitionId: number
    _all: number
  }


  export type SubscriptionMinAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    StartDate?: true
    EndDate?: true
    Status?: true
    StudentId?: true
    CompetitionId?: true
  }

  export type SubscriptionMaxAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    StartDate?: true
    EndDate?: true
    Status?: true
    StudentId?: true
    CompetitionId?: true
  }

  export type SubscriptionCountAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    StartDate?: true
    EndDate?: true
    Status?: true
    StudentId?: true
    CompetitionId?: true
    _all?: true
  }

  export type SubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscription to aggregate.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subscriptions
    **/
    _count?: true | SubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionMaxAggregateInputType
  }

  export type GetSubscriptionAggregateType<T extends SubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscription[P]>
      : GetScalarType<T[P], AggregateSubscription[P]>
  }




  export type SubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithAggregationInput | SubscriptionOrderByWithAggregationInput[]
    by: SubscriptionScalarFieldEnum[] | SubscriptionScalarFieldEnum
    having?: SubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionCountAggregateInputType | true
    _min?: SubscriptionMinAggregateInputType
    _max?: SubscriptionMaxAggregateInputType
  }

  export type SubscriptionGroupByOutputType = {
    Id: string
    DateCreate: Date
    DateUpdate: Date | null
    StartDate: Date
    EndDate: Date
    Status: boolean
    StudentId: string
    CompetitionId: string | null
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  type GetSubscriptionGroupByPayload<T extends SubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    StartDate?: boolean
    EndDate?: boolean
    Status?: boolean
    StudentId?: boolean
    CompetitionId?: boolean
    Competition?: boolean | Subscription$CompetitionArgs<ExtArgs>
    Student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    StartDate?: boolean
    EndDate?: boolean
    Status?: boolean
    StudentId?: boolean
    CompetitionId?: boolean
    Competition?: boolean | Subscription$CompetitionArgs<ExtArgs>
    Student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectScalar = {
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    StartDate?: boolean
    EndDate?: boolean
    Status?: boolean
    StudentId?: boolean
    CompetitionId?: boolean
  }

  export type SubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Competition?: boolean | Subscription$CompetitionArgs<ExtArgs>
    Student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type SubscriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Competition?: boolean | Subscription$CompetitionArgs<ExtArgs>
    Student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $SubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subscription"
    objects: {
      Competition: Prisma.$CompetitionPayload<ExtArgs> | null
      Student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: string
      DateCreate: Date
      DateUpdate: Date | null
      StartDate: Date
      EndDate: Date
      Status: boolean
      StudentId: string
      CompetitionId: string | null
    }, ExtArgs["result"]["subscription"]>
    composites: {}
  }

  type SubscriptionGetPayload<S extends boolean | null | undefined | SubscriptionDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPayload, S>

  type SubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubscriptionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubscriptionCountAggregateInputType | true
    }

  export interface SubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subscription'], meta: { name: 'Subscription' } }
    /**
     * Find zero or one Subscription that matches the filter.
     * @param {SubscriptionFindUniqueArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubscriptionFindUniqueArgs>(args: SelectSubset<T, SubscriptionFindUniqueArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Subscription that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SubscriptionFindUniqueOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Subscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubscriptionFindFirstArgs>(args?: SelectSubset<T, SubscriptionFindFirstArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Subscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Subscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subscriptions
     * const subscriptions = await prisma.subscription.findMany()
     * 
     * // Get first 10 Subscriptions
     * const subscriptions = await prisma.subscription.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const subscriptionWithIdOnly = await prisma.subscription.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends SubscriptionFindManyArgs>(args?: SelectSubset<T, SubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Subscription.
     * @param {SubscriptionCreateArgs} args - Arguments to create a Subscription.
     * @example
     * // Create one Subscription
     * const Subscription = await prisma.subscription.create({
     *   data: {
     *     // ... data to create a Subscription
     *   }
     * })
     * 
     */
    create<T extends SubscriptionCreateArgs>(args: SelectSubset<T, SubscriptionCreateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Subscriptions.
     * @param {SubscriptionCreateManyArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubscriptionCreateManyArgs>(args?: SelectSubset<T, SubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subscriptions and returns the data saved in the database.
     * @param {SubscriptionCreateManyAndReturnArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subscriptions and only return the `Id`
     * const subscriptionWithIdOnly = await prisma.subscription.createManyAndReturn({ 
     *   select: { Id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Subscription.
     * @param {SubscriptionDeleteArgs} args - Arguments to delete one Subscription.
     * @example
     * // Delete one Subscription
     * const Subscription = await prisma.subscription.delete({
     *   where: {
     *     // ... filter to delete one Subscription
     *   }
     * })
     * 
     */
    delete<T extends SubscriptionDeleteArgs>(args: SelectSubset<T, SubscriptionDeleteArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Subscription.
     * @param {SubscriptionUpdateArgs} args - Arguments to update one Subscription.
     * @example
     * // Update one Subscription
     * const subscription = await prisma.subscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubscriptionUpdateArgs>(args: SelectSubset<T, SubscriptionUpdateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Subscriptions.
     * @param {SubscriptionDeleteManyArgs} args - Arguments to filter Subscriptions to delete.
     * @example
     * // Delete a few Subscriptions
     * const { count } = await prisma.subscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubscriptionDeleteManyArgs>(args?: SelectSubset<T, SubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubscriptionUpdateManyArgs>(args: SelectSubset<T, SubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subscription.
     * @param {SubscriptionUpsertArgs} args - Arguments to update or create a Subscription.
     * @example
     * // Update or create a Subscription
     * const subscription = await prisma.subscription.upsert({
     *   create: {
     *     // ... data to create a Subscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subscription we want to update
     *   }
     * })
     */
    upsert<T extends SubscriptionUpsertArgs>(args: SelectSubset<T, SubscriptionUpsertArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionCountArgs} args - Arguments to filter Subscriptions to count.
     * @example
     * // Count the number of Subscriptions
     * const count = await prisma.subscription.count({
     *   where: {
     *     // ... the filter for the Subscriptions we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionCountArgs>(
      args?: Subset<T, SubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionAggregateArgs>(args: Subset<T, SubscriptionAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionAggregateType<T>>

    /**
     * Group by Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subscription model
   */
  readonly fields: SubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Competition<T extends Subscription$CompetitionArgs<ExtArgs> = {}>(args?: Subset<T, Subscription$CompetitionArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    Student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subscription model
   */ 
  interface SubscriptionFieldRefs {
    readonly Id: FieldRef<"Subscription", 'String'>
    readonly DateCreate: FieldRef<"Subscription", 'DateTime'>
    readonly DateUpdate: FieldRef<"Subscription", 'DateTime'>
    readonly StartDate: FieldRef<"Subscription", 'DateTime'>
    readonly EndDate: FieldRef<"Subscription", 'DateTime'>
    readonly Status: FieldRef<"Subscription", 'Boolean'>
    readonly StudentId: FieldRef<"Subscription", 'String'>
    readonly CompetitionId: FieldRef<"Subscription", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Subscription findUnique
   */
  export type SubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findUniqueOrThrow
   */
  export type SubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findFirst
   */
  export type SubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findFirstOrThrow
   */
  export type SubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findMany
   */
  export type SubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscriptions to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription create
   */
  export type SubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a Subscription.
     */
    data: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
  }

  /**
   * Subscription createMany
   */
  export type SubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subscription createManyAndReturn
   */
  export type SubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subscription update
   */
  export type SubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a Subscription.
     */
    data: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
    /**
     * Choose, which Subscription to update.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription updateMany
   */
  export type SubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
  }

  /**
   * Subscription upsert
   */
  export type SubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the Subscription to update in case it exists.
     */
    where: SubscriptionWhereUniqueInput
    /**
     * In case the Subscription found by the `where` argument doesn't exist, create a new Subscription with this data.
     */
    create: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
    /**
     * In case the Subscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
  }

  /**
   * Subscription delete
   */
  export type SubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter which Subscription to delete.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription deleteMany
   */
  export type SubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscriptions to delete
     */
    where?: SubscriptionWhereInput
  }

  /**
   * Subscription.Competition
   */
  export type Subscription$CompetitionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    where?: CompetitionWhereInput
  }

  /**
   * Subscription without action
   */
  export type SubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
  }


  /**
   * Model Region
   */

  export type AggregateRegion = {
    _count: RegionCountAggregateOutputType | null
    _avg: RegionAvgAggregateOutputType | null
    _sum: RegionSumAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  export type RegionAvgAggregateOutputType = {
    Region: number | null
  }

  export type RegionSumAggregateOutputType = {
    Region: number | null
  }

  export type RegionMinAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Region: number | null
    Name: string | null
    RegionDetail: string | null
  }

  export type RegionMaxAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Region: number | null
    Name: string | null
    RegionDetail: string | null
  }

  export type RegionCountAggregateOutputType = {
    Id: number
    DateCreate: number
    DateUpdate: number
    Region: number
    Name: number
    RegionDetail: number
    _all: number
  }


  export type RegionAvgAggregateInputType = {
    Region?: true
  }

  export type RegionSumAggregateInputType = {
    Region?: true
  }

  export type RegionMinAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Region?: true
    Name?: true
    RegionDetail?: true
  }

  export type RegionMaxAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Region?: true
    Name?: true
    RegionDetail?: true
  }

  export type RegionCountAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Region?: true
    Name?: true
    RegionDetail?: true
    _all?: true
  }

  export type RegionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Region to aggregate.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Regions
    **/
    _count?: true | RegionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RegionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RegionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegionMaxAggregateInputType
  }

  export type GetRegionAggregateType<T extends RegionAggregateArgs> = {
        [P in keyof T & keyof AggregateRegion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegion[P]>
      : GetScalarType<T[P], AggregateRegion[P]>
  }




  export type RegionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegionWhereInput
    orderBy?: RegionOrderByWithAggregationInput | RegionOrderByWithAggregationInput[]
    by: RegionScalarFieldEnum[] | RegionScalarFieldEnum
    having?: RegionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegionCountAggregateInputType | true
    _avg?: RegionAvgAggregateInputType
    _sum?: RegionSumAggregateInputType
    _min?: RegionMinAggregateInputType
    _max?: RegionMaxAggregateInputType
  }

  export type RegionGroupByOutputType = {
    Id: string
    DateCreate: Date
    DateUpdate: Date | null
    Region: number
    Name: string
    RegionDetail: string
    _count: RegionCountAggregateOutputType | null
    _avg: RegionAvgAggregateOutputType | null
    _sum: RegionSumAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  type GetRegionGroupByPayload<T extends RegionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegionGroupByOutputType[P]>
            : GetScalarType<T[P], RegionGroupByOutputType[P]>
        }
      >
    >


  export type RegionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Region?: boolean
    Name?: boolean
    RegionDetail?: boolean
    Competition?: boolean | Region$CompetitionArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["region"]>

  export type RegionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Region?: boolean
    Name?: boolean
    RegionDetail?: boolean
  }, ExtArgs["result"]["region"]>

  export type RegionSelectScalar = {
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Region?: boolean
    Name?: boolean
    RegionDetail?: boolean
  }

  export type RegionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Competition?: boolean | Region$CompetitionArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RegionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RegionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Region"
    objects: {
      Competition: Prisma.$CompetitionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: string
      DateCreate: Date
      DateUpdate: Date | null
      Region: number
      Name: string
      RegionDetail: string
    }, ExtArgs["result"]["region"]>
    composites: {}
  }

  type RegionGetPayload<S extends boolean | null | undefined | RegionDefaultArgs> = $Result.GetResult<Prisma.$RegionPayload, S>

  type RegionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RegionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RegionCountAggregateInputType | true
    }

  export interface RegionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Region'], meta: { name: 'Region' } }
    /**
     * Find zero or one Region that matches the filter.
     * @param {RegionFindUniqueArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegionFindUniqueArgs>(args: SelectSubset<T, RegionFindUniqueArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Region that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RegionFindUniqueOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegionFindUniqueOrThrowArgs>(args: SelectSubset<T, RegionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Region that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegionFindFirstArgs>(args?: SelectSubset<T, RegionFindFirstArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Region that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegionFindFirstOrThrowArgs>(args?: SelectSubset<T, RegionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Regions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Regions
     * const regions = await prisma.region.findMany()
     * 
     * // Get first 10 Regions
     * const regions = await prisma.region.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const regionWithIdOnly = await prisma.region.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends RegionFindManyArgs>(args?: SelectSubset<T, RegionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Region.
     * @param {RegionCreateArgs} args - Arguments to create a Region.
     * @example
     * // Create one Region
     * const Region = await prisma.region.create({
     *   data: {
     *     // ... data to create a Region
     *   }
     * })
     * 
     */
    create<T extends RegionCreateArgs>(args: SelectSubset<T, RegionCreateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Regions.
     * @param {RegionCreateManyArgs} args - Arguments to create many Regions.
     * @example
     * // Create many Regions
     * const region = await prisma.region.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegionCreateManyArgs>(args?: SelectSubset<T, RegionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Regions and returns the data saved in the database.
     * @param {RegionCreateManyAndReturnArgs} args - Arguments to create many Regions.
     * @example
     * // Create many Regions
     * const region = await prisma.region.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Regions and only return the `Id`
     * const regionWithIdOnly = await prisma.region.createManyAndReturn({ 
     *   select: { Id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegionCreateManyAndReturnArgs>(args?: SelectSubset<T, RegionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Region.
     * @param {RegionDeleteArgs} args - Arguments to delete one Region.
     * @example
     * // Delete one Region
     * const Region = await prisma.region.delete({
     *   where: {
     *     // ... filter to delete one Region
     *   }
     * })
     * 
     */
    delete<T extends RegionDeleteArgs>(args: SelectSubset<T, RegionDeleteArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Region.
     * @param {RegionUpdateArgs} args - Arguments to update one Region.
     * @example
     * // Update one Region
     * const region = await prisma.region.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegionUpdateArgs>(args: SelectSubset<T, RegionUpdateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Regions.
     * @param {RegionDeleteManyArgs} args - Arguments to filter Regions to delete.
     * @example
     * // Delete a few Regions
     * const { count } = await prisma.region.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegionDeleteManyArgs>(args?: SelectSubset<T, RegionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Regions
     * const region = await prisma.region.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegionUpdateManyArgs>(args: SelectSubset<T, RegionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Region.
     * @param {RegionUpsertArgs} args - Arguments to update or create a Region.
     * @example
     * // Update or create a Region
     * const region = await prisma.region.upsert({
     *   create: {
     *     // ... data to create a Region
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Region we want to update
     *   }
     * })
     */
    upsert<T extends RegionUpsertArgs>(args: SelectSubset<T, RegionUpsertArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionCountArgs} args - Arguments to filter Regions to count.
     * @example
     * // Count the number of Regions
     * const count = await prisma.region.count({
     *   where: {
     *     // ... the filter for the Regions we want to count
     *   }
     * })
    **/
    count<T extends RegionCountArgs>(
      args?: Subset<T, RegionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegionAggregateArgs>(args: Subset<T, RegionAggregateArgs>): Prisma.PrismaPromise<GetRegionAggregateType<T>>

    /**
     * Group by Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegionGroupByArgs['orderBy'] }
        : { orderBy?: RegionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Region model
   */
  readonly fields: RegionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Region.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Competition<T extends Region$CompetitionArgs<ExtArgs> = {}>(args?: Subset<T, Region$CompetitionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Region model
   */ 
  interface RegionFieldRefs {
    readonly Id: FieldRef<"Region", 'String'>
    readonly DateCreate: FieldRef<"Region", 'DateTime'>
    readonly DateUpdate: FieldRef<"Region", 'DateTime'>
    readonly Region: FieldRef<"Region", 'Int'>
    readonly Name: FieldRef<"Region", 'String'>
    readonly RegionDetail: FieldRef<"Region", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Region findUnique
   */
  export type RegionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findUniqueOrThrow
   */
  export type RegionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findFirst
   */
  export type RegionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findFirstOrThrow
   */
  export type RegionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findMany
   */
  export type RegionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Regions to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region create
   */
  export type RegionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to create a Region.
     */
    data: XOR<RegionCreateInput, RegionUncheckedCreateInput>
  }

  /**
   * Region createMany
   */
  export type RegionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Region createManyAndReturn
   */
  export type RegionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Region update
   */
  export type RegionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to update a Region.
     */
    data: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
    /**
     * Choose, which Region to update.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region updateMany
   */
  export type RegionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Regions.
     */
    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
    /**
     * Filter which Regions to update
     */
    where?: RegionWhereInput
  }

  /**
   * Region upsert
   */
  export type RegionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The filter to search for the Region to update in case it exists.
     */
    where: RegionWhereUniqueInput
    /**
     * In case the Region found by the `where` argument doesn't exist, create a new Region with this data.
     */
    create: XOR<RegionCreateInput, RegionUncheckedCreateInput>
    /**
     * In case the Region was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
  }

  /**
   * Region delete
   */
  export type RegionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter which Region to delete.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region deleteMany
   */
  export type RegionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Regions to delete
     */
    where?: RegionWhereInput
  }

  /**
   * Region.Competition
   */
  export type Region$CompetitionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    where?: CompetitionWhereInput
    orderBy?: CompetitionOrderByWithRelationInput | CompetitionOrderByWithRelationInput[]
    cursor?: CompetitionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompetitionScalarFieldEnum | CompetitionScalarFieldEnum[]
  }

  /**
   * Region without action
   */
  export type RegionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
  }


  /**
   * Model Supervisor
   */

  export type AggregateSupervisor = {
    _count: SupervisorCountAggregateOutputType | null
    _avg: SupervisorAvgAggregateOutputType | null
    _sum: SupervisorSumAggregateOutputType | null
    _min: SupervisorMinAggregateOutputType | null
    _max: SupervisorMaxAggregateOutputType | null
  }

  export type SupervisorAvgAggregateOutputType = {
    Birthdate: number | null
  }

  export type SupervisorSumAggregateOutputType = {
    Birthdate: number | null
  }

  export type SupervisorMinAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Name: string | null
    Birthdate: number | null
    PhoneNumber: string | null
  }

  export type SupervisorMaxAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Name: string | null
    Birthdate: number | null
    PhoneNumber: string | null
  }

  export type SupervisorCountAggregateOutputType = {
    Id: number
    DateCreate: number
    DateUpdate: number
    Name: number
    Birthdate: number
    PhoneNumber: number
    _all: number
  }


  export type SupervisorAvgAggregateInputType = {
    Birthdate?: true
  }

  export type SupervisorSumAggregateInputType = {
    Birthdate?: true
  }

  export type SupervisorMinAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    Birthdate?: true
    PhoneNumber?: true
  }

  export type SupervisorMaxAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    Birthdate?: true
    PhoneNumber?: true
  }

  export type SupervisorCountAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    Birthdate?: true
    PhoneNumber?: true
    _all?: true
  }

  export type SupervisorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Supervisor to aggregate.
     */
    where?: SupervisorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Supervisors to fetch.
     */
    orderBy?: SupervisorOrderByWithRelationInput | SupervisorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SupervisorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Supervisors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Supervisors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Supervisors
    **/
    _count?: true | SupervisorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SupervisorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SupervisorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SupervisorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SupervisorMaxAggregateInputType
  }

  export type GetSupervisorAggregateType<T extends SupervisorAggregateArgs> = {
        [P in keyof T & keyof AggregateSupervisor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSupervisor[P]>
      : GetScalarType<T[P], AggregateSupervisor[P]>
  }




  export type SupervisorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupervisorWhereInput
    orderBy?: SupervisorOrderByWithAggregationInput | SupervisorOrderByWithAggregationInput[]
    by: SupervisorScalarFieldEnum[] | SupervisorScalarFieldEnum
    having?: SupervisorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SupervisorCountAggregateInputType | true
    _avg?: SupervisorAvgAggregateInputType
    _sum?: SupervisorSumAggregateInputType
    _min?: SupervisorMinAggregateInputType
    _max?: SupervisorMaxAggregateInputType
  }

  export type SupervisorGroupByOutputType = {
    Id: string
    DateCreate: Date
    DateUpdate: Date | null
    Name: string
    Birthdate: number
    PhoneNumber: string
    _count: SupervisorCountAggregateOutputType | null
    _avg: SupervisorAvgAggregateOutputType | null
    _sum: SupervisorSumAggregateOutputType | null
    _min: SupervisorMinAggregateOutputType | null
    _max: SupervisorMaxAggregateOutputType | null
  }

  type GetSupervisorGroupByPayload<T extends SupervisorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SupervisorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SupervisorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SupervisorGroupByOutputType[P]>
            : GetScalarType<T[P], SupervisorGroupByOutputType[P]>
        }
      >
    >


  export type SupervisorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    Birthdate?: boolean
    PhoneNumber?: boolean
    CompetitionRoom?: boolean | Supervisor$CompetitionRoomArgs<ExtArgs>
    _count?: boolean | SupervisorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["supervisor"]>

  export type SupervisorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    Birthdate?: boolean
    PhoneNumber?: boolean
  }, ExtArgs["result"]["supervisor"]>

  export type SupervisorSelectScalar = {
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    Birthdate?: boolean
    PhoneNumber?: boolean
  }

  export type SupervisorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CompetitionRoom?: boolean | Supervisor$CompetitionRoomArgs<ExtArgs>
    _count?: boolean | SupervisorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SupervisorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SupervisorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Supervisor"
    objects: {
      CompetitionRoom: Prisma.$CompetitionRoomPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: string
      DateCreate: Date
      DateUpdate: Date | null
      Name: string
      Birthdate: number
      PhoneNumber: string
    }, ExtArgs["result"]["supervisor"]>
    composites: {}
  }

  type SupervisorGetPayload<S extends boolean | null | undefined | SupervisorDefaultArgs> = $Result.GetResult<Prisma.$SupervisorPayload, S>

  type SupervisorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SupervisorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SupervisorCountAggregateInputType | true
    }

  export interface SupervisorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Supervisor'], meta: { name: 'Supervisor' } }
    /**
     * Find zero or one Supervisor that matches the filter.
     * @param {SupervisorFindUniqueArgs} args - Arguments to find a Supervisor
     * @example
     * // Get one Supervisor
     * const supervisor = await prisma.supervisor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SupervisorFindUniqueArgs>(args: SelectSubset<T, SupervisorFindUniqueArgs<ExtArgs>>): Prisma__SupervisorClient<$Result.GetResult<Prisma.$SupervisorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Supervisor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SupervisorFindUniqueOrThrowArgs} args - Arguments to find a Supervisor
     * @example
     * // Get one Supervisor
     * const supervisor = await prisma.supervisor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SupervisorFindUniqueOrThrowArgs>(args: SelectSubset<T, SupervisorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SupervisorClient<$Result.GetResult<Prisma.$SupervisorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Supervisor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupervisorFindFirstArgs} args - Arguments to find a Supervisor
     * @example
     * // Get one Supervisor
     * const supervisor = await prisma.supervisor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SupervisorFindFirstArgs>(args?: SelectSubset<T, SupervisorFindFirstArgs<ExtArgs>>): Prisma__SupervisorClient<$Result.GetResult<Prisma.$SupervisorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Supervisor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupervisorFindFirstOrThrowArgs} args - Arguments to find a Supervisor
     * @example
     * // Get one Supervisor
     * const supervisor = await prisma.supervisor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SupervisorFindFirstOrThrowArgs>(args?: SelectSubset<T, SupervisorFindFirstOrThrowArgs<ExtArgs>>): Prisma__SupervisorClient<$Result.GetResult<Prisma.$SupervisorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Supervisors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupervisorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Supervisors
     * const supervisors = await prisma.supervisor.findMany()
     * 
     * // Get first 10 Supervisors
     * const supervisors = await prisma.supervisor.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const supervisorWithIdOnly = await prisma.supervisor.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends SupervisorFindManyArgs>(args?: SelectSubset<T, SupervisorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupervisorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Supervisor.
     * @param {SupervisorCreateArgs} args - Arguments to create a Supervisor.
     * @example
     * // Create one Supervisor
     * const Supervisor = await prisma.supervisor.create({
     *   data: {
     *     // ... data to create a Supervisor
     *   }
     * })
     * 
     */
    create<T extends SupervisorCreateArgs>(args: SelectSubset<T, SupervisorCreateArgs<ExtArgs>>): Prisma__SupervisorClient<$Result.GetResult<Prisma.$SupervisorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Supervisors.
     * @param {SupervisorCreateManyArgs} args - Arguments to create many Supervisors.
     * @example
     * // Create many Supervisors
     * const supervisor = await prisma.supervisor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SupervisorCreateManyArgs>(args?: SelectSubset<T, SupervisorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Supervisors and returns the data saved in the database.
     * @param {SupervisorCreateManyAndReturnArgs} args - Arguments to create many Supervisors.
     * @example
     * // Create many Supervisors
     * const supervisor = await prisma.supervisor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Supervisors and only return the `Id`
     * const supervisorWithIdOnly = await prisma.supervisor.createManyAndReturn({ 
     *   select: { Id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SupervisorCreateManyAndReturnArgs>(args?: SelectSubset<T, SupervisorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupervisorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Supervisor.
     * @param {SupervisorDeleteArgs} args - Arguments to delete one Supervisor.
     * @example
     * // Delete one Supervisor
     * const Supervisor = await prisma.supervisor.delete({
     *   where: {
     *     // ... filter to delete one Supervisor
     *   }
     * })
     * 
     */
    delete<T extends SupervisorDeleteArgs>(args: SelectSubset<T, SupervisorDeleteArgs<ExtArgs>>): Prisma__SupervisorClient<$Result.GetResult<Prisma.$SupervisorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Supervisor.
     * @param {SupervisorUpdateArgs} args - Arguments to update one Supervisor.
     * @example
     * // Update one Supervisor
     * const supervisor = await prisma.supervisor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SupervisorUpdateArgs>(args: SelectSubset<T, SupervisorUpdateArgs<ExtArgs>>): Prisma__SupervisorClient<$Result.GetResult<Prisma.$SupervisorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Supervisors.
     * @param {SupervisorDeleteManyArgs} args - Arguments to filter Supervisors to delete.
     * @example
     * // Delete a few Supervisors
     * const { count } = await prisma.supervisor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SupervisorDeleteManyArgs>(args?: SelectSubset<T, SupervisorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Supervisors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupervisorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Supervisors
     * const supervisor = await prisma.supervisor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SupervisorUpdateManyArgs>(args: SelectSubset<T, SupervisorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Supervisor.
     * @param {SupervisorUpsertArgs} args - Arguments to update or create a Supervisor.
     * @example
     * // Update or create a Supervisor
     * const supervisor = await prisma.supervisor.upsert({
     *   create: {
     *     // ... data to create a Supervisor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Supervisor we want to update
     *   }
     * })
     */
    upsert<T extends SupervisorUpsertArgs>(args: SelectSubset<T, SupervisorUpsertArgs<ExtArgs>>): Prisma__SupervisorClient<$Result.GetResult<Prisma.$SupervisorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Supervisors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupervisorCountArgs} args - Arguments to filter Supervisors to count.
     * @example
     * // Count the number of Supervisors
     * const count = await prisma.supervisor.count({
     *   where: {
     *     // ... the filter for the Supervisors we want to count
     *   }
     * })
    **/
    count<T extends SupervisorCountArgs>(
      args?: Subset<T, SupervisorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SupervisorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Supervisor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupervisorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SupervisorAggregateArgs>(args: Subset<T, SupervisorAggregateArgs>): Prisma.PrismaPromise<GetSupervisorAggregateType<T>>

    /**
     * Group by Supervisor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupervisorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SupervisorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SupervisorGroupByArgs['orderBy'] }
        : { orderBy?: SupervisorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SupervisorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSupervisorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Supervisor model
   */
  readonly fields: SupervisorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Supervisor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SupervisorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    CompetitionRoom<T extends Supervisor$CompetitionRoomArgs<ExtArgs> = {}>(args?: Subset<T, Supervisor$CompetitionRoomArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionRoomPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Supervisor model
   */ 
  interface SupervisorFieldRefs {
    readonly Id: FieldRef<"Supervisor", 'String'>
    readonly DateCreate: FieldRef<"Supervisor", 'DateTime'>
    readonly DateUpdate: FieldRef<"Supervisor", 'DateTime'>
    readonly Name: FieldRef<"Supervisor", 'String'>
    readonly Birthdate: FieldRef<"Supervisor", 'Int'>
    readonly PhoneNumber: FieldRef<"Supervisor", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Supervisor findUnique
   */
  export type SupervisorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supervisor
     */
    select?: SupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupervisorInclude<ExtArgs> | null
    /**
     * Filter, which Supervisor to fetch.
     */
    where: SupervisorWhereUniqueInput
  }

  /**
   * Supervisor findUniqueOrThrow
   */
  export type SupervisorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supervisor
     */
    select?: SupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupervisorInclude<ExtArgs> | null
    /**
     * Filter, which Supervisor to fetch.
     */
    where: SupervisorWhereUniqueInput
  }

  /**
   * Supervisor findFirst
   */
  export type SupervisorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supervisor
     */
    select?: SupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupervisorInclude<ExtArgs> | null
    /**
     * Filter, which Supervisor to fetch.
     */
    where?: SupervisorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Supervisors to fetch.
     */
    orderBy?: SupervisorOrderByWithRelationInput | SupervisorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Supervisors.
     */
    cursor?: SupervisorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Supervisors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Supervisors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Supervisors.
     */
    distinct?: SupervisorScalarFieldEnum | SupervisorScalarFieldEnum[]
  }

  /**
   * Supervisor findFirstOrThrow
   */
  export type SupervisorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supervisor
     */
    select?: SupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupervisorInclude<ExtArgs> | null
    /**
     * Filter, which Supervisor to fetch.
     */
    where?: SupervisorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Supervisors to fetch.
     */
    orderBy?: SupervisorOrderByWithRelationInput | SupervisorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Supervisors.
     */
    cursor?: SupervisorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Supervisors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Supervisors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Supervisors.
     */
    distinct?: SupervisorScalarFieldEnum | SupervisorScalarFieldEnum[]
  }

  /**
   * Supervisor findMany
   */
  export type SupervisorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supervisor
     */
    select?: SupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupervisorInclude<ExtArgs> | null
    /**
     * Filter, which Supervisors to fetch.
     */
    where?: SupervisorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Supervisors to fetch.
     */
    orderBy?: SupervisorOrderByWithRelationInput | SupervisorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Supervisors.
     */
    cursor?: SupervisorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Supervisors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Supervisors.
     */
    skip?: number
    distinct?: SupervisorScalarFieldEnum | SupervisorScalarFieldEnum[]
  }

  /**
   * Supervisor create
   */
  export type SupervisorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supervisor
     */
    select?: SupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupervisorInclude<ExtArgs> | null
    /**
     * The data needed to create a Supervisor.
     */
    data: XOR<SupervisorCreateInput, SupervisorUncheckedCreateInput>
  }

  /**
   * Supervisor createMany
   */
  export type SupervisorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Supervisors.
     */
    data: SupervisorCreateManyInput | SupervisorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Supervisor createManyAndReturn
   */
  export type SupervisorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supervisor
     */
    select?: SupervisorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Supervisors.
     */
    data: SupervisorCreateManyInput | SupervisorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Supervisor update
   */
  export type SupervisorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supervisor
     */
    select?: SupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupervisorInclude<ExtArgs> | null
    /**
     * The data needed to update a Supervisor.
     */
    data: XOR<SupervisorUpdateInput, SupervisorUncheckedUpdateInput>
    /**
     * Choose, which Supervisor to update.
     */
    where: SupervisorWhereUniqueInput
  }

  /**
   * Supervisor updateMany
   */
  export type SupervisorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Supervisors.
     */
    data: XOR<SupervisorUpdateManyMutationInput, SupervisorUncheckedUpdateManyInput>
    /**
     * Filter which Supervisors to update
     */
    where?: SupervisorWhereInput
  }

  /**
   * Supervisor upsert
   */
  export type SupervisorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supervisor
     */
    select?: SupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupervisorInclude<ExtArgs> | null
    /**
     * The filter to search for the Supervisor to update in case it exists.
     */
    where: SupervisorWhereUniqueInput
    /**
     * In case the Supervisor found by the `where` argument doesn't exist, create a new Supervisor with this data.
     */
    create: XOR<SupervisorCreateInput, SupervisorUncheckedCreateInput>
    /**
     * In case the Supervisor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SupervisorUpdateInput, SupervisorUncheckedUpdateInput>
  }

  /**
   * Supervisor delete
   */
  export type SupervisorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supervisor
     */
    select?: SupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupervisorInclude<ExtArgs> | null
    /**
     * Filter which Supervisor to delete.
     */
    where: SupervisorWhereUniqueInput
  }

  /**
   * Supervisor deleteMany
   */
  export type SupervisorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Supervisors to delete
     */
    where?: SupervisorWhereInput
  }

  /**
   * Supervisor.CompetitionRoom
   */
  export type Supervisor$CompetitionRoomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionRoom
     */
    select?: CompetitionRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionRoomInclude<ExtArgs> | null
    where?: CompetitionRoomWhereInput
    orderBy?: CompetitionRoomOrderByWithRelationInput | CompetitionRoomOrderByWithRelationInput[]
    cursor?: CompetitionRoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompetitionRoomScalarFieldEnum | CompetitionRoomScalarFieldEnum[]
  }

  /**
   * Supervisor without action
   */
  export type SupervisorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supervisor
     */
    select?: SupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupervisorInclude<ExtArgs> | null
  }


  /**
   * Model CompetitionRoom
   */

  export type AggregateCompetitionRoom = {
    _count: CompetitionRoomCountAggregateOutputType | null
    _min: CompetitionRoomMinAggregateOutputType | null
    _max: CompetitionRoomMaxAggregateOutputType | null
  }

  export type CompetitionRoomMinAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Name: string | null
    CompetitionId: string | null
    SupervisorId: string | null
  }

  export type CompetitionRoomMaxAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Name: string | null
    CompetitionId: string | null
    SupervisorId: string | null
  }

  export type CompetitionRoomCountAggregateOutputType = {
    Id: number
    DateCreate: number
    DateUpdate: number
    Name: number
    CompetitionId: number
    SupervisorId: number
    _all: number
  }


  export type CompetitionRoomMinAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    CompetitionId?: true
    SupervisorId?: true
  }

  export type CompetitionRoomMaxAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    CompetitionId?: true
    SupervisorId?: true
  }

  export type CompetitionRoomCountAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    CompetitionId?: true
    SupervisorId?: true
    _all?: true
  }

  export type CompetitionRoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompetitionRoom to aggregate.
     */
    where?: CompetitionRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompetitionRooms to fetch.
     */
    orderBy?: CompetitionRoomOrderByWithRelationInput | CompetitionRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompetitionRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompetitionRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompetitionRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompetitionRooms
    **/
    _count?: true | CompetitionRoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompetitionRoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompetitionRoomMaxAggregateInputType
  }

  export type GetCompetitionRoomAggregateType<T extends CompetitionRoomAggregateArgs> = {
        [P in keyof T & keyof AggregateCompetitionRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompetitionRoom[P]>
      : GetScalarType<T[P], AggregateCompetitionRoom[P]>
  }




  export type CompetitionRoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitionRoomWhereInput
    orderBy?: CompetitionRoomOrderByWithAggregationInput | CompetitionRoomOrderByWithAggregationInput[]
    by: CompetitionRoomScalarFieldEnum[] | CompetitionRoomScalarFieldEnum
    having?: CompetitionRoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompetitionRoomCountAggregateInputType | true
    _min?: CompetitionRoomMinAggregateInputType
    _max?: CompetitionRoomMaxAggregateInputType
  }

  export type CompetitionRoomGroupByOutputType = {
    Id: string
    DateCreate: Date
    DateUpdate: Date | null
    Name: string
    CompetitionId: string
    SupervisorId: string | null
    _count: CompetitionRoomCountAggregateOutputType | null
    _min: CompetitionRoomMinAggregateOutputType | null
    _max: CompetitionRoomMaxAggregateOutputType | null
  }

  type GetCompetitionRoomGroupByPayload<T extends CompetitionRoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompetitionRoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompetitionRoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompetitionRoomGroupByOutputType[P]>
            : GetScalarType<T[P], CompetitionRoomGroupByOutputType[P]>
        }
      >
    >


  export type CompetitionRoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    CompetitionId?: boolean
    SupervisorId?: boolean
    CompetitionParticipant?: boolean | CompetitionRoom$CompetitionParticipantArgs<ExtArgs>
    Competition?: boolean | CompetitionDefaultArgs<ExtArgs>
    Supervisor?: boolean | CompetitionRoom$SupervisorArgs<ExtArgs>
    _count?: boolean | CompetitionRoomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["competitionRoom"]>

  export type CompetitionRoomSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    CompetitionId?: boolean
    SupervisorId?: boolean
    Competition?: boolean | CompetitionDefaultArgs<ExtArgs>
    Supervisor?: boolean | CompetitionRoom$SupervisorArgs<ExtArgs>
  }, ExtArgs["result"]["competitionRoom"]>

  export type CompetitionRoomSelectScalar = {
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    CompetitionId?: boolean
    SupervisorId?: boolean
  }

  export type CompetitionRoomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CompetitionParticipant?: boolean | CompetitionRoom$CompetitionParticipantArgs<ExtArgs>
    Competition?: boolean | CompetitionDefaultArgs<ExtArgs>
    Supervisor?: boolean | CompetitionRoom$SupervisorArgs<ExtArgs>
    _count?: boolean | CompetitionRoomCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompetitionRoomIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Competition?: boolean | CompetitionDefaultArgs<ExtArgs>
    Supervisor?: boolean | CompetitionRoom$SupervisorArgs<ExtArgs>
  }

  export type $CompetitionRoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompetitionRoom"
    objects: {
      CompetitionParticipant: Prisma.$CompetitionParticipantPayload<ExtArgs>[]
      Competition: Prisma.$CompetitionPayload<ExtArgs>
      Supervisor: Prisma.$SupervisorPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: string
      DateCreate: Date
      DateUpdate: Date | null
      Name: string
      CompetitionId: string
      SupervisorId: string | null
    }, ExtArgs["result"]["competitionRoom"]>
    composites: {}
  }

  type CompetitionRoomGetPayload<S extends boolean | null | undefined | CompetitionRoomDefaultArgs> = $Result.GetResult<Prisma.$CompetitionRoomPayload, S>

  type CompetitionRoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompetitionRoomFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompetitionRoomCountAggregateInputType | true
    }

  export interface CompetitionRoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompetitionRoom'], meta: { name: 'CompetitionRoom' } }
    /**
     * Find zero or one CompetitionRoom that matches the filter.
     * @param {CompetitionRoomFindUniqueArgs} args - Arguments to find a CompetitionRoom
     * @example
     * // Get one CompetitionRoom
     * const competitionRoom = await prisma.competitionRoom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompetitionRoomFindUniqueArgs>(args: SelectSubset<T, CompetitionRoomFindUniqueArgs<ExtArgs>>): Prisma__CompetitionRoomClient<$Result.GetResult<Prisma.$CompetitionRoomPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CompetitionRoom that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompetitionRoomFindUniqueOrThrowArgs} args - Arguments to find a CompetitionRoom
     * @example
     * // Get one CompetitionRoom
     * const competitionRoom = await prisma.competitionRoom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompetitionRoomFindUniqueOrThrowArgs>(args: SelectSubset<T, CompetitionRoomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompetitionRoomClient<$Result.GetResult<Prisma.$CompetitionRoomPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CompetitionRoom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionRoomFindFirstArgs} args - Arguments to find a CompetitionRoom
     * @example
     * // Get one CompetitionRoom
     * const competitionRoom = await prisma.competitionRoom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompetitionRoomFindFirstArgs>(args?: SelectSubset<T, CompetitionRoomFindFirstArgs<ExtArgs>>): Prisma__CompetitionRoomClient<$Result.GetResult<Prisma.$CompetitionRoomPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CompetitionRoom that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionRoomFindFirstOrThrowArgs} args - Arguments to find a CompetitionRoom
     * @example
     * // Get one CompetitionRoom
     * const competitionRoom = await prisma.competitionRoom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompetitionRoomFindFirstOrThrowArgs>(args?: SelectSubset<T, CompetitionRoomFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompetitionRoomClient<$Result.GetResult<Prisma.$CompetitionRoomPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CompetitionRooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionRoomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompetitionRooms
     * const competitionRooms = await prisma.competitionRoom.findMany()
     * 
     * // Get first 10 CompetitionRooms
     * const competitionRooms = await prisma.competitionRoom.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const competitionRoomWithIdOnly = await prisma.competitionRoom.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends CompetitionRoomFindManyArgs>(args?: SelectSubset<T, CompetitionRoomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionRoomPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CompetitionRoom.
     * @param {CompetitionRoomCreateArgs} args - Arguments to create a CompetitionRoom.
     * @example
     * // Create one CompetitionRoom
     * const CompetitionRoom = await prisma.competitionRoom.create({
     *   data: {
     *     // ... data to create a CompetitionRoom
     *   }
     * })
     * 
     */
    create<T extends CompetitionRoomCreateArgs>(args: SelectSubset<T, CompetitionRoomCreateArgs<ExtArgs>>): Prisma__CompetitionRoomClient<$Result.GetResult<Prisma.$CompetitionRoomPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CompetitionRooms.
     * @param {CompetitionRoomCreateManyArgs} args - Arguments to create many CompetitionRooms.
     * @example
     * // Create many CompetitionRooms
     * const competitionRoom = await prisma.competitionRoom.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompetitionRoomCreateManyArgs>(args?: SelectSubset<T, CompetitionRoomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CompetitionRooms and returns the data saved in the database.
     * @param {CompetitionRoomCreateManyAndReturnArgs} args - Arguments to create many CompetitionRooms.
     * @example
     * // Create many CompetitionRooms
     * const competitionRoom = await prisma.competitionRoom.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CompetitionRooms and only return the `Id`
     * const competitionRoomWithIdOnly = await prisma.competitionRoom.createManyAndReturn({ 
     *   select: { Id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompetitionRoomCreateManyAndReturnArgs>(args?: SelectSubset<T, CompetitionRoomCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionRoomPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CompetitionRoom.
     * @param {CompetitionRoomDeleteArgs} args - Arguments to delete one CompetitionRoom.
     * @example
     * // Delete one CompetitionRoom
     * const CompetitionRoom = await prisma.competitionRoom.delete({
     *   where: {
     *     // ... filter to delete one CompetitionRoom
     *   }
     * })
     * 
     */
    delete<T extends CompetitionRoomDeleteArgs>(args: SelectSubset<T, CompetitionRoomDeleteArgs<ExtArgs>>): Prisma__CompetitionRoomClient<$Result.GetResult<Prisma.$CompetitionRoomPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CompetitionRoom.
     * @param {CompetitionRoomUpdateArgs} args - Arguments to update one CompetitionRoom.
     * @example
     * // Update one CompetitionRoom
     * const competitionRoom = await prisma.competitionRoom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompetitionRoomUpdateArgs>(args: SelectSubset<T, CompetitionRoomUpdateArgs<ExtArgs>>): Prisma__CompetitionRoomClient<$Result.GetResult<Prisma.$CompetitionRoomPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CompetitionRooms.
     * @param {CompetitionRoomDeleteManyArgs} args - Arguments to filter CompetitionRooms to delete.
     * @example
     * // Delete a few CompetitionRooms
     * const { count } = await prisma.competitionRoom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompetitionRoomDeleteManyArgs>(args?: SelectSubset<T, CompetitionRoomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompetitionRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionRoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompetitionRooms
     * const competitionRoom = await prisma.competitionRoom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompetitionRoomUpdateManyArgs>(args: SelectSubset<T, CompetitionRoomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CompetitionRoom.
     * @param {CompetitionRoomUpsertArgs} args - Arguments to update or create a CompetitionRoom.
     * @example
     * // Update or create a CompetitionRoom
     * const competitionRoom = await prisma.competitionRoom.upsert({
     *   create: {
     *     // ... data to create a CompetitionRoom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompetitionRoom we want to update
     *   }
     * })
     */
    upsert<T extends CompetitionRoomUpsertArgs>(args: SelectSubset<T, CompetitionRoomUpsertArgs<ExtArgs>>): Prisma__CompetitionRoomClient<$Result.GetResult<Prisma.$CompetitionRoomPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CompetitionRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionRoomCountArgs} args - Arguments to filter CompetitionRooms to count.
     * @example
     * // Count the number of CompetitionRooms
     * const count = await prisma.competitionRoom.count({
     *   where: {
     *     // ... the filter for the CompetitionRooms we want to count
     *   }
     * })
    **/
    count<T extends CompetitionRoomCountArgs>(
      args?: Subset<T, CompetitionRoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompetitionRoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompetitionRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionRoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompetitionRoomAggregateArgs>(args: Subset<T, CompetitionRoomAggregateArgs>): Prisma.PrismaPromise<GetCompetitionRoomAggregateType<T>>

    /**
     * Group by CompetitionRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionRoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompetitionRoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompetitionRoomGroupByArgs['orderBy'] }
        : { orderBy?: CompetitionRoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompetitionRoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompetitionRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompetitionRoom model
   */
  readonly fields: CompetitionRoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompetitionRoom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompetitionRoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    CompetitionParticipant<T extends CompetitionRoom$CompetitionParticipantArgs<ExtArgs> = {}>(args?: Subset<T, CompetitionRoom$CompetitionParticipantArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    Competition<T extends CompetitionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompetitionDefaultArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Supervisor<T extends CompetitionRoom$SupervisorArgs<ExtArgs> = {}>(args?: Subset<T, CompetitionRoom$SupervisorArgs<ExtArgs>>): Prisma__SupervisorClient<$Result.GetResult<Prisma.$SupervisorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompetitionRoom model
   */ 
  interface CompetitionRoomFieldRefs {
    readonly Id: FieldRef<"CompetitionRoom", 'String'>
    readonly DateCreate: FieldRef<"CompetitionRoom", 'DateTime'>
    readonly DateUpdate: FieldRef<"CompetitionRoom", 'DateTime'>
    readonly Name: FieldRef<"CompetitionRoom", 'String'>
    readonly CompetitionId: FieldRef<"CompetitionRoom", 'String'>
    readonly SupervisorId: FieldRef<"CompetitionRoom", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CompetitionRoom findUnique
   */
  export type CompetitionRoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionRoom
     */
    select?: CompetitionRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionRoomInclude<ExtArgs> | null
    /**
     * Filter, which CompetitionRoom to fetch.
     */
    where: CompetitionRoomWhereUniqueInput
  }

  /**
   * CompetitionRoom findUniqueOrThrow
   */
  export type CompetitionRoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionRoom
     */
    select?: CompetitionRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionRoomInclude<ExtArgs> | null
    /**
     * Filter, which CompetitionRoom to fetch.
     */
    where: CompetitionRoomWhereUniqueInput
  }

  /**
   * CompetitionRoom findFirst
   */
  export type CompetitionRoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionRoom
     */
    select?: CompetitionRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionRoomInclude<ExtArgs> | null
    /**
     * Filter, which CompetitionRoom to fetch.
     */
    where?: CompetitionRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompetitionRooms to fetch.
     */
    orderBy?: CompetitionRoomOrderByWithRelationInput | CompetitionRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompetitionRooms.
     */
    cursor?: CompetitionRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompetitionRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompetitionRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompetitionRooms.
     */
    distinct?: CompetitionRoomScalarFieldEnum | CompetitionRoomScalarFieldEnum[]
  }

  /**
   * CompetitionRoom findFirstOrThrow
   */
  export type CompetitionRoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionRoom
     */
    select?: CompetitionRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionRoomInclude<ExtArgs> | null
    /**
     * Filter, which CompetitionRoom to fetch.
     */
    where?: CompetitionRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompetitionRooms to fetch.
     */
    orderBy?: CompetitionRoomOrderByWithRelationInput | CompetitionRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompetitionRooms.
     */
    cursor?: CompetitionRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompetitionRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompetitionRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompetitionRooms.
     */
    distinct?: CompetitionRoomScalarFieldEnum | CompetitionRoomScalarFieldEnum[]
  }

  /**
   * CompetitionRoom findMany
   */
  export type CompetitionRoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionRoom
     */
    select?: CompetitionRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionRoomInclude<ExtArgs> | null
    /**
     * Filter, which CompetitionRooms to fetch.
     */
    where?: CompetitionRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompetitionRooms to fetch.
     */
    orderBy?: CompetitionRoomOrderByWithRelationInput | CompetitionRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompetitionRooms.
     */
    cursor?: CompetitionRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompetitionRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompetitionRooms.
     */
    skip?: number
    distinct?: CompetitionRoomScalarFieldEnum | CompetitionRoomScalarFieldEnum[]
  }

  /**
   * CompetitionRoom create
   */
  export type CompetitionRoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionRoom
     */
    select?: CompetitionRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionRoomInclude<ExtArgs> | null
    /**
     * The data needed to create a CompetitionRoom.
     */
    data: XOR<CompetitionRoomCreateInput, CompetitionRoomUncheckedCreateInput>
  }

  /**
   * CompetitionRoom createMany
   */
  export type CompetitionRoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompetitionRooms.
     */
    data: CompetitionRoomCreateManyInput | CompetitionRoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CompetitionRoom createManyAndReturn
   */
  export type CompetitionRoomCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionRoom
     */
    select?: CompetitionRoomSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CompetitionRooms.
     */
    data: CompetitionRoomCreateManyInput | CompetitionRoomCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionRoomIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompetitionRoom update
   */
  export type CompetitionRoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionRoom
     */
    select?: CompetitionRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionRoomInclude<ExtArgs> | null
    /**
     * The data needed to update a CompetitionRoom.
     */
    data: XOR<CompetitionRoomUpdateInput, CompetitionRoomUncheckedUpdateInput>
    /**
     * Choose, which CompetitionRoom to update.
     */
    where: CompetitionRoomWhereUniqueInput
  }

  /**
   * CompetitionRoom updateMany
   */
  export type CompetitionRoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompetitionRooms.
     */
    data: XOR<CompetitionRoomUpdateManyMutationInput, CompetitionRoomUncheckedUpdateManyInput>
    /**
     * Filter which CompetitionRooms to update
     */
    where?: CompetitionRoomWhereInput
  }

  /**
   * CompetitionRoom upsert
   */
  export type CompetitionRoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionRoom
     */
    select?: CompetitionRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionRoomInclude<ExtArgs> | null
    /**
     * The filter to search for the CompetitionRoom to update in case it exists.
     */
    where: CompetitionRoomWhereUniqueInput
    /**
     * In case the CompetitionRoom found by the `where` argument doesn't exist, create a new CompetitionRoom with this data.
     */
    create: XOR<CompetitionRoomCreateInput, CompetitionRoomUncheckedCreateInput>
    /**
     * In case the CompetitionRoom was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompetitionRoomUpdateInput, CompetitionRoomUncheckedUpdateInput>
  }

  /**
   * CompetitionRoom delete
   */
  export type CompetitionRoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionRoom
     */
    select?: CompetitionRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionRoomInclude<ExtArgs> | null
    /**
     * Filter which CompetitionRoom to delete.
     */
    where: CompetitionRoomWhereUniqueInput
  }

  /**
   * CompetitionRoom deleteMany
   */
  export type CompetitionRoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompetitionRooms to delete
     */
    where?: CompetitionRoomWhereInput
  }

  /**
   * CompetitionRoom.CompetitionParticipant
   */
  export type CompetitionRoom$CompetitionParticipantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionParticipant
     */
    select?: CompetitionParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionParticipantInclude<ExtArgs> | null
    where?: CompetitionParticipantWhereInput
    orderBy?: CompetitionParticipantOrderByWithRelationInput | CompetitionParticipantOrderByWithRelationInput[]
    cursor?: CompetitionParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompetitionParticipantScalarFieldEnum | CompetitionParticipantScalarFieldEnum[]
  }

  /**
   * CompetitionRoom.Supervisor
   */
  export type CompetitionRoom$SupervisorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supervisor
     */
    select?: SupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupervisorInclude<ExtArgs> | null
    where?: SupervisorWhereInput
  }

  /**
   * CompetitionRoom without action
   */
  export type CompetitionRoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionRoom
     */
    select?: CompetitionRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionRoomInclude<ExtArgs> | null
  }


  /**
   * Model CompetitionParticipant
   */

  export type AggregateCompetitionParticipant = {
    _count: CompetitionParticipantCountAggregateOutputType | null
    _avg: CompetitionParticipantAvgAggregateOutputType | null
    _sum: CompetitionParticipantSumAggregateOutputType | null
    _min: CompetitionParticipantMinAggregateOutputType | null
    _max: CompetitionParticipantMaxAggregateOutputType | null
  }

  export type CompetitionParticipantAvgAggregateOutputType = {
    Score: number | null
    Correct: number | null
    Incorrect: number | null
  }

  export type CompetitionParticipantSumAggregateOutputType = {
    Score: number | null
    Correct: number | null
    Incorrect: number | null
  }

  export type CompetitionParticipantMinAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    ParticipantId: string | null
    StudentId: string | null
    CompetitionId: string | null
    CompetitionRoomId: string | null
    PaymentId: string | null
    Attedance: boolean | null
    Score: number | null
    Correct: number | null
    Incorrect: number | null
    PathAnswer: string | null
  }

  export type CompetitionParticipantMaxAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    ParticipantId: string | null
    StudentId: string | null
    CompetitionId: string | null
    CompetitionRoomId: string | null
    PaymentId: string | null
    Attedance: boolean | null
    Score: number | null
    Correct: number | null
    Incorrect: number | null
    PathAnswer: string | null
  }

  export type CompetitionParticipantCountAggregateOutputType = {
    Id: number
    DateCreate: number
    DateUpdate: number
    ParticipantId: number
    StudentId: number
    CompetitionId: number
    CompetitionRoomId: number
    PaymentId: number
    Attedance: number
    Score: number
    Correct: number
    Incorrect: number
    PathAnswer: number
    _all: number
  }


  export type CompetitionParticipantAvgAggregateInputType = {
    Score?: true
    Correct?: true
    Incorrect?: true
  }

  export type CompetitionParticipantSumAggregateInputType = {
    Score?: true
    Correct?: true
    Incorrect?: true
  }

  export type CompetitionParticipantMinAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    ParticipantId?: true
    StudentId?: true
    CompetitionId?: true
    CompetitionRoomId?: true
    PaymentId?: true
    Attedance?: true
    Score?: true
    Correct?: true
    Incorrect?: true
    PathAnswer?: true
  }

  export type CompetitionParticipantMaxAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    ParticipantId?: true
    StudentId?: true
    CompetitionId?: true
    CompetitionRoomId?: true
    PaymentId?: true
    Attedance?: true
    Score?: true
    Correct?: true
    Incorrect?: true
    PathAnswer?: true
  }

  export type CompetitionParticipantCountAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    ParticipantId?: true
    StudentId?: true
    CompetitionId?: true
    CompetitionRoomId?: true
    PaymentId?: true
    Attedance?: true
    Score?: true
    Correct?: true
    Incorrect?: true
    PathAnswer?: true
    _all?: true
  }

  export type CompetitionParticipantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompetitionParticipant to aggregate.
     */
    where?: CompetitionParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompetitionParticipants to fetch.
     */
    orderBy?: CompetitionParticipantOrderByWithRelationInput | CompetitionParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompetitionParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompetitionParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompetitionParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompetitionParticipants
    **/
    _count?: true | CompetitionParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompetitionParticipantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompetitionParticipantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompetitionParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompetitionParticipantMaxAggregateInputType
  }

  export type GetCompetitionParticipantAggregateType<T extends CompetitionParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateCompetitionParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompetitionParticipant[P]>
      : GetScalarType<T[P], AggregateCompetitionParticipant[P]>
  }




  export type CompetitionParticipantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitionParticipantWhereInput
    orderBy?: CompetitionParticipantOrderByWithAggregationInput | CompetitionParticipantOrderByWithAggregationInput[]
    by: CompetitionParticipantScalarFieldEnum[] | CompetitionParticipantScalarFieldEnum
    having?: CompetitionParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompetitionParticipantCountAggregateInputType | true
    _avg?: CompetitionParticipantAvgAggregateInputType
    _sum?: CompetitionParticipantSumAggregateInputType
    _min?: CompetitionParticipantMinAggregateInputType
    _max?: CompetitionParticipantMaxAggregateInputType
  }

  export type CompetitionParticipantGroupByOutputType = {
    Id: string
    DateCreate: Date
    DateUpdate: Date | null
    ParticipantId: string | null
    StudentId: string
    CompetitionId: string
    CompetitionRoomId: string | null
    PaymentId: string | null
    Attedance: boolean | null
    Score: number | null
    Correct: number | null
    Incorrect: number | null
    PathAnswer: string | null
    _count: CompetitionParticipantCountAggregateOutputType | null
    _avg: CompetitionParticipantAvgAggregateOutputType | null
    _sum: CompetitionParticipantSumAggregateOutputType | null
    _min: CompetitionParticipantMinAggregateOutputType | null
    _max: CompetitionParticipantMaxAggregateOutputType | null
  }

  type GetCompetitionParticipantGroupByPayload<T extends CompetitionParticipantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompetitionParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompetitionParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompetitionParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], CompetitionParticipantGroupByOutputType[P]>
        }
      >
    >


  export type CompetitionParticipantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    ParticipantId?: boolean
    StudentId?: boolean
    CompetitionId?: boolean
    CompetitionRoomId?: boolean
    PaymentId?: boolean
    Attedance?: boolean
    Score?: boolean
    Correct?: boolean
    Incorrect?: boolean
    PathAnswer?: boolean
    Competition?: boolean | CompetitionDefaultArgs<ExtArgs>
    CompetitionRoom?: boolean | CompetitionParticipant$CompetitionRoomArgs<ExtArgs>
    Payment?: boolean | CompetitionParticipant$PaymentArgs<ExtArgs>
    Student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["competitionParticipant"]>

  export type CompetitionParticipantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    ParticipantId?: boolean
    StudentId?: boolean
    CompetitionId?: boolean
    CompetitionRoomId?: boolean
    PaymentId?: boolean
    Attedance?: boolean
    Score?: boolean
    Correct?: boolean
    Incorrect?: boolean
    PathAnswer?: boolean
    Competition?: boolean | CompetitionDefaultArgs<ExtArgs>
    CompetitionRoom?: boolean | CompetitionParticipant$CompetitionRoomArgs<ExtArgs>
    Payment?: boolean | CompetitionParticipant$PaymentArgs<ExtArgs>
    Student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["competitionParticipant"]>

  export type CompetitionParticipantSelectScalar = {
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    ParticipantId?: boolean
    StudentId?: boolean
    CompetitionId?: boolean
    CompetitionRoomId?: boolean
    PaymentId?: boolean
    Attedance?: boolean
    Score?: boolean
    Correct?: boolean
    Incorrect?: boolean
    PathAnswer?: boolean
  }

  export type CompetitionParticipantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Competition?: boolean | CompetitionDefaultArgs<ExtArgs>
    CompetitionRoom?: boolean | CompetitionParticipant$CompetitionRoomArgs<ExtArgs>
    Payment?: boolean | CompetitionParticipant$PaymentArgs<ExtArgs>
    Student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type CompetitionParticipantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Competition?: boolean | CompetitionDefaultArgs<ExtArgs>
    CompetitionRoom?: boolean | CompetitionParticipant$CompetitionRoomArgs<ExtArgs>
    Payment?: boolean | CompetitionParticipant$PaymentArgs<ExtArgs>
    Student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $CompetitionParticipantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompetitionParticipant"
    objects: {
      Competition: Prisma.$CompetitionPayload<ExtArgs>
      CompetitionRoom: Prisma.$CompetitionRoomPayload<ExtArgs> | null
      Payment: Prisma.$PaymentPayload<ExtArgs> | null
      Student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: string
      DateCreate: Date
      DateUpdate: Date | null
      ParticipantId: string | null
      StudentId: string
      CompetitionId: string
      CompetitionRoomId: string | null
      PaymentId: string | null
      Attedance: boolean | null
      Score: number | null
      Correct: number | null
      Incorrect: number | null
      PathAnswer: string | null
    }, ExtArgs["result"]["competitionParticipant"]>
    composites: {}
  }

  type CompetitionParticipantGetPayload<S extends boolean | null | undefined | CompetitionParticipantDefaultArgs> = $Result.GetResult<Prisma.$CompetitionParticipantPayload, S>

  type CompetitionParticipantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompetitionParticipantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompetitionParticipantCountAggregateInputType | true
    }

  export interface CompetitionParticipantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompetitionParticipant'], meta: { name: 'CompetitionParticipant' } }
    /**
     * Find zero or one CompetitionParticipant that matches the filter.
     * @param {CompetitionParticipantFindUniqueArgs} args - Arguments to find a CompetitionParticipant
     * @example
     * // Get one CompetitionParticipant
     * const competitionParticipant = await prisma.competitionParticipant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompetitionParticipantFindUniqueArgs>(args: SelectSubset<T, CompetitionParticipantFindUniqueArgs<ExtArgs>>): Prisma__CompetitionParticipantClient<$Result.GetResult<Prisma.$CompetitionParticipantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CompetitionParticipant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompetitionParticipantFindUniqueOrThrowArgs} args - Arguments to find a CompetitionParticipant
     * @example
     * // Get one CompetitionParticipant
     * const competitionParticipant = await prisma.competitionParticipant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompetitionParticipantFindUniqueOrThrowArgs>(args: SelectSubset<T, CompetitionParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompetitionParticipantClient<$Result.GetResult<Prisma.$CompetitionParticipantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CompetitionParticipant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionParticipantFindFirstArgs} args - Arguments to find a CompetitionParticipant
     * @example
     * // Get one CompetitionParticipant
     * const competitionParticipant = await prisma.competitionParticipant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompetitionParticipantFindFirstArgs>(args?: SelectSubset<T, CompetitionParticipantFindFirstArgs<ExtArgs>>): Prisma__CompetitionParticipantClient<$Result.GetResult<Prisma.$CompetitionParticipantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CompetitionParticipant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionParticipantFindFirstOrThrowArgs} args - Arguments to find a CompetitionParticipant
     * @example
     * // Get one CompetitionParticipant
     * const competitionParticipant = await prisma.competitionParticipant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompetitionParticipantFindFirstOrThrowArgs>(args?: SelectSubset<T, CompetitionParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompetitionParticipantClient<$Result.GetResult<Prisma.$CompetitionParticipantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CompetitionParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompetitionParticipants
     * const competitionParticipants = await prisma.competitionParticipant.findMany()
     * 
     * // Get first 10 CompetitionParticipants
     * const competitionParticipants = await prisma.competitionParticipant.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const competitionParticipantWithIdOnly = await prisma.competitionParticipant.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends CompetitionParticipantFindManyArgs>(args?: SelectSubset<T, CompetitionParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionParticipantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CompetitionParticipant.
     * @param {CompetitionParticipantCreateArgs} args - Arguments to create a CompetitionParticipant.
     * @example
     * // Create one CompetitionParticipant
     * const CompetitionParticipant = await prisma.competitionParticipant.create({
     *   data: {
     *     // ... data to create a CompetitionParticipant
     *   }
     * })
     * 
     */
    create<T extends CompetitionParticipantCreateArgs>(args: SelectSubset<T, CompetitionParticipantCreateArgs<ExtArgs>>): Prisma__CompetitionParticipantClient<$Result.GetResult<Prisma.$CompetitionParticipantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CompetitionParticipants.
     * @param {CompetitionParticipantCreateManyArgs} args - Arguments to create many CompetitionParticipants.
     * @example
     * // Create many CompetitionParticipants
     * const competitionParticipant = await prisma.competitionParticipant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompetitionParticipantCreateManyArgs>(args?: SelectSubset<T, CompetitionParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CompetitionParticipants and returns the data saved in the database.
     * @param {CompetitionParticipantCreateManyAndReturnArgs} args - Arguments to create many CompetitionParticipants.
     * @example
     * // Create many CompetitionParticipants
     * const competitionParticipant = await prisma.competitionParticipant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CompetitionParticipants and only return the `Id`
     * const competitionParticipantWithIdOnly = await prisma.competitionParticipant.createManyAndReturn({ 
     *   select: { Id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompetitionParticipantCreateManyAndReturnArgs>(args?: SelectSubset<T, CompetitionParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionParticipantPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CompetitionParticipant.
     * @param {CompetitionParticipantDeleteArgs} args - Arguments to delete one CompetitionParticipant.
     * @example
     * // Delete one CompetitionParticipant
     * const CompetitionParticipant = await prisma.competitionParticipant.delete({
     *   where: {
     *     // ... filter to delete one CompetitionParticipant
     *   }
     * })
     * 
     */
    delete<T extends CompetitionParticipantDeleteArgs>(args: SelectSubset<T, CompetitionParticipantDeleteArgs<ExtArgs>>): Prisma__CompetitionParticipantClient<$Result.GetResult<Prisma.$CompetitionParticipantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CompetitionParticipant.
     * @param {CompetitionParticipantUpdateArgs} args - Arguments to update one CompetitionParticipant.
     * @example
     * // Update one CompetitionParticipant
     * const competitionParticipant = await prisma.competitionParticipant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompetitionParticipantUpdateArgs>(args: SelectSubset<T, CompetitionParticipantUpdateArgs<ExtArgs>>): Prisma__CompetitionParticipantClient<$Result.GetResult<Prisma.$CompetitionParticipantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CompetitionParticipants.
     * @param {CompetitionParticipantDeleteManyArgs} args - Arguments to filter CompetitionParticipants to delete.
     * @example
     * // Delete a few CompetitionParticipants
     * const { count } = await prisma.competitionParticipant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompetitionParticipantDeleteManyArgs>(args?: SelectSubset<T, CompetitionParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompetitionParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompetitionParticipants
     * const competitionParticipant = await prisma.competitionParticipant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompetitionParticipantUpdateManyArgs>(args: SelectSubset<T, CompetitionParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CompetitionParticipant.
     * @param {CompetitionParticipantUpsertArgs} args - Arguments to update or create a CompetitionParticipant.
     * @example
     * // Update or create a CompetitionParticipant
     * const competitionParticipant = await prisma.competitionParticipant.upsert({
     *   create: {
     *     // ... data to create a CompetitionParticipant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompetitionParticipant we want to update
     *   }
     * })
     */
    upsert<T extends CompetitionParticipantUpsertArgs>(args: SelectSubset<T, CompetitionParticipantUpsertArgs<ExtArgs>>): Prisma__CompetitionParticipantClient<$Result.GetResult<Prisma.$CompetitionParticipantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CompetitionParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionParticipantCountArgs} args - Arguments to filter CompetitionParticipants to count.
     * @example
     * // Count the number of CompetitionParticipants
     * const count = await prisma.competitionParticipant.count({
     *   where: {
     *     // ... the filter for the CompetitionParticipants we want to count
     *   }
     * })
    **/
    count<T extends CompetitionParticipantCountArgs>(
      args?: Subset<T, CompetitionParticipantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompetitionParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompetitionParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompetitionParticipantAggregateArgs>(args: Subset<T, CompetitionParticipantAggregateArgs>): Prisma.PrismaPromise<GetCompetitionParticipantAggregateType<T>>

    /**
     * Group by CompetitionParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompetitionParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompetitionParticipantGroupByArgs['orderBy'] }
        : { orderBy?: CompetitionParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompetitionParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompetitionParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompetitionParticipant model
   */
  readonly fields: CompetitionParticipantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompetitionParticipant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompetitionParticipantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Competition<T extends CompetitionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompetitionDefaultArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    CompetitionRoom<T extends CompetitionParticipant$CompetitionRoomArgs<ExtArgs> = {}>(args?: Subset<T, CompetitionParticipant$CompetitionRoomArgs<ExtArgs>>): Prisma__CompetitionRoomClient<$Result.GetResult<Prisma.$CompetitionRoomPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    Payment<T extends CompetitionParticipant$PaymentArgs<ExtArgs> = {}>(args?: Subset<T, CompetitionParticipant$PaymentArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    Student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompetitionParticipant model
   */ 
  interface CompetitionParticipantFieldRefs {
    readonly Id: FieldRef<"CompetitionParticipant", 'String'>
    readonly DateCreate: FieldRef<"CompetitionParticipant", 'DateTime'>
    readonly DateUpdate: FieldRef<"CompetitionParticipant", 'DateTime'>
    readonly ParticipantId: FieldRef<"CompetitionParticipant", 'String'>
    readonly StudentId: FieldRef<"CompetitionParticipant", 'String'>
    readonly CompetitionId: FieldRef<"CompetitionParticipant", 'String'>
    readonly CompetitionRoomId: FieldRef<"CompetitionParticipant", 'String'>
    readonly PaymentId: FieldRef<"CompetitionParticipant", 'String'>
    readonly Attedance: FieldRef<"CompetitionParticipant", 'Boolean'>
    readonly Score: FieldRef<"CompetitionParticipant", 'Int'>
    readonly Correct: FieldRef<"CompetitionParticipant", 'Int'>
    readonly Incorrect: FieldRef<"CompetitionParticipant", 'Int'>
    readonly PathAnswer: FieldRef<"CompetitionParticipant", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CompetitionParticipant findUnique
   */
  export type CompetitionParticipantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionParticipant
     */
    select?: CompetitionParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionParticipantInclude<ExtArgs> | null
    /**
     * Filter, which CompetitionParticipant to fetch.
     */
    where: CompetitionParticipantWhereUniqueInput
  }

  /**
   * CompetitionParticipant findUniqueOrThrow
   */
  export type CompetitionParticipantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionParticipant
     */
    select?: CompetitionParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionParticipantInclude<ExtArgs> | null
    /**
     * Filter, which CompetitionParticipant to fetch.
     */
    where: CompetitionParticipantWhereUniqueInput
  }

  /**
   * CompetitionParticipant findFirst
   */
  export type CompetitionParticipantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionParticipant
     */
    select?: CompetitionParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionParticipantInclude<ExtArgs> | null
    /**
     * Filter, which CompetitionParticipant to fetch.
     */
    where?: CompetitionParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompetitionParticipants to fetch.
     */
    orderBy?: CompetitionParticipantOrderByWithRelationInput | CompetitionParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompetitionParticipants.
     */
    cursor?: CompetitionParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompetitionParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompetitionParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompetitionParticipants.
     */
    distinct?: CompetitionParticipantScalarFieldEnum | CompetitionParticipantScalarFieldEnum[]
  }

  /**
   * CompetitionParticipant findFirstOrThrow
   */
  export type CompetitionParticipantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionParticipant
     */
    select?: CompetitionParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionParticipantInclude<ExtArgs> | null
    /**
     * Filter, which CompetitionParticipant to fetch.
     */
    where?: CompetitionParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompetitionParticipants to fetch.
     */
    orderBy?: CompetitionParticipantOrderByWithRelationInput | CompetitionParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompetitionParticipants.
     */
    cursor?: CompetitionParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompetitionParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompetitionParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompetitionParticipants.
     */
    distinct?: CompetitionParticipantScalarFieldEnum | CompetitionParticipantScalarFieldEnum[]
  }

  /**
   * CompetitionParticipant findMany
   */
  export type CompetitionParticipantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionParticipant
     */
    select?: CompetitionParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionParticipantInclude<ExtArgs> | null
    /**
     * Filter, which CompetitionParticipants to fetch.
     */
    where?: CompetitionParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompetitionParticipants to fetch.
     */
    orderBy?: CompetitionParticipantOrderByWithRelationInput | CompetitionParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompetitionParticipants.
     */
    cursor?: CompetitionParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompetitionParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompetitionParticipants.
     */
    skip?: number
    distinct?: CompetitionParticipantScalarFieldEnum | CompetitionParticipantScalarFieldEnum[]
  }

  /**
   * CompetitionParticipant create
   */
  export type CompetitionParticipantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionParticipant
     */
    select?: CompetitionParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionParticipantInclude<ExtArgs> | null
    /**
     * The data needed to create a CompetitionParticipant.
     */
    data: XOR<CompetitionParticipantCreateInput, CompetitionParticipantUncheckedCreateInput>
  }

  /**
   * CompetitionParticipant createMany
   */
  export type CompetitionParticipantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompetitionParticipants.
     */
    data: CompetitionParticipantCreateManyInput | CompetitionParticipantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CompetitionParticipant createManyAndReturn
   */
  export type CompetitionParticipantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionParticipant
     */
    select?: CompetitionParticipantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CompetitionParticipants.
     */
    data: CompetitionParticipantCreateManyInput | CompetitionParticipantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionParticipantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompetitionParticipant update
   */
  export type CompetitionParticipantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionParticipant
     */
    select?: CompetitionParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionParticipantInclude<ExtArgs> | null
    /**
     * The data needed to update a CompetitionParticipant.
     */
    data: XOR<CompetitionParticipantUpdateInput, CompetitionParticipantUncheckedUpdateInput>
    /**
     * Choose, which CompetitionParticipant to update.
     */
    where: CompetitionParticipantWhereUniqueInput
  }

  /**
   * CompetitionParticipant updateMany
   */
  export type CompetitionParticipantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompetitionParticipants.
     */
    data: XOR<CompetitionParticipantUpdateManyMutationInput, CompetitionParticipantUncheckedUpdateManyInput>
    /**
     * Filter which CompetitionParticipants to update
     */
    where?: CompetitionParticipantWhereInput
  }

  /**
   * CompetitionParticipant upsert
   */
  export type CompetitionParticipantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionParticipant
     */
    select?: CompetitionParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionParticipantInclude<ExtArgs> | null
    /**
     * The filter to search for the CompetitionParticipant to update in case it exists.
     */
    where: CompetitionParticipantWhereUniqueInput
    /**
     * In case the CompetitionParticipant found by the `where` argument doesn't exist, create a new CompetitionParticipant with this data.
     */
    create: XOR<CompetitionParticipantCreateInput, CompetitionParticipantUncheckedCreateInput>
    /**
     * In case the CompetitionParticipant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompetitionParticipantUpdateInput, CompetitionParticipantUncheckedUpdateInput>
  }

  /**
   * CompetitionParticipant delete
   */
  export type CompetitionParticipantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionParticipant
     */
    select?: CompetitionParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionParticipantInclude<ExtArgs> | null
    /**
     * Filter which CompetitionParticipant to delete.
     */
    where: CompetitionParticipantWhereUniqueInput
  }

  /**
   * CompetitionParticipant deleteMany
   */
  export type CompetitionParticipantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompetitionParticipants to delete
     */
    where?: CompetitionParticipantWhereInput
  }

  /**
   * CompetitionParticipant.CompetitionRoom
   */
  export type CompetitionParticipant$CompetitionRoomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionRoom
     */
    select?: CompetitionRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionRoomInclude<ExtArgs> | null
    where?: CompetitionRoomWhereInput
  }

  /**
   * CompetitionParticipant.Payment
   */
  export type CompetitionParticipant$PaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
  }

  /**
   * CompetitionParticipant without action
   */
  export type CompetitionParticipantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionParticipant
     */
    select?: CompetitionParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionParticipantInclude<ExtArgs> | null
  }


  /**
   * Model Kisi
   */

  export type AggregateKisi = {
    _count: KisiCountAggregateOutputType | null
    _min: KisiMinAggregateOutputType | null
    _max: KisiMaxAggregateOutputType | null
  }

  export type KisiMinAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Header: string | null
    Content: string | null
    CompetitionId: string | null
  }

  export type KisiMaxAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Header: string | null
    Content: string | null
    CompetitionId: string | null
  }

  export type KisiCountAggregateOutputType = {
    Id: number
    DateCreate: number
    DateUpdate: number
    Header: number
    Content: number
    CompetitionId: number
    _all: number
  }


  export type KisiMinAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Header?: true
    Content?: true
    CompetitionId?: true
  }

  export type KisiMaxAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Header?: true
    Content?: true
    CompetitionId?: true
  }

  export type KisiCountAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Header?: true
    Content?: true
    CompetitionId?: true
    _all?: true
  }

  export type KisiAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kisi to aggregate.
     */
    where?: KisiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kisis to fetch.
     */
    orderBy?: KisiOrderByWithRelationInput | KisiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KisiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kisis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kisis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Kisis
    **/
    _count?: true | KisiCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KisiMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KisiMaxAggregateInputType
  }

  export type GetKisiAggregateType<T extends KisiAggregateArgs> = {
        [P in keyof T & keyof AggregateKisi]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKisi[P]>
      : GetScalarType<T[P], AggregateKisi[P]>
  }




  export type KisiGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KisiWhereInput
    orderBy?: KisiOrderByWithAggregationInput | KisiOrderByWithAggregationInput[]
    by: KisiScalarFieldEnum[] | KisiScalarFieldEnum
    having?: KisiScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KisiCountAggregateInputType | true
    _min?: KisiMinAggregateInputType
    _max?: KisiMaxAggregateInputType
  }

  export type KisiGroupByOutputType = {
    Id: string
    DateCreate: Date
    DateUpdate: Date | null
    Header: string | null
    Content: string
    CompetitionId: string
    _count: KisiCountAggregateOutputType | null
    _min: KisiMinAggregateOutputType | null
    _max: KisiMaxAggregateOutputType | null
  }

  type GetKisiGroupByPayload<T extends KisiGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KisiGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KisiGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KisiGroupByOutputType[P]>
            : GetScalarType<T[P], KisiGroupByOutputType[P]>
        }
      >
    >


  export type KisiSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Header?: boolean
    Content?: boolean
    CompetitionId?: boolean
    Competition?: boolean | CompetitionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kisi"]>

  export type KisiSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Header?: boolean
    Content?: boolean
    CompetitionId?: boolean
    Competition?: boolean | CompetitionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kisi"]>

  export type KisiSelectScalar = {
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Header?: boolean
    Content?: boolean
    CompetitionId?: boolean
  }

  export type KisiInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Competition?: boolean | CompetitionDefaultArgs<ExtArgs>
  }
  export type KisiIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Competition?: boolean | CompetitionDefaultArgs<ExtArgs>
  }

  export type $KisiPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Kisi"
    objects: {
      Competition: Prisma.$CompetitionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: string
      DateCreate: Date
      DateUpdate: Date | null
      Header: string | null
      Content: string
      CompetitionId: string
    }, ExtArgs["result"]["kisi"]>
    composites: {}
  }

  type KisiGetPayload<S extends boolean | null | undefined | KisiDefaultArgs> = $Result.GetResult<Prisma.$KisiPayload, S>

  type KisiCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KisiFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KisiCountAggregateInputType | true
    }

  export interface KisiDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Kisi'], meta: { name: 'Kisi' } }
    /**
     * Find zero or one Kisi that matches the filter.
     * @param {KisiFindUniqueArgs} args - Arguments to find a Kisi
     * @example
     * // Get one Kisi
     * const kisi = await prisma.kisi.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KisiFindUniqueArgs>(args: SelectSubset<T, KisiFindUniqueArgs<ExtArgs>>): Prisma__KisiClient<$Result.GetResult<Prisma.$KisiPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Kisi that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {KisiFindUniqueOrThrowArgs} args - Arguments to find a Kisi
     * @example
     * // Get one Kisi
     * const kisi = await prisma.kisi.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KisiFindUniqueOrThrowArgs>(args: SelectSubset<T, KisiFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KisiClient<$Result.GetResult<Prisma.$KisiPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Kisi that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KisiFindFirstArgs} args - Arguments to find a Kisi
     * @example
     * // Get one Kisi
     * const kisi = await prisma.kisi.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KisiFindFirstArgs>(args?: SelectSubset<T, KisiFindFirstArgs<ExtArgs>>): Prisma__KisiClient<$Result.GetResult<Prisma.$KisiPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Kisi that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KisiFindFirstOrThrowArgs} args - Arguments to find a Kisi
     * @example
     * // Get one Kisi
     * const kisi = await prisma.kisi.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KisiFindFirstOrThrowArgs>(args?: SelectSubset<T, KisiFindFirstOrThrowArgs<ExtArgs>>): Prisma__KisiClient<$Result.GetResult<Prisma.$KisiPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Kisis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KisiFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kisis
     * const kisis = await prisma.kisi.findMany()
     * 
     * // Get first 10 Kisis
     * const kisis = await prisma.kisi.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const kisiWithIdOnly = await prisma.kisi.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends KisiFindManyArgs>(args?: SelectSubset<T, KisiFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KisiPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Kisi.
     * @param {KisiCreateArgs} args - Arguments to create a Kisi.
     * @example
     * // Create one Kisi
     * const Kisi = await prisma.kisi.create({
     *   data: {
     *     // ... data to create a Kisi
     *   }
     * })
     * 
     */
    create<T extends KisiCreateArgs>(args: SelectSubset<T, KisiCreateArgs<ExtArgs>>): Prisma__KisiClient<$Result.GetResult<Prisma.$KisiPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Kisis.
     * @param {KisiCreateManyArgs} args - Arguments to create many Kisis.
     * @example
     * // Create many Kisis
     * const kisi = await prisma.kisi.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KisiCreateManyArgs>(args?: SelectSubset<T, KisiCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Kisis and returns the data saved in the database.
     * @param {KisiCreateManyAndReturnArgs} args - Arguments to create many Kisis.
     * @example
     * // Create many Kisis
     * const kisi = await prisma.kisi.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Kisis and only return the `Id`
     * const kisiWithIdOnly = await prisma.kisi.createManyAndReturn({ 
     *   select: { Id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KisiCreateManyAndReturnArgs>(args?: SelectSubset<T, KisiCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KisiPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Kisi.
     * @param {KisiDeleteArgs} args - Arguments to delete one Kisi.
     * @example
     * // Delete one Kisi
     * const Kisi = await prisma.kisi.delete({
     *   where: {
     *     // ... filter to delete one Kisi
     *   }
     * })
     * 
     */
    delete<T extends KisiDeleteArgs>(args: SelectSubset<T, KisiDeleteArgs<ExtArgs>>): Prisma__KisiClient<$Result.GetResult<Prisma.$KisiPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Kisi.
     * @param {KisiUpdateArgs} args - Arguments to update one Kisi.
     * @example
     * // Update one Kisi
     * const kisi = await prisma.kisi.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KisiUpdateArgs>(args: SelectSubset<T, KisiUpdateArgs<ExtArgs>>): Prisma__KisiClient<$Result.GetResult<Prisma.$KisiPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Kisis.
     * @param {KisiDeleteManyArgs} args - Arguments to filter Kisis to delete.
     * @example
     * // Delete a few Kisis
     * const { count } = await prisma.kisi.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KisiDeleteManyArgs>(args?: SelectSubset<T, KisiDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kisis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KisiUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kisis
     * const kisi = await prisma.kisi.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KisiUpdateManyArgs>(args: SelectSubset<T, KisiUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Kisi.
     * @param {KisiUpsertArgs} args - Arguments to update or create a Kisi.
     * @example
     * // Update or create a Kisi
     * const kisi = await prisma.kisi.upsert({
     *   create: {
     *     // ... data to create a Kisi
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Kisi we want to update
     *   }
     * })
     */
    upsert<T extends KisiUpsertArgs>(args: SelectSubset<T, KisiUpsertArgs<ExtArgs>>): Prisma__KisiClient<$Result.GetResult<Prisma.$KisiPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Kisis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KisiCountArgs} args - Arguments to filter Kisis to count.
     * @example
     * // Count the number of Kisis
     * const count = await prisma.kisi.count({
     *   where: {
     *     // ... the filter for the Kisis we want to count
     *   }
     * })
    **/
    count<T extends KisiCountArgs>(
      args?: Subset<T, KisiCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KisiCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Kisi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KisiAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KisiAggregateArgs>(args: Subset<T, KisiAggregateArgs>): Prisma.PrismaPromise<GetKisiAggregateType<T>>

    /**
     * Group by Kisi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KisiGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KisiGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KisiGroupByArgs['orderBy'] }
        : { orderBy?: KisiGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KisiGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKisiGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Kisi model
   */
  readonly fields: KisiFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Kisi.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KisiClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Competition<T extends CompetitionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompetitionDefaultArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Kisi model
   */ 
  interface KisiFieldRefs {
    readonly Id: FieldRef<"Kisi", 'String'>
    readonly DateCreate: FieldRef<"Kisi", 'DateTime'>
    readonly DateUpdate: FieldRef<"Kisi", 'DateTime'>
    readonly Header: FieldRef<"Kisi", 'String'>
    readonly Content: FieldRef<"Kisi", 'String'>
    readonly CompetitionId: FieldRef<"Kisi", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Kisi findUnique
   */
  export type KisiFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kisi
     */
    select?: KisiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KisiInclude<ExtArgs> | null
    /**
     * Filter, which Kisi to fetch.
     */
    where: KisiWhereUniqueInput
  }

  /**
   * Kisi findUniqueOrThrow
   */
  export type KisiFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kisi
     */
    select?: KisiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KisiInclude<ExtArgs> | null
    /**
     * Filter, which Kisi to fetch.
     */
    where: KisiWhereUniqueInput
  }

  /**
   * Kisi findFirst
   */
  export type KisiFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kisi
     */
    select?: KisiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KisiInclude<ExtArgs> | null
    /**
     * Filter, which Kisi to fetch.
     */
    where?: KisiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kisis to fetch.
     */
    orderBy?: KisiOrderByWithRelationInput | KisiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kisis.
     */
    cursor?: KisiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kisis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kisis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kisis.
     */
    distinct?: KisiScalarFieldEnum | KisiScalarFieldEnum[]
  }

  /**
   * Kisi findFirstOrThrow
   */
  export type KisiFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kisi
     */
    select?: KisiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KisiInclude<ExtArgs> | null
    /**
     * Filter, which Kisi to fetch.
     */
    where?: KisiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kisis to fetch.
     */
    orderBy?: KisiOrderByWithRelationInput | KisiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kisis.
     */
    cursor?: KisiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kisis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kisis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kisis.
     */
    distinct?: KisiScalarFieldEnum | KisiScalarFieldEnum[]
  }

  /**
   * Kisi findMany
   */
  export type KisiFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kisi
     */
    select?: KisiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KisiInclude<ExtArgs> | null
    /**
     * Filter, which Kisis to fetch.
     */
    where?: KisiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kisis to fetch.
     */
    orderBy?: KisiOrderByWithRelationInput | KisiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Kisis.
     */
    cursor?: KisiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kisis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kisis.
     */
    skip?: number
    distinct?: KisiScalarFieldEnum | KisiScalarFieldEnum[]
  }

  /**
   * Kisi create
   */
  export type KisiCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kisi
     */
    select?: KisiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KisiInclude<ExtArgs> | null
    /**
     * The data needed to create a Kisi.
     */
    data: XOR<KisiCreateInput, KisiUncheckedCreateInput>
  }

  /**
   * Kisi createMany
   */
  export type KisiCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Kisis.
     */
    data: KisiCreateManyInput | KisiCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Kisi createManyAndReturn
   */
  export type KisiCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kisi
     */
    select?: KisiSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Kisis.
     */
    data: KisiCreateManyInput | KisiCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KisiIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Kisi update
   */
  export type KisiUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kisi
     */
    select?: KisiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KisiInclude<ExtArgs> | null
    /**
     * The data needed to update a Kisi.
     */
    data: XOR<KisiUpdateInput, KisiUncheckedUpdateInput>
    /**
     * Choose, which Kisi to update.
     */
    where: KisiWhereUniqueInput
  }

  /**
   * Kisi updateMany
   */
  export type KisiUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Kisis.
     */
    data: XOR<KisiUpdateManyMutationInput, KisiUncheckedUpdateManyInput>
    /**
     * Filter which Kisis to update
     */
    where?: KisiWhereInput
  }

  /**
   * Kisi upsert
   */
  export type KisiUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kisi
     */
    select?: KisiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KisiInclude<ExtArgs> | null
    /**
     * The filter to search for the Kisi to update in case it exists.
     */
    where: KisiWhereUniqueInput
    /**
     * In case the Kisi found by the `where` argument doesn't exist, create a new Kisi with this data.
     */
    create: XOR<KisiCreateInput, KisiUncheckedCreateInput>
    /**
     * In case the Kisi was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KisiUpdateInput, KisiUncheckedUpdateInput>
  }

  /**
   * Kisi delete
   */
  export type KisiDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kisi
     */
    select?: KisiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KisiInclude<ExtArgs> | null
    /**
     * Filter which Kisi to delete.
     */
    where: KisiWhereUniqueInput
  }

  /**
   * Kisi deleteMany
   */
  export type KisiDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kisis to delete
     */
    where?: KisiWhereInput
  }

  /**
   * Kisi without action
   */
  export type KisiDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kisi
     */
    select?: KisiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KisiInclude<ExtArgs> | null
  }


  /**
   * Model Tryout
   */

  export type AggregateTryout = {
    _count: TryoutCountAggregateOutputType | null
    _min: TryoutMinAggregateOutputType | null
    _max: TryoutMaxAggregateOutputType | null
  }

  export type TryoutMinAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Name: string | null
    CompetitionId: string | null
  }

  export type TryoutMaxAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Name: string | null
    CompetitionId: string | null
  }

  export type TryoutCountAggregateOutputType = {
    Id: number
    DateCreate: number
    DateUpdate: number
    Name: number
    CompetitionId: number
    _all: number
  }


  export type TryoutMinAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    CompetitionId?: true
  }

  export type TryoutMaxAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    CompetitionId?: true
  }

  export type TryoutCountAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    CompetitionId?: true
    _all?: true
  }

  export type TryoutAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tryout to aggregate.
     */
    where?: TryoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tryouts to fetch.
     */
    orderBy?: TryoutOrderByWithRelationInput | TryoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TryoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tryouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tryouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tryouts
    **/
    _count?: true | TryoutCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TryoutMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TryoutMaxAggregateInputType
  }

  export type GetTryoutAggregateType<T extends TryoutAggregateArgs> = {
        [P in keyof T & keyof AggregateTryout]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTryout[P]>
      : GetScalarType<T[P], AggregateTryout[P]>
  }




  export type TryoutGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TryoutWhereInput
    orderBy?: TryoutOrderByWithAggregationInput | TryoutOrderByWithAggregationInput[]
    by: TryoutScalarFieldEnum[] | TryoutScalarFieldEnum
    having?: TryoutScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TryoutCountAggregateInputType | true
    _min?: TryoutMinAggregateInputType
    _max?: TryoutMaxAggregateInputType
  }

  export type TryoutGroupByOutputType = {
    Id: string
    DateCreate: Date
    DateUpdate: Date | null
    Name: string
    CompetitionId: string
    _count: TryoutCountAggregateOutputType | null
    _min: TryoutMinAggregateOutputType | null
    _max: TryoutMaxAggregateOutputType | null
  }

  type GetTryoutGroupByPayload<T extends TryoutGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TryoutGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TryoutGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TryoutGroupByOutputType[P]>
            : GetScalarType<T[P], TryoutGroupByOutputType[P]>
        }
      >
    >


  export type TryoutSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    CompetitionId?: boolean
    Question?: boolean | Tryout$QuestionArgs<ExtArgs>
    Competition?: boolean | CompetitionDefaultArgs<ExtArgs>
    _count?: boolean | TryoutCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tryout"]>

  export type TryoutSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    CompetitionId?: boolean
    Competition?: boolean | CompetitionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tryout"]>

  export type TryoutSelectScalar = {
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    CompetitionId?: boolean
  }

  export type TryoutInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Question?: boolean | Tryout$QuestionArgs<ExtArgs>
    Competition?: boolean | CompetitionDefaultArgs<ExtArgs>
    _count?: boolean | TryoutCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TryoutIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Competition?: boolean | CompetitionDefaultArgs<ExtArgs>
  }

  export type $TryoutPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tryout"
    objects: {
      Question: Prisma.$QuestionPayload<ExtArgs>[]
      Competition: Prisma.$CompetitionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: string
      DateCreate: Date
      DateUpdate: Date | null
      Name: string
      CompetitionId: string
    }, ExtArgs["result"]["tryout"]>
    composites: {}
  }

  type TryoutGetPayload<S extends boolean | null | undefined | TryoutDefaultArgs> = $Result.GetResult<Prisma.$TryoutPayload, S>

  type TryoutCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TryoutFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TryoutCountAggregateInputType | true
    }

  export interface TryoutDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tryout'], meta: { name: 'Tryout' } }
    /**
     * Find zero or one Tryout that matches the filter.
     * @param {TryoutFindUniqueArgs} args - Arguments to find a Tryout
     * @example
     * // Get one Tryout
     * const tryout = await prisma.tryout.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TryoutFindUniqueArgs>(args: SelectSubset<T, TryoutFindUniqueArgs<ExtArgs>>): Prisma__TryoutClient<$Result.GetResult<Prisma.$TryoutPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tryout that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TryoutFindUniqueOrThrowArgs} args - Arguments to find a Tryout
     * @example
     * // Get one Tryout
     * const tryout = await prisma.tryout.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TryoutFindUniqueOrThrowArgs>(args: SelectSubset<T, TryoutFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TryoutClient<$Result.GetResult<Prisma.$TryoutPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tryout that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TryoutFindFirstArgs} args - Arguments to find a Tryout
     * @example
     * // Get one Tryout
     * const tryout = await prisma.tryout.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TryoutFindFirstArgs>(args?: SelectSubset<T, TryoutFindFirstArgs<ExtArgs>>): Prisma__TryoutClient<$Result.GetResult<Prisma.$TryoutPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tryout that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TryoutFindFirstOrThrowArgs} args - Arguments to find a Tryout
     * @example
     * // Get one Tryout
     * const tryout = await prisma.tryout.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TryoutFindFirstOrThrowArgs>(args?: SelectSubset<T, TryoutFindFirstOrThrowArgs<ExtArgs>>): Prisma__TryoutClient<$Result.GetResult<Prisma.$TryoutPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tryouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TryoutFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tryouts
     * const tryouts = await prisma.tryout.findMany()
     * 
     * // Get first 10 Tryouts
     * const tryouts = await prisma.tryout.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const tryoutWithIdOnly = await prisma.tryout.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends TryoutFindManyArgs>(args?: SelectSubset<T, TryoutFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TryoutPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tryout.
     * @param {TryoutCreateArgs} args - Arguments to create a Tryout.
     * @example
     * // Create one Tryout
     * const Tryout = await prisma.tryout.create({
     *   data: {
     *     // ... data to create a Tryout
     *   }
     * })
     * 
     */
    create<T extends TryoutCreateArgs>(args: SelectSubset<T, TryoutCreateArgs<ExtArgs>>): Prisma__TryoutClient<$Result.GetResult<Prisma.$TryoutPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tryouts.
     * @param {TryoutCreateManyArgs} args - Arguments to create many Tryouts.
     * @example
     * // Create many Tryouts
     * const tryout = await prisma.tryout.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TryoutCreateManyArgs>(args?: SelectSubset<T, TryoutCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tryouts and returns the data saved in the database.
     * @param {TryoutCreateManyAndReturnArgs} args - Arguments to create many Tryouts.
     * @example
     * // Create many Tryouts
     * const tryout = await prisma.tryout.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tryouts and only return the `Id`
     * const tryoutWithIdOnly = await prisma.tryout.createManyAndReturn({ 
     *   select: { Id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TryoutCreateManyAndReturnArgs>(args?: SelectSubset<T, TryoutCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TryoutPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tryout.
     * @param {TryoutDeleteArgs} args - Arguments to delete one Tryout.
     * @example
     * // Delete one Tryout
     * const Tryout = await prisma.tryout.delete({
     *   where: {
     *     // ... filter to delete one Tryout
     *   }
     * })
     * 
     */
    delete<T extends TryoutDeleteArgs>(args: SelectSubset<T, TryoutDeleteArgs<ExtArgs>>): Prisma__TryoutClient<$Result.GetResult<Prisma.$TryoutPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tryout.
     * @param {TryoutUpdateArgs} args - Arguments to update one Tryout.
     * @example
     * // Update one Tryout
     * const tryout = await prisma.tryout.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TryoutUpdateArgs>(args: SelectSubset<T, TryoutUpdateArgs<ExtArgs>>): Prisma__TryoutClient<$Result.GetResult<Prisma.$TryoutPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tryouts.
     * @param {TryoutDeleteManyArgs} args - Arguments to filter Tryouts to delete.
     * @example
     * // Delete a few Tryouts
     * const { count } = await prisma.tryout.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TryoutDeleteManyArgs>(args?: SelectSubset<T, TryoutDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tryouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TryoutUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tryouts
     * const tryout = await prisma.tryout.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TryoutUpdateManyArgs>(args: SelectSubset<T, TryoutUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tryout.
     * @param {TryoutUpsertArgs} args - Arguments to update or create a Tryout.
     * @example
     * // Update or create a Tryout
     * const tryout = await prisma.tryout.upsert({
     *   create: {
     *     // ... data to create a Tryout
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tryout we want to update
     *   }
     * })
     */
    upsert<T extends TryoutUpsertArgs>(args: SelectSubset<T, TryoutUpsertArgs<ExtArgs>>): Prisma__TryoutClient<$Result.GetResult<Prisma.$TryoutPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tryouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TryoutCountArgs} args - Arguments to filter Tryouts to count.
     * @example
     * // Count the number of Tryouts
     * const count = await prisma.tryout.count({
     *   where: {
     *     // ... the filter for the Tryouts we want to count
     *   }
     * })
    **/
    count<T extends TryoutCountArgs>(
      args?: Subset<T, TryoutCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TryoutCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tryout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TryoutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TryoutAggregateArgs>(args: Subset<T, TryoutAggregateArgs>): Prisma.PrismaPromise<GetTryoutAggregateType<T>>

    /**
     * Group by Tryout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TryoutGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TryoutGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TryoutGroupByArgs['orderBy'] }
        : { orderBy?: TryoutGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TryoutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTryoutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tryout model
   */
  readonly fields: TryoutFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tryout.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TryoutClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Question<T extends Tryout$QuestionArgs<ExtArgs> = {}>(args?: Subset<T, Tryout$QuestionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany"> | Null>
    Competition<T extends CompetitionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompetitionDefaultArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tryout model
   */ 
  interface TryoutFieldRefs {
    readonly Id: FieldRef<"Tryout", 'String'>
    readonly DateCreate: FieldRef<"Tryout", 'DateTime'>
    readonly DateUpdate: FieldRef<"Tryout", 'DateTime'>
    readonly Name: FieldRef<"Tryout", 'String'>
    readonly CompetitionId: FieldRef<"Tryout", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tryout findUnique
   */
  export type TryoutFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tryout
     */
    select?: TryoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryoutInclude<ExtArgs> | null
    /**
     * Filter, which Tryout to fetch.
     */
    where: TryoutWhereUniqueInput
  }

  /**
   * Tryout findUniqueOrThrow
   */
  export type TryoutFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tryout
     */
    select?: TryoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryoutInclude<ExtArgs> | null
    /**
     * Filter, which Tryout to fetch.
     */
    where: TryoutWhereUniqueInput
  }

  /**
   * Tryout findFirst
   */
  export type TryoutFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tryout
     */
    select?: TryoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryoutInclude<ExtArgs> | null
    /**
     * Filter, which Tryout to fetch.
     */
    where?: TryoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tryouts to fetch.
     */
    orderBy?: TryoutOrderByWithRelationInput | TryoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tryouts.
     */
    cursor?: TryoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tryouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tryouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tryouts.
     */
    distinct?: TryoutScalarFieldEnum | TryoutScalarFieldEnum[]
  }

  /**
   * Tryout findFirstOrThrow
   */
  export type TryoutFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tryout
     */
    select?: TryoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryoutInclude<ExtArgs> | null
    /**
     * Filter, which Tryout to fetch.
     */
    where?: TryoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tryouts to fetch.
     */
    orderBy?: TryoutOrderByWithRelationInput | TryoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tryouts.
     */
    cursor?: TryoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tryouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tryouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tryouts.
     */
    distinct?: TryoutScalarFieldEnum | TryoutScalarFieldEnum[]
  }

  /**
   * Tryout findMany
   */
  export type TryoutFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tryout
     */
    select?: TryoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryoutInclude<ExtArgs> | null
    /**
     * Filter, which Tryouts to fetch.
     */
    where?: TryoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tryouts to fetch.
     */
    orderBy?: TryoutOrderByWithRelationInput | TryoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tryouts.
     */
    cursor?: TryoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tryouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tryouts.
     */
    skip?: number
    distinct?: TryoutScalarFieldEnum | TryoutScalarFieldEnum[]
  }

  /**
   * Tryout create
   */
  export type TryoutCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tryout
     */
    select?: TryoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryoutInclude<ExtArgs> | null
    /**
     * The data needed to create a Tryout.
     */
    data: XOR<TryoutCreateInput, TryoutUncheckedCreateInput>
  }

  /**
   * Tryout createMany
   */
  export type TryoutCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tryouts.
     */
    data: TryoutCreateManyInput | TryoutCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tryout createManyAndReturn
   */
  export type TryoutCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tryout
     */
    select?: TryoutSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tryouts.
     */
    data: TryoutCreateManyInput | TryoutCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryoutIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tryout update
   */
  export type TryoutUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tryout
     */
    select?: TryoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryoutInclude<ExtArgs> | null
    /**
     * The data needed to update a Tryout.
     */
    data: XOR<TryoutUpdateInput, TryoutUncheckedUpdateInput>
    /**
     * Choose, which Tryout to update.
     */
    where: TryoutWhereUniqueInput
  }

  /**
   * Tryout updateMany
   */
  export type TryoutUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tryouts.
     */
    data: XOR<TryoutUpdateManyMutationInput, TryoutUncheckedUpdateManyInput>
    /**
     * Filter which Tryouts to update
     */
    where?: TryoutWhereInput
  }

  /**
   * Tryout upsert
   */
  export type TryoutUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tryout
     */
    select?: TryoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryoutInclude<ExtArgs> | null
    /**
     * The filter to search for the Tryout to update in case it exists.
     */
    where: TryoutWhereUniqueInput
    /**
     * In case the Tryout found by the `where` argument doesn't exist, create a new Tryout with this data.
     */
    create: XOR<TryoutCreateInput, TryoutUncheckedCreateInput>
    /**
     * In case the Tryout was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TryoutUpdateInput, TryoutUncheckedUpdateInput>
  }

  /**
   * Tryout delete
   */
  export type TryoutDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tryout
     */
    select?: TryoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryoutInclude<ExtArgs> | null
    /**
     * Filter which Tryout to delete.
     */
    where: TryoutWhereUniqueInput
  }

  /**
   * Tryout deleteMany
   */
  export type TryoutDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tryouts to delete
     */
    where?: TryoutWhereInput
  }

  /**
   * Tryout.Question
   */
  export type Tryout$QuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Tryout without action
   */
  export type TryoutDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tryout
     */
    select?: TryoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TryoutInclude<ExtArgs> | null
  }


  /**
   * Model Question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionMinAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    TryoutId: string | null
    Content: string | null
  }

  export type QuestionMaxAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    TryoutId: string | null
    Content: string | null
  }

  export type QuestionCountAggregateOutputType = {
    Id: number
    DateCreate: number
    DateUpdate: number
    TryoutId: number
    Content: number
    _all: number
  }


  export type QuestionMinAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    TryoutId?: true
    Content?: true
  }

  export type QuestionMaxAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    TryoutId?: true
    Content?: true
  }

  export type QuestionCountAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    TryoutId?: true
    Content?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithAggregationInput | QuestionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    Id: string
    DateCreate: Date
    DateUpdate: Date | null
    TryoutId: string
    Content: string
    _count: QuestionCountAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    TryoutId?: boolean
    Content?: boolean
    Option?: boolean | Question$OptionArgs<ExtArgs>
    Tryout?: boolean | TryoutDefaultArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    TryoutId?: boolean
    Content?: boolean
    Tryout?: boolean | TryoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectScalar = {
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    TryoutId?: boolean
    Content?: boolean
  }

  export type QuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Option?: boolean | Question$OptionArgs<ExtArgs>
    Tryout?: boolean | TryoutDefaultArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Tryout?: boolean | TryoutDefaultArgs<ExtArgs>
  }

  export type $QuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Question"
    objects: {
      Option: Prisma.$OptionPayload<ExtArgs>[]
      Tryout: Prisma.$TryoutPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: string
      DateCreate: Date
      DateUpdate: Date | null
      TryoutId: string
      Content: string
    }, ExtArgs["result"]["question"]>
    composites: {}
  }

  type QuestionGetPayload<S extends boolean | null | undefined | QuestionDefaultArgs> = $Result.GetResult<Prisma.$QuestionPayload, S>

  type QuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QuestionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Question'], meta: { name: 'Question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionFindUniqueArgs>(args: SelectSubset<T, QuestionFindUniqueArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Question that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionFindFirstArgs>(args?: SelectSubset<T, QuestionFindFirstArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends QuestionFindManyArgs>(args?: SelectSubset<T, QuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
     */
    create<T extends QuestionCreateArgs>(args: SelectSubset<T, QuestionCreateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Questions.
     * @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionCreateManyArgs>(args?: SelectSubset<T, QuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Questions and returns the data saved in the database.
     * @param {QuestionCreateManyAndReturnArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Questions and only return the `Id`
     * const questionWithIdOnly = await prisma.question.createManyAndReturn({ 
     *   select: { Id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
     */
    delete<T extends QuestionDeleteArgs>(args: SelectSubset<T, QuestionDeleteArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionUpdateArgs>(args: SelectSubset<T, QuestionUpdateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionDeleteManyArgs>(args?: SelectSubset<T, QuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionUpdateManyArgs>(args: SelectSubset<T, QuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
     */
    upsert<T extends QuestionUpsertArgs>(args: SelectSubset<T, QuestionUpsertArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Question model
   */
  readonly fields: QuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Option<T extends Question$OptionArgs<ExtArgs> = {}>(args?: Subset<T, Question$OptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findMany"> | Null>
    Tryout<T extends TryoutDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TryoutDefaultArgs<ExtArgs>>): Prisma__TryoutClient<$Result.GetResult<Prisma.$TryoutPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Question model
   */ 
  interface QuestionFieldRefs {
    readonly Id: FieldRef<"Question", 'String'>
    readonly DateCreate: FieldRef<"Question", 'DateTime'>
    readonly DateUpdate: FieldRef<"Question", 'DateTime'>
    readonly TryoutId: FieldRef<"Question", 'String'>
    readonly Content: FieldRef<"Question", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Question findUnique
   */
  export type QuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findFirst
   */
  export type QuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findMany
   */
  export type QuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question create
   */
  export type QuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }

  /**
   * Question createMany
   */
  export type QuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Question createManyAndReturn
   */
  export type QuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question update
   */
  export type QuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
  }

  /**
   * Question upsert
   */
  export type QuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }

  /**
   * Question delete
   */
  export type QuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
  }

  /**
   * Question.Option
   */
  export type Question$OptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    where?: OptionWhereInput
    orderBy?: OptionOrderByWithRelationInput | OptionOrderByWithRelationInput[]
    cursor?: OptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OptionScalarFieldEnum | OptionScalarFieldEnum[]
  }

  /**
   * Question without action
   */
  export type QuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
  }


  /**
   * Model Option
   */

  export type AggregateOption = {
    _count: OptionCountAggregateOutputType | null
    _min: OptionMinAggregateOutputType | null
    _max: OptionMaxAggregateOutputType | null
  }

  export type OptionMinAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Answer: string | null
    IsCorrect: boolean | null
    QuestionId: string | null
  }

  export type OptionMaxAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Answer: string | null
    IsCorrect: boolean | null
    QuestionId: string | null
  }

  export type OptionCountAggregateOutputType = {
    Id: number
    DateCreate: number
    DateUpdate: number
    Answer: number
    IsCorrect: number
    QuestionId: number
    _all: number
  }


  export type OptionMinAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Answer?: true
    IsCorrect?: true
    QuestionId?: true
  }

  export type OptionMaxAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Answer?: true
    IsCorrect?: true
    QuestionId?: true
  }

  export type OptionCountAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Answer?: true
    IsCorrect?: true
    QuestionId?: true
    _all?: true
  }

  export type OptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Option to aggregate.
     */
    where?: OptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     */
    orderBy?: OptionOrderByWithRelationInput | OptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Options
    **/
    _count?: true | OptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OptionMaxAggregateInputType
  }

  export type GetOptionAggregateType<T extends OptionAggregateArgs> = {
        [P in keyof T & keyof AggregateOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOption[P]>
      : GetScalarType<T[P], AggregateOption[P]>
  }




  export type OptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OptionWhereInput
    orderBy?: OptionOrderByWithAggregationInput | OptionOrderByWithAggregationInput[]
    by: OptionScalarFieldEnum[] | OptionScalarFieldEnum
    having?: OptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OptionCountAggregateInputType | true
    _min?: OptionMinAggregateInputType
    _max?: OptionMaxAggregateInputType
  }

  export type OptionGroupByOutputType = {
    Id: string
    DateCreate: Date
    DateUpdate: Date | null
    Answer: string
    IsCorrect: boolean
    QuestionId: string
    _count: OptionCountAggregateOutputType | null
    _min: OptionMinAggregateOutputType | null
    _max: OptionMaxAggregateOutputType | null
  }

  type GetOptionGroupByPayload<T extends OptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OptionGroupByOutputType[P]>
            : GetScalarType<T[P], OptionGroupByOutputType[P]>
        }
      >
    >


  export type OptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Answer?: boolean
    IsCorrect?: boolean
    QuestionId?: boolean
    Question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["option"]>

  export type OptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Answer?: boolean
    IsCorrect?: boolean
    QuestionId?: boolean
    Question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["option"]>

  export type OptionSelectScalar = {
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Answer?: boolean
    IsCorrect?: boolean
    QuestionId?: boolean
  }

  export type OptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Question?: boolean | QuestionDefaultArgs<ExtArgs>
  }
  export type OptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Question?: boolean | QuestionDefaultArgs<ExtArgs>
  }

  export type $OptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Option"
    objects: {
      Question: Prisma.$QuestionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: string
      DateCreate: Date
      DateUpdate: Date | null
      Answer: string
      IsCorrect: boolean
      QuestionId: string
    }, ExtArgs["result"]["option"]>
    composites: {}
  }

  type OptionGetPayload<S extends boolean | null | undefined | OptionDefaultArgs> = $Result.GetResult<Prisma.$OptionPayload, S>

  type OptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OptionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OptionCountAggregateInputType | true
    }

  export interface OptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Option'], meta: { name: 'Option' } }
    /**
     * Find zero or one Option that matches the filter.
     * @param {OptionFindUniqueArgs} args - Arguments to find a Option
     * @example
     * // Get one Option
     * const option = await prisma.option.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OptionFindUniqueArgs>(args: SelectSubset<T, OptionFindUniqueArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Option that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OptionFindUniqueOrThrowArgs} args - Arguments to find a Option
     * @example
     * // Get one Option
     * const option = await prisma.option.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OptionFindUniqueOrThrowArgs>(args: SelectSubset<T, OptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Option that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionFindFirstArgs} args - Arguments to find a Option
     * @example
     * // Get one Option
     * const option = await prisma.option.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OptionFindFirstArgs>(args?: SelectSubset<T, OptionFindFirstArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Option that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionFindFirstOrThrowArgs} args - Arguments to find a Option
     * @example
     * // Get one Option
     * const option = await prisma.option.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OptionFindFirstOrThrowArgs>(args?: SelectSubset<T, OptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Options that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Options
     * const options = await prisma.option.findMany()
     * 
     * // Get first 10 Options
     * const options = await prisma.option.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const optionWithIdOnly = await prisma.option.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends OptionFindManyArgs>(args?: SelectSubset<T, OptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Option.
     * @param {OptionCreateArgs} args - Arguments to create a Option.
     * @example
     * // Create one Option
     * const Option = await prisma.option.create({
     *   data: {
     *     // ... data to create a Option
     *   }
     * })
     * 
     */
    create<T extends OptionCreateArgs>(args: SelectSubset<T, OptionCreateArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Options.
     * @param {OptionCreateManyArgs} args - Arguments to create many Options.
     * @example
     * // Create many Options
     * const option = await prisma.option.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OptionCreateManyArgs>(args?: SelectSubset<T, OptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Options and returns the data saved in the database.
     * @param {OptionCreateManyAndReturnArgs} args - Arguments to create many Options.
     * @example
     * // Create many Options
     * const option = await prisma.option.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Options and only return the `Id`
     * const optionWithIdOnly = await prisma.option.createManyAndReturn({ 
     *   select: { Id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OptionCreateManyAndReturnArgs>(args?: SelectSubset<T, OptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Option.
     * @param {OptionDeleteArgs} args - Arguments to delete one Option.
     * @example
     * // Delete one Option
     * const Option = await prisma.option.delete({
     *   where: {
     *     // ... filter to delete one Option
     *   }
     * })
     * 
     */
    delete<T extends OptionDeleteArgs>(args: SelectSubset<T, OptionDeleteArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Option.
     * @param {OptionUpdateArgs} args - Arguments to update one Option.
     * @example
     * // Update one Option
     * const option = await prisma.option.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OptionUpdateArgs>(args: SelectSubset<T, OptionUpdateArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Options.
     * @param {OptionDeleteManyArgs} args - Arguments to filter Options to delete.
     * @example
     * // Delete a few Options
     * const { count } = await prisma.option.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OptionDeleteManyArgs>(args?: SelectSubset<T, OptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Options
     * const option = await prisma.option.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OptionUpdateManyArgs>(args: SelectSubset<T, OptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Option.
     * @param {OptionUpsertArgs} args - Arguments to update or create a Option.
     * @example
     * // Update or create a Option
     * const option = await prisma.option.upsert({
     *   create: {
     *     // ... data to create a Option
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Option we want to update
     *   }
     * })
     */
    upsert<T extends OptionUpsertArgs>(args: SelectSubset<T, OptionUpsertArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionCountArgs} args - Arguments to filter Options to count.
     * @example
     * // Count the number of Options
     * const count = await prisma.option.count({
     *   where: {
     *     // ... the filter for the Options we want to count
     *   }
     * })
    **/
    count<T extends OptionCountArgs>(
      args?: Subset<T, OptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Option.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OptionAggregateArgs>(args: Subset<T, OptionAggregateArgs>): Prisma.PrismaPromise<GetOptionAggregateType<T>>

    /**
     * Group by Option.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OptionGroupByArgs['orderBy'] }
        : { orderBy?: OptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Option model
   */
  readonly fields: OptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Option.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Option model
   */ 
  interface OptionFieldRefs {
    readonly Id: FieldRef<"Option", 'String'>
    readonly DateCreate: FieldRef<"Option", 'DateTime'>
    readonly DateUpdate: FieldRef<"Option", 'DateTime'>
    readonly Answer: FieldRef<"Option", 'String'>
    readonly IsCorrect: FieldRef<"Option", 'Boolean'>
    readonly QuestionId: FieldRef<"Option", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Option findUnique
   */
  export type OptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * Filter, which Option to fetch.
     */
    where: OptionWhereUniqueInput
  }

  /**
   * Option findUniqueOrThrow
   */
  export type OptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * Filter, which Option to fetch.
     */
    where: OptionWhereUniqueInput
  }

  /**
   * Option findFirst
   */
  export type OptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * Filter, which Option to fetch.
     */
    where?: OptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     */
    orderBy?: OptionOrderByWithRelationInput | OptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Options.
     */
    cursor?: OptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Options.
     */
    distinct?: OptionScalarFieldEnum | OptionScalarFieldEnum[]
  }

  /**
   * Option findFirstOrThrow
   */
  export type OptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * Filter, which Option to fetch.
     */
    where?: OptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     */
    orderBy?: OptionOrderByWithRelationInput | OptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Options.
     */
    cursor?: OptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Options.
     */
    distinct?: OptionScalarFieldEnum | OptionScalarFieldEnum[]
  }

  /**
   * Option findMany
   */
  export type OptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * Filter, which Options to fetch.
     */
    where?: OptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     */
    orderBy?: OptionOrderByWithRelationInput | OptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Options.
     */
    cursor?: OptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     */
    skip?: number
    distinct?: OptionScalarFieldEnum | OptionScalarFieldEnum[]
  }

  /**
   * Option create
   */
  export type OptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * The data needed to create a Option.
     */
    data: XOR<OptionCreateInput, OptionUncheckedCreateInput>
  }

  /**
   * Option createMany
   */
  export type OptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Options.
     */
    data: OptionCreateManyInput | OptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Option createManyAndReturn
   */
  export type OptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Options.
     */
    data: OptionCreateManyInput | OptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Option update
   */
  export type OptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * The data needed to update a Option.
     */
    data: XOR<OptionUpdateInput, OptionUncheckedUpdateInput>
    /**
     * Choose, which Option to update.
     */
    where: OptionWhereUniqueInput
  }

  /**
   * Option updateMany
   */
  export type OptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Options.
     */
    data: XOR<OptionUpdateManyMutationInput, OptionUncheckedUpdateManyInput>
    /**
     * Filter which Options to update
     */
    where?: OptionWhereInput
  }

  /**
   * Option upsert
   */
  export type OptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * The filter to search for the Option to update in case it exists.
     */
    where: OptionWhereUniqueInput
    /**
     * In case the Option found by the `where` argument doesn't exist, create a new Option with this data.
     */
    create: XOR<OptionCreateInput, OptionUncheckedCreateInput>
    /**
     * In case the Option was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OptionUpdateInput, OptionUncheckedUpdateInput>
  }

  /**
   * Option delete
   */
  export type OptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * Filter which Option to delete.
     */
    where: OptionWhereUniqueInput
  }

  /**
   * Option deleteMany
   */
  export type OptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Options to delete
     */
    where?: OptionWhereInput
  }

  /**
   * Option without action
   */
  export type OptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    Date: number | null
    Amount: number | null
  }

  export type PaymentSumAggregateOutputType = {
    Date: number | null
    Amount: number | null
  }

  export type PaymentMinAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Invoice: string | null
    Date: number | null
    Amount: number | null
    UserId: string | null
    Status: $Enums.PaymentType | null
  }

  export type PaymentMaxAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Invoice: string | null
    Date: number | null
    Amount: number | null
    UserId: string | null
    Status: $Enums.PaymentType | null
  }

  export type PaymentCountAggregateOutputType = {
    Id: number
    DateCreate: number
    DateUpdate: number
    Invoice: number
    Date: number
    Amount: number
    UserId: number
    Status: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    Date?: true
    Amount?: true
  }

  export type PaymentSumAggregateInputType = {
    Date?: true
    Amount?: true
  }

  export type PaymentMinAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Invoice?: true
    Date?: true
    Amount?: true
    UserId?: true
    Status?: true
  }

  export type PaymentMaxAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Invoice?: true
    Date?: true
    Amount?: true
    UserId?: true
    Status?: true
  }

  export type PaymentCountAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Invoice?: true
    Date?: true
    Amount?: true
    UserId?: true
    Status?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    Id: string
    DateCreate: Date
    DateUpdate: Date | null
    Invoice: string
    Date: number
    Amount: number
    UserId: string | null
    Status: $Enums.PaymentType
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Invoice?: boolean
    Date?: boolean
    Amount?: boolean
    UserId?: boolean
    Status?: boolean
    User?: boolean | Payment$UserArgs<ExtArgs>
    CompetitionParticipant?: boolean | Payment$CompetitionParticipantArgs<ExtArgs>
    PaymentStatusHistory?: boolean | Payment$PaymentStatusHistoryArgs<ExtArgs>
    _count?: boolean | PaymentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Invoice?: boolean
    Date?: boolean
    Amount?: boolean
    UserId?: boolean
    Status?: boolean
    User?: boolean | Payment$UserArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Invoice?: boolean
    Date?: boolean
    Amount?: boolean
    UserId?: boolean
    Status?: boolean
  }

  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | Payment$UserArgs<ExtArgs>
    CompetitionParticipant?: boolean | Payment$CompetitionParticipantArgs<ExtArgs>
    PaymentStatusHistory?: boolean | Payment$PaymentStatusHistoryArgs<ExtArgs>
    _count?: boolean | PaymentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | Payment$UserArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      User: Prisma.$UserPayload<ExtArgs> | null
      CompetitionParticipant: Prisma.$CompetitionParticipantPayload<ExtArgs>[]
      PaymentStatusHistory: Prisma.$PaymentStatusHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: string
      DateCreate: Date
      DateUpdate: Date | null
      Invoice: string
      Date: number
      Amount: number
      UserId: string | null
      Status: $Enums.PaymentType
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `Id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({ 
     *   select: { Id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends Payment$UserArgs<ExtArgs> = {}>(args?: Subset<T, Payment$UserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    CompetitionParticipant<T extends Payment$CompetitionParticipantArgs<ExtArgs> = {}>(args?: Subset<T, Payment$CompetitionParticipantArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    PaymentStatusHistory<T extends Payment$PaymentStatusHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Payment$PaymentStatusHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentStatusHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */ 
  interface PaymentFieldRefs {
    readonly Id: FieldRef<"Payment", 'String'>
    readonly DateCreate: FieldRef<"Payment", 'DateTime'>
    readonly DateUpdate: FieldRef<"Payment", 'DateTime'>
    readonly Invoice: FieldRef<"Payment", 'String'>
    readonly Date: FieldRef<"Payment", 'Int'>
    readonly Amount: FieldRef<"Payment", 'Int'>
    readonly UserId: FieldRef<"Payment", 'String'>
    readonly Status: FieldRef<"Payment", 'PaymentType'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
  }

  /**
   * Payment.User
   */
  export type Payment$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Payment.CompetitionParticipant
   */
  export type Payment$CompetitionParticipantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionParticipant
     */
    select?: CompetitionParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionParticipantInclude<ExtArgs> | null
    where?: CompetitionParticipantWhereInput
    orderBy?: CompetitionParticipantOrderByWithRelationInput | CompetitionParticipantOrderByWithRelationInput[]
    cursor?: CompetitionParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompetitionParticipantScalarFieldEnum | CompetitionParticipantScalarFieldEnum[]
  }

  /**
   * Payment.PaymentStatusHistory
   */
  export type Payment$PaymentStatusHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentStatusHistory
     */
    select?: PaymentStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentStatusHistoryInclude<ExtArgs> | null
    where?: PaymentStatusHistoryWhereInput
    orderBy?: PaymentStatusHistoryOrderByWithRelationInput | PaymentStatusHistoryOrderByWithRelationInput[]
    cursor?: PaymentStatusHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentStatusHistoryScalarFieldEnum | PaymentStatusHistoryScalarFieldEnum[]
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model PaymentStatusHistory
   */

  export type AggregatePaymentStatusHistory = {
    _count: PaymentStatusHistoryCountAggregateOutputType | null
    _avg: PaymentStatusHistoryAvgAggregateOutputType | null
    _sum: PaymentStatusHistorySumAggregateOutputType | null
    _min: PaymentStatusHistoryMinAggregateOutputType | null
    _max: PaymentStatusHistoryMaxAggregateOutputType | null
  }

  export type PaymentStatusHistoryAvgAggregateOutputType = {
    Date: number | null
  }

  export type PaymentStatusHistorySumAggregateOutputType = {
    Date: number | null
  }

  export type PaymentStatusHistoryMinAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    PaymentId: string | null
    Status: $Enums.PaymentType | null
    Date: number | null
  }

  export type PaymentStatusHistoryMaxAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    PaymentId: string | null
    Status: $Enums.PaymentType | null
    Date: number | null
  }

  export type PaymentStatusHistoryCountAggregateOutputType = {
    Id: number
    DateCreate: number
    DateUpdate: number
    PaymentId: number
    Status: number
    Date: number
    _all: number
  }


  export type PaymentStatusHistoryAvgAggregateInputType = {
    Date?: true
  }

  export type PaymentStatusHistorySumAggregateInputType = {
    Date?: true
  }

  export type PaymentStatusHistoryMinAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    PaymentId?: true
    Status?: true
    Date?: true
  }

  export type PaymentStatusHistoryMaxAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    PaymentId?: true
    Status?: true
    Date?: true
  }

  export type PaymentStatusHistoryCountAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    PaymentId?: true
    Status?: true
    Date?: true
    _all?: true
  }

  export type PaymentStatusHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentStatusHistory to aggregate.
     */
    where?: PaymentStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentStatusHistories to fetch.
     */
    orderBy?: PaymentStatusHistoryOrderByWithRelationInput | PaymentStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentStatusHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentStatusHistories
    **/
    _count?: true | PaymentStatusHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentStatusHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentStatusHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentStatusHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentStatusHistoryMaxAggregateInputType
  }

  export type GetPaymentStatusHistoryAggregateType<T extends PaymentStatusHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentStatusHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentStatusHistory[P]>
      : GetScalarType<T[P], AggregatePaymentStatusHistory[P]>
  }




  export type PaymentStatusHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentStatusHistoryWhereInput
    orderBy?: PaymentStatusHistoryOrderByWithAggregationInput | PaymentStatusHistoryOrderByWithAggregationInput[]
    by: PaymentStatusHistoryScalarFieldEnum[] | PaymentStatusHistoryScalarFieldEnum
    having?: PaymentStatusHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentStatusHistoryCountAggregateInputType | true
    _avg?: PaymentStatusHistoryAvgAggregateInputType
    _sum?: PaymentStatusHistorySumAggregateInputType
    _min?: PaymentStatusHistoryMinAggregateInputType
    _max?: PaymentStatusHistoryMaxAggregateInputType
  }

  export type PaymentStatusHistoryGroupByOutputType = {
    Id: string
    DateCreate: Date
    DateUpdate: Date | null
    PaymentId: string
    Status: $Enums.PaymentType
    Date: number
    _count: PaymentStatusHistoryCountAggregateOutputType | null
    _avg: PaymentStatusHistoryAvgAggregateOutputType | null
    _sum: PaymentStatusHistorySumAggregateOutputType | null
    _min: PaymentStatusHistoryMinAggregateOutputType | null
    _max: PaymentStatusHistoryMaxAggregateOutputType | null
  }

  type GetPaymentStatusHistoryGroupByPayload<T extends PaymentStatusHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentStatusHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentStatusHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentStatusHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentStatusHistoryGroupByOutputType[P]>
        }
      >
    >


  export type PaymentStatusHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    PaymentId?: boolean
    Status?: boolean
    Date?: boolean
    Payment?: boolean | PaymentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentStatusHistory"]>

  export type PaymentStatusHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    PaymentId?: boolean
    Status?: boolean
    Date?: boolean
    Payment?: boolean | PaymentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentStatusHistory"]>

  export type PaymentStatusHistorySelectScalar = {
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    PaymentId?: boolean
    Status?: boolean
    Date?: boolean
  }

  export type PaymentStatusHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Payment?: boolean | PaymentDefaultArgs<ExtArgs>
  }
  export type PaymentStatusHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Payment?: boolean | PaymentDefaultArgs<ExtArgs>
  }

  export type $PaymentStatusHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentStatusHistory"
    objects: {
      Payment: Prisma.$PaymentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: string
      DateCreate: Date
      DateUpdate: Date | null
      PaymentId: string
      Status: $Enums.PaymentType
      Date: number
    }, ExtArgs["result"]["paymentStatusHistory"]>
    composites: {}
  }

  type PaymentStatusHistoryGetPayload<S extends boolean | null | undefined | PaymentStatusHistoryDefaultArgs> = $Result.GetResult<Prisma.$PaymentStatusHistoryPayload, S>

  type PaymentStatusHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentStatusHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentStatusHistoryCountAggregateInputType | true
    }

  export interface PaymentStatusHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentStatusHistory'], meta: { name: 'PaymentStatusHistory' } }
    /**
     * Find zero or one PaymentStatusHistory that matches the filter.
     * @param {PaymentStatusHistoryFindUniqueArgs} args - Arguments to find a PaymentStatusHistory
     * @example
     * // Get one PaymentStatusHistory
     * const paymentStatusHistory = await prisma.paymentStatusHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentStatusHistoryFindUniqueArgs>(args: SelectSubset<T, PaymentStatusHistoryFindUniqueArgs<ExtArgs>>): Prisma__PaymentStatusHistoryClient<$Result.GetResult<Prisma.$PaymentStatusHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PaymentStatusHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PaymentStatusHistoryFindUniqueOrThrowArgs} args - Arguments to find a PaymentStatusHistory
     * @example
     * // Get one PaymentStatusHistory
     * const paymentStatusHistory = await prisma.paymentStatusHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentStatusHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentStatusHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentStatusHistoryClient<$Result.GetResult<Prisma.$PaymentStatusHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PaymentStatusHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentStatusHistoryFindFirstArgs} args - Arguments to find a PaymentStatusHistory
     * @example
     * // Get one PaymentStatusHistory
     * const paymentStatusHistory = await prisma.paymentStatusHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentStatusHistoryFindFirstArgs>(args?: SelectSubset<T, PaymentStatusHistoryFindFirstArgs<ExtArgs>>): Prisma__PaymentStatusHistoryClient<$Result.GetResult<Prisma.$PaymentStatusHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PaymentStatusHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentStatusHistoryFindFirstOrThrowArgs} args - Arguments to find a PaymentStatusHistory
     * @example
     * // Get one PaymentStatusHistory
     * const paymentStatusHistory = await prisma.paymentStatusHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentStatusHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentStatusHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentStatusHistoryClient<$Result.GetResult<Prisma.$PaymentStatusHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PaymentStatusHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentStatusHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentStatusHistories
     * const paymentStatusHistories = await prisma.paymentStatusHistory.findMany()
     * 
     * // Get first 10 PaymentStatusHistories
     * const paymentStatusHistories = await prisma.paymentStatusHistory.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const paymentStatusHistoryWithIdOnly = await prisma.paymentStatusHistory.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends PaymentStatusHistoryFindManyArgs>(args?: SelectSubset<T, PaymentStatusHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentStatusHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PaymentStatusHistory.
     * @param {PaymentStatusHistoryCreateArgs} args - Arguments to create a PaymentStatusHistory.
     * @example
     * // Create one PaymentStatusHistory
     * const PaymentStatusHistory = await prisma.paymentStatusHistory.create({
     *   data: {
     *     // ... data to create a PaymentStatusHistory
     *   }
     * })
     * 
     */
    create<T extends PaymentStatusHistoryCreateArgs>(args: SelectSubset<T, PaymentStatusHistoryCreateArgs<ExtArgs>>): Prisma__PaymentStatusHistoryClient<$Result.GetResult<Prisma.$PaymentStatusHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PaymentStatusHistories.
     * @param {PaymentStatusHistoryCreateManyArgs} args - Arguments to create many PaymentStatusHistories.
     * @example
     * // Create many PaymentStatusHistories
     * const paymentStatusHistory = await prisma.paymentStatusHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentStatusHistoryCreateManyArgs>(args?: SelectSubset<T, PaymentStatusHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PaymentStatusHistories and returns the data saved in the database.
     * @param {PaymentStatusHistoryCreateManyAndReturnArgs} args - Arguments to create many PaymentStatusHistories.
     * @example
     * // Create many PaymentStatusHistories
     * const paymentStatusHistory = await prisma.paymentStatusHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PaymentStatusHistories and only return the `Id`
     * const paymentStatusHistoryWithIdOnly = await prisma.paymentStatusHistory.createManyAndReturn({ 
     *   select: { Id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentStatusHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentStatusHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentStatusHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PaymentStatusHistory.
     * @param {PaymentStatusHistoryDeleteArgs} args - Arguments to delete one PaymentStatusHistory.
     * @example
     * // Delete one PaymentStatusHistory
     * const PaymentStatusHistory = await prisma.paymentStatusHistory.delete({
     *   where: {
     *     // ... filter to delete one PaymentStatusHistory
     *   }
     * })
     * 
     */
    delete<T extends PaymentStatusHistoryDeleteArgs>(args: SelectSubset<T, PaymentStatusHistoryDeleteArgs<ExtArgs>>): Prisma__PaymentStatusHistoryClient<$Result.GetResult<Prisma.$PaymentStatusHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PaymentStatusHistory.
     * @param {PaymentStatusHistoryUpdateArgs} args - Arguments to update one PaymentStatusHistory.
     * @example
     * // Update one PaymentStatusHistory
     * const paymentStatusHistory = await prisma.paymentStatusHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentStatusHistoryUpdateArgs>(args: SelectSubset<T, PaymentStatusHistoryUpdateArgs<ExtArgs>>): Prisma__PaymentStatusHistoryClient<$Result.GetResult<Prisma.$PaymentStatusHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PaymentStatusHistories.
     * @param {PaymentStatusHistoryDeleteManyArgs} args - Arguments to filter PaymentStatusHistories to delete.
     * @example
     * // Delete a few PaymentStatusHistories
     * const { count } = await prisma.paymentStatusHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentStatusHistoryDeleteManyArgs>(args?: SelectSubset<T, PaymentStatusHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentStatusHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentStatusHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentStatusHistories
     * const paymentStatusHistory = await prisma.paymentStatusHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentStatusHistoryUpdateManyArgs>(args: SelectSubset<T, PaymentStatusHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PaymentStatusHistory.
     * @param {PaymentStatusHistoryUpsertArgs} args - Arguments to update or create a PaymentStatusHistory.
     * @example
     * // Update or create a PaymentStatusHistory
     * const paymentStatusHistory = await prisma.paymentStatusHistory.upsert({
     *   create: {
     *     // ... data to create a PaymentStatusHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentStatusHistory we want to update
     *   }
     * })
     */
    upsert<T extends PaymentStatusHistoryUpsertArgs>(args: SelectSubset<T, PaymentStatusHistoryUpsertArgs<ExtArgs>>): Prisma__PaymentStatusHistoryClient<$Result.GetResult<Prisma.$PaymentStatusHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PaymentStatusHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentStatusHistoryCountArgs} args - Arguments to filter PaymentStatusHistories to count.
     * @example
     * // Count the number of PaymentStatusHistories
     * const count = await prisma.paymentStatusHistory.count({
     *   where: {
     *     // ... the filter for the PaymentStatusHistories we want to count
     *   }
     * })
    **/
    count<T extends PaymentStatusHistoryCountArgs>(
      args?: Subset<T, PaymentStatusHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentStatusHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentStatusHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentStatusHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentStatusHistoryAggregateArgs>(args: Subset<T, PaymentStatusHistoryAggregateArgs>): Prisma.PrismaPromise<GetPaymentStatusHistoryAggregateType<T>>

    /**
     * Group by PaymentStatusHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentStatusHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentStatusHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentStatusHistoryGroupByArgs['orderBy'] }
        : { orderBy?: PaymentStatusHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentStatusHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentStatusHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentStatusHistory model
   */
  readonly fields: PaymentStatusHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentStatusHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentStatusHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Payment<T extends PaymentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PaymentDefaultArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentStatusHistory model
   */ 
  interface PaymentStatusHistoryFieldRefs {
    readonly Id: FieldRef<"PaymentStatusHistory", 'String'>
    readonly DateCreate: FieldRef<"PaymentStatusHistory", 'DateTime'>
    readonly DateUpdate: FieldRef<"PaymentStatusHistory", 'DateTime'>
    readonly PaymentId: FieldRef<"PaymentStatusHistory", 'String'>
    readonly Status: FieldRef<"PaymentStatusHistory", 'PaymentType'>
    readonly Date: FieldRef<"PaymentStatusHistory", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PaymentStatusHistory findUnique
   */
  export type PaymentStatusHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentStatusHistory
     */
    select?: PaymentStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PaymentStatusHistory to fetch.
     */
    where: PaymentStatusHistoryWhereUniqueInput
  }

  /**
   * PaymentStatusHistory findUniqueOrThrow
   */
  export type PaymentStatusHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentStatusHistory
     */
    select?: PaymentStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PaymentStatusHistory to fetch.
     */
    where: PaymentStatusHistoryWhereUniqueInput
  }

  /**
   * PaymentStatusHistory findFirst
   */
  export type PaymentStatusHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentStatusHistory
     */
    select?: PaymentStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PaymentStatusHistory to fetch.
     */
    where?: PaymentStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentStatusHistories to fetch.
     */
    orderBy?: PaymentStatusHistoryOrderByWithRelationInput | PaymentStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentStatusHistories.
     */
    cursor?: PaymentStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentStatusHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentStatusHistories.
     */
    distinct?: PaymentStatusHistoryScalarFieldEnum | PaymentStatusHistoryScalarFieldEnum[]
  }

  /**
   * PaymentStatusHistory findFirstOrThrow
   */
  export type PaymentStatusHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentStatusHistory
     */
    select?: PaymentStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PaymentStatusHistory to fetch.
     */
    where?: PaymentStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentStatusHistories to fetch.
     */
    orderBy?: PaymentStatusHistoryOrderByWithRelationInput | PaymentStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentStatusHistories.
     */
    cursor?: PaymentStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentStatusHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentStatusHistories.
     */
    distinct?: PaymentStatusHistoryScalarFieldEnum | PaymentStatusHistoryScalarFieldEnum[]
  }

  /**
   * PaymentStatusHistory findMany
   */
  export type PaymentStatusHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentStatusHistory
     */
    select?: PaymentStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PaymentStatusHistories to fetch.
     */
    where?: PaymentStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentStatusHistories to fetch.
     */
    orderBy?: PaymentStatusHistoryOrderByWithRelationInput | PaymentStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentStatusHistories.
     */
    cursor?: PaymentStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentStatusHistories.
     */
    skip?: number
    distinct?: PaymentStatusHistoryScalarFieldEnum | PaymentStatusHistoryScalarFieldEnum[]
  }

  /**
   * PaymentStatusHistory create
   */
  export type PaymentStatusHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentStatusHistory
     */
    select?: PaymentStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentStatusHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentStatusHistory.
     */
    data: XOR<PaymentStatusHistoryCreateInput, PaymentStatusHistoryUncheckedCreateInput>
  }

  /**
   * PaymentStatusHistory createMany
   */
  export type PaymentStatusHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentStatusHistories.
     */
    data: PaymentStatusHistoryCreateManyInput | PaymentStatusHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaymentStatusHistory createManyAndReturn
   */
  export type PaymentStatusHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentStatusHistory
     */
    select?: PaymentStatusHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PaymentStatusHistories.
     */
    data: PaymentStatusHistoryCreateManyInput | PaymentStatusHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentStatusHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaymentStatusHistory update
   */
  export type PaymentStatusHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentStatusHistory
     */
    select?: PaymentStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentStatusHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentStatusHistory.
     */
    data: XOR<PaymentStatusHistoryUpdateInput, PaymentStatusHistoryUncheckedUpdateInput>
    /**
     * Choose, which PaymentStatusHistory to update.
     */
    where: PaymentStatusHistoryWhereUniqueInput
  }

  /**
   * PaymentStatusHistory updateMany
   */
  export type PaymentStatusHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentStatusHistories.
     */
    data: XOR<PaymentStatusHistoryUpdateManyMutationInput, PaymentStatusHistoryUncheckedUpdateManyInput>
    /**
     * Filter which PaymentStatusHistories to update
     */
    where?: PaymentStatusHistoryWhereInput
  }

  /**
   * PaymentStatusHistory upsert
   */
  export type PaymentStatusHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentStatusHistory
     */
    select?: PaymentStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentStatusHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentStatusHistory to update in case it exists.
     */
    where: PaymentStatusHistoryWhereUniqueInput
    /**
     * In case the PaymentStatusHistory found by the `where` argument doesn't exist, create a new PaymentStatusHistory with this data.
     */
    create: XOR<PaymentStatusHistoryCreateInput, PaymentStatusHistoryUncheckedCreateInput>
    /**
     * In case the PaymentStatusHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentStatusHistoryUpdateInput, PaymentStatusHistoryUncheckedUpdateInput>
  }

  /**
   * PaymentStatusHistory delete
   */
  export type PaymentStatusHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentStatusHistory
     */
    select?: PaymentStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter which PaymentStatusHistory to delete.
     */
    where: PaymentStatusHistoryWhereUniqueInput
  }

  /**
   * PaymentStatusHistory deleteMany
   */
  export type PaymentStatusHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentStatusHistories to delete
     */
    where?: PaymentStatusHistoryWhereInput
  }

  /**
   * PaymentStatusHistory without action
   */
  export type PaymentStatusHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentStatusHistory
     */
    select?: PaymentStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentStatusHistoryInclude<ExtArgs> | null
  }


  /**
   * Model School
   */

  export type AggregateSchool = {
    _count: SchoolCountAggregateOutputType | null
    _min: SchoolMinAggregateOutputType | null
    _max: SchoolMaxAggregateOutputType | null
  }

  export type SchoolMinAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Name: string | null
    Stage: $Enums.StageType | null
    Subdistrict: $Enums.Subdistrict | null
    Ward: string | null
    Status: $Enums.StatusSchool | null
  }

  export type SchoolMaxAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Name: string | null
    Stage: $Enums.StageType | null
    Subdistrict: $Enums.Subdistrict | null
    Ward: string | null
    Status: $Enums.StatusSchool | null
  }

  export type SchoolCountAggregateOutputType = {
    Id: number
    DateCreate: number
    DateUpdate: number
    Name: number
    Stage: number
    Subdistrict: number
    Ward: number
    Status: number
    _all: number
  }


  export type SchoolMinAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    Stage?: true
    Subdistrict?: true
    Ward?: true
    Status?: true
  }

  export type SchoolMaxAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    Stage?: true
    Subdistrict?: true
    Ward?: true
    Status?: true
  }

  export type SchoolCountAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Name?: true
    Stage?: true
    Subdistrict?: true
    Ward?: true
    Status?: true
    _all?: true
  }

  export type SchoolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which School to aggregate.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schools
    **/
    _count?: true | SchoolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchoolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchoolMaxAggregateInputType
  }

  export type GetSchoolAggregateType<T extends SchoolAggregateArgs> = {
        [P in keyof T & keyof AggregateSchool]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchool[P]>
      : GetScalarType<T[P], AggregateSchool[P]>
  }




  export type SchoolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolWhereInput
    orderBy?: SchoolOrderByWithAggregationInput | SchoolOrderByWithAggregationInput[]
    by: SchoolScalarFieldEnum[] | SchoolScalarFieldEnum
    having?: SchoolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchoolCountAggregateInputType | true
    _min?: SchoolMinAggregateInputType
    _max?: SchoolMaxAggregateInputType
  }

  export type SchoolGroupByOutputType = {
    Id: string
    DateCreate: Date
    DateUpdate: Date | null
    Name: string
    Stage: $Enums.StageType
    Subdistrict: $Enums.Subdistrict
    Ward: string
    Status: $Enums.StatusSchool
    _count: SchoolCountAggregateOutputType | null
    _min: SchoolMinAggregateOutputType | null
    _max: SchoolMaxAggregateOutputType | null
  }

  type GetSchoolGroupByPayload<T extends SchoolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SchoolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchoolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchoolGroupByOutputType[P]>
            : GetScalarType<T[P], SchoolGroupByOutputType[P]>
        }
      >
    >


  export type SchoolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    Stage?: boolean
    Subdistrict?: boolean
    Ward?: boolean
    Status?: boolean
    Student?: boolean | School$StudentArgs<ExtArgs>
    _count?: boolean | SchoolCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["school"]>

  export type SchoolSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    Stage?: boolean
    Subdistrict?: boolean
    Ward?: boolean
    Status?: boolean
  }, ExtArgs["result"]["school"]>

  export type SchoolSelectScalar = {
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Name?: boolean
    Stage?: boolean
    Subdistrict?: boolean
    Ward?: boolean
    Status?: boolean
  }

  export type SchoolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Student?: boolean | School$StudentArgs<ExtArgs>
    _count?: boolean | SchoolCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SchoolIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SchoolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "School"
    objects: {
      Student: Prisma.$StudentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: string
      DateCreate: Date
      DateUpdate: Date | null
      Name: string
      Stage: $Enums.StageType
      Subdistrict: $Enums.Subdistrict
      Ward: string
      Status: $Enums.StatusSchool
    }, ExtArgs["result"]["school"]>
    composites: {}
  }

  type SchoolGetPayload<S extends boolean | null | undefined | SchoolDefaultArgs> = $Result.GetResult<Prisma.$SchoolPayload, S>

  type SchoolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SchoolFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SchoolCountAggregateInputType | true
    }

  export interface SchoolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['School'], meta: { name: 'School' } }
    /**
     * Find zero or one School that matches the filter.
     * @param {SchoolFindUniqueArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SchoolFindUniqueArgs>(args: SelectSubset<T, SchoolFindUniqueArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one School that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SchoolFindUniqueOrThrowArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SchoolFindUniqueOrThrowArgs>(args: SelectSubset<T, SchoolFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first School that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindFirstArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SchoolFindFirstArgs>(args?: SelectSubset<T, SchoolFindFirstArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first School that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindFirstOrThrowArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SchoolFindFirstOrThrowArgs>(args?: SelectSubset<T, SchoolFindFirstOrThrowArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Schools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schools
     * const schools = await prisma.school.findMany()
     * 
     * // Get first 10 Schools
     * const schools = await prisma.school.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const schoolWithIdOnly = await prisma.school.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends SchoolFindManyArgs>(args?: SelectSubset<T, SchoolFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a School.
     * @param {SchoolCreateArgs} args - Arguments to create a School.
     * @example
     * // Create one School
     * const School = await prisma.school.create({
     *   data: {
     *     // ... data to create a School
     *   }
     * })
     * 
     */
    create<T extends SchoolCreateArgs>(args: SelectSubset<T, SchoolCreateArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Schools.
     * @param {SchoolCreateManyArgs} args - Arguments to create many Schools.
     * @example
     * // Create many Schools
     * const school = await prisma.school.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SchoolCreateManyArgs>(args?: SelectSubset<T, SchoolCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Schools and returns the data saved in the database.
     * @param {SchoolCreateManyAndReturnArgs} args - Arguments to create many Schools.
     * @example
     * // Create many Schools
     * const school = await prisma.school.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Schools and only return the `Id`
     * const schoolWithIdOnly = await prisma.school.createManyAndReturn({ 
     *   select: { Id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SchoolCreateManyAndReturnArgs>(args?: SelectSubset<T, SchoolCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a School.
     * @param {SchoolDeleteArgs} args - Arguments to delete one School.
     * @example
     * // Delete one School
     * const School = await prisma.school.delete({
     *   where: {
     *     // ... filter to delete one School
     *   }
     * })
     * 
     */
    delete<T extends SchoolDeleteArgs>(args: SelectSubset<T, SchoolDeleteArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one School.
     * @param {SchoolUpdateArgs} args - Arguments to update one School.
     * @example
     * // Update one School
     * const school = await prisma.school.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SchoolUpdateArgs>(args: SelectSubset<T, SchoolUpdateArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Schools.
     * @param {SchoolDeleteManyArgs} args - Arguments to filter Schools to delete.
     * @example
     * // Delete a few Schools
     * const { count } = await prisma.school.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SchoolDeleteManyArgs>(args?: SelectSubset<T, SchoolDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schools
     * const school = await prisma.school.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SchoolUpdateManyArgs>(args: SelectSubset<T, SchoolUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one School.
     * @param {SchoolUpsertArgs} args - Arguments to update or create a School.
     * @example
     * // Update or create a School
     * const school = await prisma.school.upsert({
     *   create: {
     *     // ... data to create a School
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the School we want to update
     *   }
     * })
     */
    upsert<T extends SchoolUpsertArgs>(args: SelectSubset<T, SchoolUpsertArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolCountArgs} args - Arguments to filter Schools to count.
     * @example
     * // Count the number of Schools
     * const count = await prisma.school.count({
     *   where: {
     *     // ... the filter for the Schools we want to count
     *   }
     * })
    **/
    count<T extends SchoolCountArgs>(
      args?: Subset<T, SchoolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchoolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a School.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchoolAggregateArgs>(args: Subset<T, SchoolAggregateArgs>): Prisma.PrismaPromise<GetSchoolAggregateType<T>>

    /**
     * Group by School.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchoolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchoolGroupByArgs['orderBy'] }
        : { orderBy?: SchoolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchoolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchoolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the School model
   */
  readonly fields: SchoolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for School.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SchoolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Student<T extends School$StudentArgs<ExtArgs> = {}>(args?: Subset<T, School$StudentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the School model
   */ 
  interface SchoolFieldRefs {
    readonly Id: FieldRef<"School", 'String'>
    readonly DateCreate: FieldRef<"School", 'DateTime'>
    readonly DateUpdate: FieldRef<"School", 'DateTime'>
    readonly Name: FieldRef<"School", 'String'>
    readonly Stage: FieldRef<"School", 'StageType'>
    readonly Subdistrict: FieldRef<"School", 'Subdistrict'>
    readonly Ward: FieldRef<"School", 'String'>
    readonly Status: FieldRef<"School", 'StatusSchool'>
  }
    

  // Custom InputTypes
  /**
   * School findUnique
   */
  export type SchoolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where: SchoolWhereUniqueInput
  }

  /**
   * School findUniqueOrThrow
   */
  export type SchoolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where: SchoolWhereUniqueInput
  }

  /**
   * School findFirst
   */
  export type SchoolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schools.
     */
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }

  /**
   * School findFirstOrThrow
   */
  export type SchoolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schools.
     */
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }

  /**
   * School findMany
   */
  export type SchoolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which Schools to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }

  /**
   * School create
   */
  export type SchoolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The data needed to create a School.
     */
    data: XOR<SchoolCreateInput, SchoolUncheckedCreateInput>
  }

  /**
   * School createMany
   */
  export type SchoolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schools.
     */
    data: SchoolCreateManyInput | SchoolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * School createManyAndReturn
   */
  export type SchoolCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Schools.
     */
    data: SchoolCreateManyInput | SchoolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * School update
   */
  export type SchoolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The data needed to update a School.
     */
    data: XOR<SchoolUpdateInput, SchoolUncheckedUpdateInput>
    /**
     * Choose, which School to update.
     */
    where: SchoolWhereUniqueInput
  }

  /**
   * School updateMany
   */
  export type SchoolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schools.
     */
    data: XOR<SchoolUpdateManyMutationInput, SchoolUncheckedUpdateManyInput>
    /**
     * Filter which Schools to update
     */
    where?: SchoolWhereInput
  }

  /**
   * School upsert
   */
  export type SchoolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The filter to search for the School to update in case it exists.
     */
    where: SchoolWhereUniqueInput
    /**
     * In case the School found by the `where` argument doesn't exist, create a new School with this data.
     */
    create: XOR<SchoolCreateInput, SchoolUncheckedCreateInput>
    /**
     * In case the School was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SchoolUpdateInput, SchoolUncheckedUpdateInput>
  }

  /**
   * School delete
   */
  export type SchoolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter which School to delete.
     */
    where: SchoolWhereUniqueInput
  }

  /**
   * School deleteMany
   */
  export type SchoolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schools to delete
     */
    where?: SchoolWhereInput
  }

  /**
   * School.Student
   */
  export type School$StudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * School without action
   */
  export type SchoolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
  }


  /**
   * Model News
   */

  export type AggregateNews = {
    _count: NewsCountAggregateOutputType | null
    _min: NewsMinAggregateOutputType | null
    _max: NewsMaxAggregateOutputType | null
  }

  export type NewsMinAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Title: string | null
    Description: string | null
  }

  export type NewsMaxAggregateOutputType = {
    Id: string | null
    DateCreate: Date | null
    DateUpdate: Date | null
    Title: string | null
    Description: string | null
  }

  export type NewsCountAggregateOutputType = {
    Id: number
    DateCreate: number
    DateUpdate: number
    Title: number
    Description: number
    _all: number
  }


  export type NewsMinAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Title?: true
    Description?: true
  }

  export type NewsMaxAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Title?: true
    Description?: true
  }

  export type NewsCountAggregateInputType = {
    Id?: true
    DateCreate?: true
    DateUpdate?: true
    Title?: true
    Description?: true
    _all?: true
  }

  export type NewsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which News to aggregate.
     */
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     */
    orderBy?: NewsOrderByWithRelationInput | NewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned News
    **/
    _count?: true | NewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewsMaxAggregateInputType
  }

  export type GetNewsAggregateType<T extends NewsAggregateArgs> = {
        [P in keyof T & keyof AggregateNews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNews[P]>
      : GetScalarType<T[P], AggregateNews[P]>
  }




  export type NewsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewsWhereInput
    orderBy?: NewsOrderByWithAggregationInput | NewsOrderByWithAggregationInput[]
    by: NewsScalarFieldEnum[] | NewsScalarFieldEnum
    having?: NewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewsCountAggregateInputType | true
    _min?: NewsMinAggregateInputType
    _max?: NewsMaxAggregateInputType
  }

  export type NewsGroupByOutputType = {
    Id: string
    DateCreate: Date
    DateUpdate: Date | null
    Title: string
    Description: string
    _count: NewsCountAggregateOutputType | null
    _min: NewsMinAggregateOutputType | null
    _max: NewsMaxAggregateOutputType | null
  }

  type GetNewsGroupByPayload<T extends NewsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewsGroupByOutputType[P]>
            : GetScalarType<T[P], NewsGroupByOutputType[P]>
        }
      >
    >


  export type NewsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Title?: boolean
    Description?: boolean
  }, ExtArgs["result"]["news"]>

  export type NewsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Title?: boolean
    Description?: boolean
  }, ExtArgs["result"]["news"]>

  export type NewsSelectScalar = {
    Id?: boolean
    DateCreate?: boolean
    DateUpdate?: boolean
    Title?: boolean
    Description?: boolean
  }


  export type $NewsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "News"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      Id: string
      DateCreate: Date
      DateUpdate: Date | null
      Title: string
      Description: string
    }, ExtArgs["result"]["news"]>
    composites: {}
  }

  type NewsGetPayload<S extends boolean | null | undefined | NewsDefaultArgs> = $Result.GetResult<Prisma.$NewsPayload, S>

  type NewsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NewsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NewsCountAggregateInputType | true
    }

  export interface NewsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['News'], meta: { name: 'News' } }
    /**
     * Find zero or one News that matches the filter.
     * @param {NewsFindUniqueArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NewsFindUniqueArgs>(args: SelectSubset<T, NewsFindUniqueArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one News that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NewsFindUniqueOrThrowArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NewsFindUniqueOrThrowArgs>(args: SelectSubset<T, NewsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first News that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsFindFirstArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NewsFindFirstArgs>(args?: SelectSubset<T, NewsFindFirstArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first News that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsFindFirstOrThrowArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NewsFindFirstOrThrowArgs>(args?: SelectSubset<T, NewsFindFirstOrThrowArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more News that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all News
     * const news = await prisma.news.findMany()
     * 
     * // Get first 10 News
     * const news = await prisma.news.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const newsWithIdOnly = await prisma.news.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends NewsFindManyArgs>(args?: SelectSubset<T, NewsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a News.
     * @param {NewsCreateArgs} args - Arguments to create a News.
     * @example
     * // Create one News
     * const News = await prisma.news.create({
     *   data: {
     *     // ... data to create a News
     *   }
     * })
     * 
     */
    create<T extends NewsCreateArgs>(args: SelectSubset<T, NewsCreateArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many News.
     * @param {NewsCreateManyArgs} args - Arguments to create many News.
     * @example
     * // Create many News
     * const news = await prisma.news.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NewsCreateManyArgs>(args?: SelectSubset<T, NewsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many News and returns the data saved in the database.
     * @param {NewsCreateManyAndReturnArgs} args - Arguments to create many News.
     * @example
     * // Create many News
     * const news = await prisma.news.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many News and only return the `Id`
     * const newsWithIdOnly = await prisma.news.createManyAndReturn({ 
     *   select: { Id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NewsCreateManyAndReturnArgs>(args?: SelectSubset<T, NewsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a News.
     * @param {NewsDeleteArgs} args - Arguments to delete one News.
     * @example
     * // Delete one News
     * const News = await prisma.news.delete({
     *   where: {
     *     // ... filter to delete one News
     *   }
     * })
     * 
     */
    delete<T extends NewsDeleteArgs>(args: SelectSubset<T, NewsDeleteArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one News.
     * @param {NewsUpdateArgs} args - Arguments to update one News.
     * @example
     * // Update one News
     * const news = await prisma.news.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NewsUpdateArgs>(args: SelectSubset<T, NewsUpdateArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more News.
     * @param {NewsDeleteManyArgs} args - Arguments to filter News to delete.
     * @example
     * // Delete a few News
     * const { count } = await prisma.news.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NewsDeleteManyArgs>(args?: SelectSubset<T, NewsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many News
     * const news = await prisma.news.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NewsUpdateManyArgs>(args: SelectSubset<T, NewsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one News.
     * @param {NewsUpsertArgs} args - Arguments to update or create a News.
     * @example
     * // Update or create a News
     * const news = await prisma.news.upsert({
     *   create: {
     *     // ... data to create a News
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the News we want to update
     *   }
     * })
     */
    upsert<T extends NewsUpsertArgs>(args: SelectSubset<T, NewsUpsertArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsCountArgs} args - Arguments to filter News to count.
     * @example
     * // Count the number of News
     * const count = await prisma.news.count({
     *   where: {
     *     // ... the filter for the News we want to count
     *   }
     * })
    **/
    count<T extends NewsCountArgs>(
      args?: Subset<T, NewsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewsAggregateArgs>(args: Subset<T, NewsAggregateArgs>): Prisma.PrismaPromise<GetNewsAggregateType<T>>

    /**
     * Group by News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewsGroupByArgs['orderBy'] }
        : { orderBy?: NewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the News model
   */
  readonly fields: NewsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for News.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NewsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the News model
   */ 
  interface NewsFieldRefs {
    readonly Id: FieldRef<"News", 'String'>
    readonly DateCreate: FieldRef<"News", 'DateTime'>
    readonly DateUpdate: FieldRef<"News", 'DateTime'>
    readonly Title: FieldRef<"News", 'String'>
    readonly Description: FieldRef<"News", 'String'>
  }
    

  // Custom InputTypes
  /**
   * News findUnique
   */
  export type NewsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Filter, which News to fetch.
     */
    where: NewsWhereUniqueInput
  }

  /**
   * News findUniqueOrThrow
   */
  export type NewsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Filter, which News to fetch.
     */
    where: NewsWhereUniqueInput
  }

  /**
   * News findFirst
   */
  export type NewsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Filter, which News to fetch.
     */
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     */
    orderBy?: NewsOrderByWithRelationInput | NewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for News.
     */
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of News.
     */
    distinct?: NewsScalarFieldEnum | NewsScalarFieldEnum[]
  }

  /**
   * News findFirstOrThrow
   */
  export type NewsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Filter, which News to fetch.
     */
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     */
    orderBy?: NewsOrderByWithRelationInput | NewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for News.
     */
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of News.
     */
    distinct?: NewsScalarFieldEnum | NewsScalarFieldEnum[]
  }

  /**
   * News findMany
   */
  export type NewsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Filter, which News to fetch.
     */
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     */
    orderBy?: NewsOrderByWithRelationInput | NewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing News.
     */
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     */
    skip?: number
    distinct?: NewsScalarFieldEnum | NewsScalarFieldEnum[]
  }

  /**
   * News create
   */
  export type NewsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * The data needed to create a News.
     */
    data: XOR<NewsCreateInput, NewsUncheckedCreateInput>
  }

  /**
   * News createMany
   */
  export type NewsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many News.
     */
    data: NewsCreateManyInput | NewsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * News createManyAndReturn
   */
  export type NewsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many News.
     */
    data: NewsCreateManyInput | NewsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * News update
   */
  export type NewsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * The data needed to update a News.
     */
    data: XOR<NewsUpdateInput, NewsUncheckedUpdateInput>
    /**
     * Choose, which News to update.
     */
    where: NewsWhereUniqueInput
  }

  /**
   * News updateMany
   */
  export type NewsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update News.
     */
    data: XOR<NewsUpdateManyMutationInput, NewsUncheckedUpdateManyInput>
    /**
     * Filter which News to update
     */
    where?: NewsWhereInput
  }

  /**
   * News upsert
   */
  export type NewsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * The filter to search for the News to update in case it exists.
     */
    where: NewsWhereUniqueInput
    /**
     * In case the News found by the `where` argument doesn't exist, create a new News with this data.
     */
    create: XOR<NewsCreateInput, NewsUncheckedCreateInput>
    /**
     * In case the News was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NewsUpdateInput, NewsUncheckedUpdateInput>
  }

  /**
   * News delete
   */
  export type NewsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Filter which News to delete.
     */
    where: NewsWhereUniqueInput
  }

  /**
   * News deleteMany
   */
  export type NewsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which News to delete
     */
    where?: NewsWhereInput
  }

  /**
   * News without action
   */
  export type NewsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const RoleScalarFieldEnum: {
    Id: 'Id',
    Name: 'Name',
    DateCreate: 'DateCreate',
    DateUpdate: 'DateUpdate'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const UserScalarFieldEnum: {
    Id: 'Id',
    DateCreate: 'DateCreate',
    DateUpdate: 'DateUpdate',
    Name: 'Name',
    Username: 'Username',
    Password: 'Password',
    RoleId: 'RoleId',
    Birthdate: 'Birthdate',
    BirthPlace: 'BirthPlace',
    PhoneNumber: 'PhoneNumber',
    Gender: 'Gender',
    Email: 'Email',
    Status: 'Status'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    Id: 'Id',
    DateCreate: 'DateCreate',
    DateUpdate: 'DateUpdate',
    IdMember: 'IdMember',
    Address: 'Address',
    Stage: 'Stage',
    Class: 'Class',
    SchoolId: 'SchoolId',
    NIK: 'NIK',
    FatherName: 'FatherName',
    MotherName: 'MotherName',
    IdUser: 'IdUser',
    PhotoPath: 'PhotoPath',
    Poin: 'Poin'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const AchievementScalarFieldEnum: {
    Id: 'Id',
    DateCreate: 'DateCreate',
    DateUpdate: 'DateUpdate',
    UserId: 'UserId',
    Category: 'Category',
    Describe: 'Describe',
    CompetitionId: 'CompetitionId'
  };

  export type AchievementScalarFieldEnum = (typeof AchievementScalarFieldEnum)[keyof typeof AchievementScalarFieldEnum]


  export const SeasonScalarFieldEnum: {
    Id: 'Id',
    DateCreate: 'DateCreate',
    DateUpdate: 'DateUpdate',
    Name: 'Name',
    StartDate: 'StartDate',
    EndDate: 'EndDate'
  };

  export type SeasonScalarFieldEnum = (typeof SeasonScalarFieldEnum)[keyof typeof SeasonScalarFieldEnum]


  export const SubjectScalarFieldEnum: {
    Id: 'Id',
    DateCreate: 'DateCreate',
    DateUpdate: 'DateUpdate',
    Name: 'Name'
  };

  export type SubjectScalarFieldEnum = (typeof SubjectScalarFieldEnum)[keyof typeof SubjectScalarFieldEnum]


  export const CompetitionScalarFieldEnum: {
    Id: 'Id',
    DateCreate: 'DateCreate',
    DateUpdate: 'DateUpdate',
    Name: 'Name',
    Description: 'Description',
    Date: 'Date',
    Level: 'Level',
    Stage: 'Stage',
    Price: 'Price',
    Location: 'Location',
    SeasonId: 'SeasonId',
    RegionId: 'RegionId',
    SubjectId: 'SubjectId',
    CodePackage: 'CodePackage',
    PathAnswer: 'PathAnswer',
    regionId: 'regionId'
  };

  export type CompetitionScalarFieldEnum = (typeof CompetitionScalarFieldEnum)[keyof typeof CompetitionScalarFieldEnum]


  export const SubscriptionScalarFieldEnum: {
    Id: 'Id',
    DateCreate: 'DateCreate',
    DateUpdate: 'DateUpdate',
    StartDate: 'StartDate',
    EndDate: 'EndDate',
    Status: 'Status',
    StudentId: 'StudentId',
    CompetitionId: 'CompetitionId'
  };

  export type SubscriptionScalarFieldEnum = (typeof SubscriptionScalarFieldEnum)[keyof typeof SubscriptionScalarFieldEnum]


  export const RegionScalarFieldEnum: {
    Id: 'Id',
    DateCreate: 'DateCreate',
    DateUpdate: 'DateUpdate',
    Region: 'Region',
    Name: 'Name',
    RegionDetail: 'RegionDetail'
  };

  export type RegionScalarFieldEnum = (typeof RegionScalarFieldEnum)[keyof typeof RegionScalarFieldEnum]


  export const SupervisorScalarFieldEnum: {
    Id: 'Id',
    DateCreate: 'DateCreate',
    DateUpdate: 'DateUpdate',
    Name: 'Name',
    Birthdate: 'Birthdate',
    PhoneNumber: 'PhoneNumber'
  };

  export type SupervisorScalarFieldEnum = (typeof SupervisorScalarFieldEnum)[keyof typeof SupervisorScalarFieldEnum]


  export const CompetitionRoomScalarFieldEnum: {
    Id: 'Id',
    DateCreate: 'DateCreate',
    DateUpdate: 'DateUpdate',
    Name: 'Name',
    CompetitionId: 'CompetitionId',
    SupervisorId: 'SupervisorId'
  };

  export type CompetitionRoomScalarFieldEnum = (typeof CompetitionRoomScalarFieldEnum)[keyof typeof CompetitionRoomScalarFieldEnum]


  export const CompetitionParticipantScalarFieldEnum: {
    Id: 'Id',
    DateCreate: 'DateCreate',
    DateUpdate: 'DateUpdate',
    ParticipantId: 'ParticipantId',
    StudentId: 'StudentId',
    CompetitionId: 'CompetitionId',
    CompetitionRoomId: 'CompetitionRoomId',
    PaymentId: 'PaymentId',
    Attedance: 'Attedance',
    Score: 'Score',
    Correct: 'Correct',
    Incorrect: 'Incorrect',
    PathAnswer: 'PathAnswer'
  };

  export type CompetitionParticipantScalarFieldEnum = (typeof CompetitionParticipantScalarFieldEnum)[keyof typeof CompetitionParticipantScalarFieldEnum]


  export const KisiScalarFieldEnum: {
    Id: 'Id',
    DateCreate: 'DateCreate',
    DateUpdate: 'DateUpdate',
    Header: 'Header',
    Content: 'Content',
    CompetitionId: 'CompetitionId'
  };

  export type KisiScalarFieldEnum = (typeof KisiScalarFieldEnum)[keyof typeof KisiScalarFieldEnum]


  export const TryoutScalarFieldEnum: {
    Id: 'Id',
    DateCreate: 'DateCreate',
    DateUpdate: 'DateUpdate',
    Name: 'Name',
    CompetitionId: 'CompetitionId'
  };

  export type TryoutScalarFieldEnum = (typeof TryoutScalarFieldEnum)[keyof typeof TryoutScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    Id: 'Id',
    DateCreate: 'DateCreate',
    DateUpdate: 'DateUpdate',
    TryoutId: 'TryoutId',
    Content: 'Content'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const OptionScalarFieldEnum: {
    Id: 'Id',
    DateCreate: 'DateCreate',
    DateUpdate: 'DateUpdate',
    Answer: 'Answer',
    IsCorrect: 'IsCorrect',
    QuestionId: 'QuestionId'
  };

  export type OptionScalarFieldEnum = (typeof OptionScalarFieldEnum)[keyof typeof OptionScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    Id: 'Id',
    DateCreate: 'DateCreate',
    DateUpdate: 'DateUpdate',
    Invoice: 'Invoice',
    Date: 'Date',
    Amount: 'Amount',
    UserId: 'UserId',
    Status: 'Status'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const PaymentStatusHistoryScalarFieldEnum: {
    Id: 'Id',
    DateCreate: 'DateCreate',
    DateUpdate: 'DateUpdate',
    PaymentId: 'PaymentId',
    Status: 'Status',
    Date: 'Date'
  };

  export type PaymentStatusHistoryScalarFieldEnum = (typeof PaymentStatusHistoryScalarFieldEnum)[keyof typeof PaymentStatusHistoryScalarFieldEnum]


  export const SchoolScalarFieldEnum: {
    Id: 'Id',
    DateCreate: 'DateCreate',
    DateUpdate: 'DateUpdate',
    Name: 'Name',
    Stage: 'Stage',
    Subdistrict: 'Subdistrict',
    Ward: 'Ward',
    Status: 'Status'
  };

  export type SchoolScalarFieldEnum = (typeof SchoolScalarFieldEnum)[keyof typeof SchoolScalarFieldEnum]


  export const NewsScalarFieldEnum: {
    Id: 'Id',
    DateCreate: 'DateCreate',
    DateUpdate: 'DateUpdate',
    Title: 'Title',
    Description: 'Description'
  };

  export type NewsScalarFieldEnum = (typeof NewsScalarFieldEnum)[keyof typeof NewsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'RoleType'
   */
  export type EnumRoleTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleType'>
    


  /**
   * Reference to a field of type 'RoleType[]'
   */
  export type ListEnumRoleTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleType[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'ActiveStatus'
   */
  export type EnumActiveStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActiveStatus'>
    


  /**
   * Reference to a field of type 'ActiveStatus[]'
   */
  export type ListEnumActiveStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActiveStatus[]'>
    


  /**
   * Reference to a field of type 'StageType'
   */
  export type EnumStageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StageType'>
    


  /**
   * Reference to a field of type 'StageType[]'
   */
  export type ListEnumStageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StageType[]'>
    


  /**
   * Reference to a field of type 'PaymentType'
   */
  export type EnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType'>
    


  /**
   * Reference to a field of type 'PaymentType[]'
   */
  export type ListEnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType[]'>
    


  /**
   * Reference to a field of type 'Subdistrict'
   */
  export type EnumSubdistrictFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Subdistrict'>
    


  /**
   * Reference to a field of type 'Subdistrict[]'
   */
  export type ListEnumSubdistrictFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Subdistrict[]'>
    


  /**
   * Reference to a field of type 'StatusSchool'
   */
  export type EnumStatusSchoolFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusSchool'>
    


  /**
   * Reference to a field of type 'StatusSchool[]'
   */
  export type ListEnumStatusSchoolFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusSchool[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    Id?: StringFilter<"Role"> | string
    Name?: EnumRoleTypeFilter<"Role"> | $Enums.RoleType
    DateCreate?: DateTimeFilter<"Role"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Role"> | Date | string | null
    User?: UserListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    Id?: SortOrder
    Name?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    User?: UserOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    Name?: EnumRoleTypeFilter<"Role"> | $Enums.RoleType
    DateCreate?: DateTimeFilter<"Role"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Role"> | Date | string | null
    User?: UserListRelationFilter
  }, "Id">

  export type RoleOrderByWithAggregationInput = {
    Id?: SortOrder
    Name?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    _count?: RoleCountOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"Role"> | string
    Name?: EnumRoleTypeWithAggregatesFilter<"Role"> | $Enums.RoleType
    DateCreate?: DateTimeWithAggregatesFilter<"Role"> | Date | string
    DateUpdate?: DateTimeNullableWithAggregatesFilter<"Role"> | Date | string | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    Id?: StringFilter<"User"> | string
    DateCreate?: DateTimeFilter<"User"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"User"> | Date | string | null
    Name?: StringFilter<"User"> | string
    Username?: StringFilter<"User"> | string
    Password?: StringFilter<"User"> | string
    RoleId?: StringFilter<"User"> | string
    Birthdate?: IntFilter<"User"> | number
    BirthPlace?: StringNullableFilter<"User"> | string | null
    PhoneNumber?: StringFilter<"User"> | string
    Gender?: BoolFilter<"User"> | boolean
    Email?: StringNullableFilter<"User"> | string | null
    Status?: EnumActiveStatusFilter<"User"> | $Enums.ActiveStatus
    Achievement?: AchievementListRelationFilter
    Student?: StudentListRelationFilter
    Role?: XOR<RoleRelationFilter, RoleWhereInput>
    Payment?: PaymentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Name?: SortOrder
    Username?: SortOrder
    Password?: SortOrder
    RoleId?: SortOrder
    Birthdate?: SortOrder
    BirthPlace?: SortOrderInput | SortOrder
    PhoneNumber?: SortOrder
    Gender?: SortOrder
    Email?: SortOrderInput | SortOrder
    Status?: SortOrder
    Achievement?: AchievementOrderByRelationAggregateInput
    Student?: StudentOrderByRelationAggregateInput
    Role?: RoleOrderByWithRelationInput
    Payment?: PaymentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    Email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    DateCreate?: DateTimeFilter<"User"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"User"> | Date | string | null
    Name?: StringFilter<"User"> | string
    Username?: StringFilter<"User"> | string
    Password?: StringFilter<"User"> | string
    RoleId?: StringFilter<"User"> | string
    Birthdate?: IntFilter<"User"> | number
    BirthPlace?: StringNullableFilter<"User"> | string | null
    PhoneNumber?: StringFilter<"User"> | string
    Gender?: BoolFilter<"User"> | boolean
    Status?: EnumActiveStatusFilter<"User"> | $Enums.ActiveStatus
    Achievement?: AchievementListRelationFilter
    Student?: StudentListRelationFilter
    Role?: XOR<RoleRelationFilter, RoleWhereInput>
    Payment?: PaymentListRelationFilter
  }, "Id" | "Email">

  export type UserOrderByWithAggregationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Name?: SortOrder
    Username?: SortOrder
    Password?: SortOrder
    RoleId?: SortOrder
    Birthdate?: SortOrder
    BirthPlace?: SortOrderInput | SortOrder
    PhoneNumber?: SortOrder
    Gender?: SortOrder
    Email?: SortOrderInput | SortOrder
    Status?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"User"> | string
    DateCreate?: DateTimeWithAggregatesFilter<"User"> | Date | string
    DateUpdate?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    Name?: StringWithAggregatesFilter<"User"> | string
    Username?: StringWithAggregatesFilter<"User"> | string
    Password?: StringWithAggregatesFilter<"User"> | string
    RoleId?: StringWithAggregatesFilter<"User"> | string
    Birthdate?: IntWithAggregatesFilter<"User"> | number
    BirthPlace?: StringNullableWithAggregatesFilter<"User"> | string | null
    PhoneNumber?: StringWithAggregatesFilter<"User"> | string
    Gender?: BoolWithAggregatesFilter<"User"> | boolean
    Email?: StringNullableWithAggregatesFilter<"User"> | string | null
    Status?: EnumActiveStatusWithAggregatesFilter<"User"> | $Enums.ActiveStatus
  }

  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    Id?: StringFilter<"Student"> | string
    DateCreate?: DateTimeFilter<"Student"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Student"> | Date | string | null
    IdMember?: StringNullableFilter<"Student"> | string | null
    Address?: StringFilter<"Student"> | string
    Stage?: EnumStageTypeFilter<"Student"> | $Enums.StageType
    Class?: StringFilter<"Student"> | string
    SchoolId?: StringFilter<"Student"> | string
    NIK?: StringFilter<"Student"> | string
    FatherName?: StringNullableFilter<"Student"> | string | null
    MotherName?: StringNullableFilter<"Student"> | string | null
    IdUser?: StringFilter<"Student"> | string
    PhotoPath?: StringNullableFilter<"Student"> | string | null
    Poin?: IntFilter<"Student"> | number
    CompetitionParticipant?: CompetitionParticipantListRelationFilter
    User?: XOR<UserRelationFilter, UserWhereInput>
    School?: XOR<SchoolRelationFilter, SchoolWhereInput>
    Subscription?: SubscriptionListRelationFilter
  }

  export type StudentOrderByWithRelationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    IdMember?: SortOrderInput | SortOrder
    Address?: SortOrder
    Stage?: SortOrder
    Class?: SortOrder
    SchoolId?: SortOrder
    NIK?: SortOrder
    FatherName?: SortOrderInput | SortOrder
    MotherName?: SortOrderInput | SortOrder
    IdUser?: SortOrder
    PhotoPath?: SortOrderInput | SortOrder
    Poin?: SortOrder
    CompetitionParticipant?: CompetitionParticipantOrderByRelationAggregateInput
    User?: UserOrderByWithRelationInput
    School?: SchoolOrderByWithRelationInput
    Subscription?: SubscriptionOrderByRelationAggregateInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    DateCreate?: DateTimeFilter<"Student"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Student"> | Date | string | null
    IdMember?: StringNullableFilter<"Student"> | string | null
    Address?: StringFilter<"Student"> | string
    Stage?: EnumStageTypeFilter<"Student"> | $Enums.StageType
    Class?: StringFilter<"Student"> | string
    SchoolId?: StringFilter<"Student"> | string
    NIK?: StringFilter<"Student"> | string
    FatherName?: StringNullableFilter<"Student"> | string | null
    MotherName?: StringNullableFilter<"Student"> | string | null
    IdUser?: StringFilter<"Student"> | string
    PhotoPath?: StringNullableFilter<"Student"> | string | null
    Poin?: IntFilter<"Student"> | number
    CompetitionParticipant?: CompetitionParticipantListRelationFilter
    User?: XOR<UserRelationFilter, UserWhereInput>
    School?: XOR<SchoolRelationFilter, SchoolWhereInput>
    Subscription?: SubscriptionListRelationFilter
  }, "Id">

  export type StudentOrderByWithAggregationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    IdMember?: SortOrderInput | SortOrder
    Address?: SortOrder
    Stage?: SortOrder
    Class?: SortOrder
    SchoolId?: SortOrder
    NIK?: SortOrder
    FatherName?: SortOrderInput | SortOrder
    MotherName?: SortOrderInput | SortOrder
    IdUser?: SortOrder
    PhotoPath?: SortOrderInput | SortOrder
    Poin?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _avg?: StudentAvgOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
    _sum?: StudentSumOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"Student"> | string
    DateCreate?: DateTimeWithAggregatesFilter<"Student"> | Date | string
    DateUpdate?: DateTimeNullableWithAggregatesFilter<"Student"> | Date | string | null
    IdMember?: StringNullableWithAggregatesFilter<"Student"> | string | null
    Address?: StringWithAggregatesFilter<"Student"> | string
    Stage?: EnumStageTypeWithAggregatesFilter<"Student"> | $Enums.StageType
    Class?: StringWithAggregatesFilter<"Student"> | string
    SchoolId?: StringWithAggregatesFilter<"Student"> | string
    NIK?: StringWithAggregatesFilter<"Student"> | string
    FatherName?: StringNullableWithAggregatesFilter<"Student"> | string | null
    MotherName?: StringNullableWithAggregatesFilter<"Student"> | string | null
    IdUser?: StringWithAggregatesFilter<"Student"> | string
    PhotoPath?: StringNullableWithAggregatesFilter<"Student"> | string | null
    Poin?: IntWithAggregatesFilter<"Student"> | number
  }

  export type AchievementWhereInput = {
    AND?: AchievementWhereInput | AchievementWhereInput[]
    OR?: AchievementWhereInput[]
    NOT?: AchievementWhereInput | AchievementWhereInput[]
    Id?: StringFilter<"Achievement"> | string
    DateCreate?: DateTimeFilter<"Achievement"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Achievement"> | Date | string | null
    UserId?: StringFilter<"Achievement"> | string
    Category?: StringFilter<"Achievement"> | string
    Describe?: StringNullableFilter<"Achievement"> | string | null
    CompetitionId?: StringFilter<"Achievement"> | string
    Competition?: XOR<CompetitionRelationFilter, CompetitionWhereInput>
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AchievementOrderByWithRelationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    UserId?: SortOrder
    Category?: SortOrder
    Describe?: SortOrderInput | SortOrder
    CompetitionId?: SortOrder
    Competition?: CompetitionOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type AchievementWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: AchievementWhereInput | AchievementWhereInput[]
    OR?: AchievementWhereInput[]
    NOT?: AchievementWhereInput | AchievementWhereInput[]
    DateCreate?: DateTimeFilter<"Achievement"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Achievement"> | Date | string | null
    UserId?: StringFilter<"Achievement"> | string
    Category?: StringFilter<"Achievement"> | string
    Describe?: StringNullableFilter<"Achievement"> | string | null
    CompetitionId?: StringFilter<"Achievement"> | string
    Competition?: XOR<CompetitionRelationFilter, CompetitionWhereInput>
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "Id">

  export type AchievementOrderByWithAggregationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    UserId?: SortOrder
    Category?: SortOrder
    Describe?: SortOrderInput | SortOrder
    CompetitionId?: SortOrder
    _count?: AchievementCountOrderByAggregateInput
    _max?: AchievementMaxOrderByAggregateInput
    _min?: AchievementMinOrderByAggregateInput
  }

  export type AchievementScalarWhereWithAggregatesInput = {
    AND?: AchievementScalarWhereWithAggregatesInput | AchievementScalarWhereWithAggregatesInput[]
    OR?: AchievementScalarWhereWithAggregatesInput[]
    NOT?: AchievementScalarWhereWithAggregatesInput | AchievementScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"Achievement"> | string
    DateCreate?: DateTimeWithAggregatesFilter<"Achievement"> | Date | string
    DateUpdate?: DateTimeNullableWithAggregatesFilter<"Achievement"> | Date | string | null
    UserId?: StringWithAggregatesFilter<"Achievement"> | string
    Category?: StringWithAggregatesFilter<"Achievement"> | string
    Describe?: StringNullableWithAggregatesFilter<"Achievement"> | string | null
    CompetitionId?: StringWithAggregatesFilter<"Achievement"> | string
  }

  export type SeasonWhereInput = {
    AND?: SeasonWhereInput | SeasonWhereInput[]
    OR?: SeasonWhereInput[]
    NOT?: SeasonWhereInput | SeasonWhereInput[]
    Id?: StringFilter<"Season"> | string
    DateCreate?: DateTimeFilter<"Season"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Season"> | Date | string | null
    Name?: StringFilter<"Season"> | string
    StartDate?: IntFilter<"Season"> | number
    EndDate?: IntFilter<"Season"> | number
    Competition?: CompetitionListRelationFilter
  }

  export type SeasonOrderByWithRelationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Name?: SortOrder
    StartDate?: SortOrder
    EndDate?: SortOrder
    Competition?: CompetitionOrderByRelationAggregateInput
  }

  export type SeasonWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: SeasonWhereInput | SeasonWhereInput[]
    OR?: SeasonWhereInput[]
    NOT?: SeasonWhereInput | SeasonWhereInput[]
    DateCreate?: DateTimeFilter<"Season"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Season"> | Date | string | null
    Name?: StringFilter<"Season"> | string
    StartDate?: IntFilter<"Season"> | number
    EndDate?: IntFilter<"Season"> | number
    Competition?: CompetitionListRelationFilter
  }, "Id">

  export type SeasonOrderByWithAggregationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Name?: SortOrder
    StartDate?: SortOrder
    EndDate?: SortOrder
    _count?: SeasonCountOrderByAggregateInput
    _avg?: SeasonAvgOrderByAggregateInput
    _max?: SeasonMaxOrderByAggregateInput
    _min?: SeasonMinOrderByAggregateInput
    _sum?: SeasonSumOrderByAggregateInput
  }

  export type SeasonScalarWhereWithAggregatesInput = {
    AND?: SeasonScalarWhereWithAggregatesInput | SeasonScalarWhereWithAggregatesInput[]
    OR?: SeasonScalarWhereWithAggregatesInput[]
    NOT?: SeasonScalarWhereWithAggregatesInput | SeasonScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"Season"> | string
    DateCreate?: DateTimeWithAggregatesFilter<"Season"> | Date | string
    DateUpdate?: DateTimeNullableWithAggregatesFilter<"Season"> | Date | string | null
    Name?: StringWithAggregatesFilter<"Season"> | string
    StartDate?: IntWithAggregatesFilter<"Season"> | number
    EndDate?: IntWithAggregatesFilter<"Season"> | number
  }

  export type SubjectWhereInput = {
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    Id?: StringFilter<"Subject"> | string
    DateCreate?: DateTimeFilter<"Subject"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Subject"> | Date | string | null
    Name?: StringFilter<"Subject"> | string
    Competition?: CompetitionListRelationFilter
  }

  export type SubjectOrderByWithRelationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Name?: SortOrder
    Competition?: CompetitionOrderByRelationAggregateInput
  }

  export type SubjectWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    DateCreate?: DateTimeFilter<"Subject"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Subject"> | Date | string | null
    Name?: StringFilter<"Subject"> | string
    Competition?: CompetitionListRelationFilter
  }, "Id">

  export type SubjectOrderByWithAggregationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Name?: SortOrder
    _count?: SubjectCountOrderByAggregateInput
    _max?: SubjectMaxOrderByAggregateInput
    _min?: SubjectMinOrderByAggregateInput
  }

  export type SubjectScalarWhereWithAggregatesInput = {
    AND?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    OR?: SubjectScalarWhereWithAggregatesInput[]
    NOT?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"Subject"> | string
    DateCreate?: DateTimeWithAggregatesFilter<"Subject"> | Date | string
    DateUpdate?: DateTimeNullableWithAggregatesFilter<"Subject"> | Date | string | null
    Name?: StringWithAggregatesFilter<"Subject"> | string
  }

  export type CompetitionWhereInput = {
    AND?: CompetitionWhereInput | CompetitionWhereInput[]
    OR?: CompetitionWhereInput[]
    NOT?: CompetitionWhereInput | CompetitionWhereInput[]
    Id?: StringFilter<"Competition"> | string
    DateCreate?: DateTimeFilter<"Competition"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Competition"> | Date | string | null
    Name?: StringFilter<"Competition"> | string
    Description?: StringFilter<"Competition"> | string
    Date?: IntFilter<"Competition"> | number
    Level?: IntFilter<"Competition"> | number
    Stage?: EnumStageTypeFilter<"Competition"> | $Enums.StageType
    Price?: IntFilter<"Competition"> | number
    Location?: StringFilter<"Competition"> | string
    SeasonId?: StringFilter<"Competition"> | string
    RegionId?: StringFilter<"Competition"> | string
    SubjectId?: StringFilter<"Competition"> | string
    CodePackage?: StringNullableFilter<"Competition"> | string | null
    PathAnswer?: StringNullableFilter<"Competition"> | string | null
    regionId?: StringNullableFilter<"Competition"> | string | null
    Achievement?: AchievementListRelationFilter
    Region?: XOR<RegionRelationFilter, RegionWhereInput>
    Season?: XOR<SeasonRelationFilter, SeasonWhereInput>
    Subject?: XOR<SubjectRelationFilter, SubjectWhereInput>
    CompetitionParticipant?: CompetitionParticipantListRelationFilter
    CompetitionRoom?: CompetitionRoomListRelationFilter
    Kisi?: KisiListRelationFilter
    Subscription?: SubscriptionListRelationFilter
    Tryout?: TryoutListRelationFilter
  }

  export type CompetitionOrderByWithRelationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Name?: SortOrder
    Description?: SortOrder
    Date?: SortOrder
    Level?: SortOrder
    Stage?: SortOrder
    Price?: SortOrder
    Location?: SortOrder
    SeasonId?: SortOrder
    RegionId?: SortOrder
    SubjectId?: SortOrder
    CodePackage?: SortOrderInput | SortOrder
    PathAnswer?: SortOrderInput | SortOrder
    regionId?: SortOrderInput | SortOrder
    Achievement?: AchievementOrderByRelationAggregateInput
    Region?: RegionOrderByWithRelationInput
    Season?: SeasonOrderByWithRelationInput
    Subject?: SubjectOrderByWithRelationInput
    CompetitionParticipant?: CompetitionParticipantOrderByRelationAggregateInput
    CompetitionRoom?: CompetitionRoomOrderByRelationAggregateInput
    Kisi?: KisiOrderByRelationAggregateInput
    Subscription?: SubscriptionOrderByRelationAggregateInput
    Tryout?: TryoutOrderByRelationAggregateInput
  }

  export type CompetitionWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: CompetitionWhereInput | CompetitionWhereInput[]
    OR?: CompetitionWhereInput[]
    NOT?: CompetitionWhereInput | CompetitionWhereInput[]
    DateCreate?: DateTimeFilter<"Competition"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Competition"> | Date | string | null
    Name?: StringFilter<"Competition"> | string
    Description?: StringFilter<"Competition"> | string
    Date?: IntFilter<"Competition"> | number
    Level?: IntFilter<"Competition"> | number
    Stage?: EnumStageTypeFilter<"Competition"> | $Enums.StageType
    Price?: IntFilter<"Competition"> | number
    Location?: StringFilter<"Competition"> | string
    SeasonId?: StringFilter<"Competition"> | string
    RegionId?: StringFilter<"Competition"> | string
    SubjectId?: StringFilter<"Competition"> | string
    CodePackage?: StringNullableFilter<"Competition"> | string | null
    PathAnswer?: StringNullableFilter<"Competition"> | string | null
    regionId?: StringNullableFilter<"Competition"> | string | null
    Achievement?: AchievementListRelationFilter
    Region?: XOR<RegionRelationFilter, RegionWhereInput>
    Season?: XOR<SeasonRelationFilter, SeasonWhereInput>
    Subject?: XOR<SubjectRelationFilter, SubjectWhereInput>
    CompetitionParticipant?: CompetitionParticipantListRelationFilter
    CompetitionRoom?: CompetitionRoomListRelationFilter
    Kisi?: KisiListRelationFilter
    Subscription?: SubscriptionListRelationFilter
    Tryout?: TryoutListRelationFilter
  }, "Id">

  export type CompetitionOrderByWithAggregationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Name?: SortOrder
    Description?: SortOrder
    Date?: SortOrder
    Level?: SortOrder
    Stage?: SortOrder
    Price?: SortOrder
    Location?: SortOrder
    SeasonId?: SortOrder
    RegionId?: SortOrder
    SubjectId?: SortOrder
    CodePackage?: SortOrderInput | SortOrder
    PathAnswer?: SortOrderInput | SortOrder
    regionId?: SortOrderInput | SortOrder
    _count?: CompetitionCountOrderByAggregateInput
    _avg?: CompetitionAvgOrderByAggregateInput
    _max?: CompetitionMaxOrderByAggregateInput
    _min?: CompetitionMinOrderByAggregateInput
    _sum?: CompetitionSumOrderByAggregateInput
  }

  export type CompetitionScalarWhereWithAggregatesInput = {
    AND?: CompetitionScalarWhereWithAggregatesInput | CompetitionScalarWhereWithAggregatesInput[]
    OR?: CompetitionScalarWhereWithAggregatesInput[]
    NOT?: CompetitionScalarWhereWithAggregatesInput | CompetitionScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"Competition"> | string
    DateCreate?: DateTimeWithAggregatesFilter<"Competition"> | Date | string
    DateUpdate?: DateTimeNullableWithAggregatesFilter<"Competition"> | Date | string | null
    Name?: StringWithAggregatesFilter<"Competition"> | string
    Description?: StringWithAggregatesFilter<"Competition"> | string
    Date?: IntWithAggregatesFilter<"Competition"> | number
    Level?: IntWithAggregatesFilter<"Competition"> | number
    Stage?: EnumStageTypeWithAggregatesFilter<"Competition"> | $Enums.StageType
    Price?: IntWithAggregatesFilter<"Competition"> | number
    Location?: StringWithAggregatesFilter<"Competition"> | string
    SeasonId?: StringWithAggregatesFilter<"Competition"> | string
    RegionId?: StringWithAggregatesFilter<"Competition"> | string
    SubjectId?: StringWithAggregatesFilter<"Competition"> | string
    CodePackage?: StringNullableWithAggregatesFilter<"Competition"> | string | null
    PathAnswer?: StringNullableWithAggregatesFilter<"Competition"> | string | null
    regionId?: StringNullableWithAggregatesFilter<"Competition"> | string | null
  }

  export type SubscriptionWhereInput = {
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    Id?: StringFilter<"Subscription"> | string
    DateCreate?: DateTimeFilter<"Subscription"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    StartDate?: DateTimeFilter<"Subscription"> | Date | string
    EndDate?: DateTimeFilter<"Subscription"> | Date | string
    Status?: BoolFilter<"Subscription"> | boolean
    StudentId?: StringFilter<"Subscription"> | string
    CompetitionId?: StringNullableFilter<"Subscription"> | string | null
    Competition?: XOR<CompetitionNullableRelationFilter, CompetitionWhereInput> | null
    Student?: XOR<StudentRelationFilter, StudentWhereInput>
  }

  export type SubscriptionOrderByWithRelationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    StartDate?: SortOrder
    EndDate?: SortOrder
    Status?: SortOrder
    StudentId?: SortOrder
    CompetitionId?: SortOrderInput | SortOrder
    Competition?: CompetitionOrderByWithRelationInput
    Student?: StudentOrderByWithRelationInput
  }

  export type SubscriptionWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    DateCreate?: DateTimeFilter<"Subscription"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    StartDate?: DateTimeFilter<"Subscription"> | Date | string
    EndDate?: DateTimeFilter<"Subscription"> | Date | string
    Status?: BoolFilter<"Subscription"> | boolean
    StudentId?: StringFilter<"Subscription"> | string
    CompetitionId?: StringNullableFilter<"Subscription"> | string | null
    Competition?: XOR<CompetitionNullableRelationFilter, CompetitionWhereInput> | null
    Student?: XOR<StudentRelationFilter, StudentWhereInput>
  }, "Id">

  export type SubscriptionOrderByWithAggregationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    StartDate?: SortOrder
    EndDate?: SortOrder
    Status?: SortOrder
    StudentId?: SortOrder
    CompetitionId?: SortOrderInput | SortOrder
    _count?: SubscriptionCountOrderByAggregateInput
    _max?: SubscriptionMaxOrderByAggregateInput
    _min?: SubscriptionMinOrderByAggregateInput
  }

  export type SubscriptionScalarWhereWithAggregatesInput = {
    AND?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    OR?: SubscriptionScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"Subscription"> | string
    DateCreate?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    DateUpdate?: DateTimeNullableWithAggregatesFilter<"Subscription"> | Date | string | null
    StartDate?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    EndDate?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    Status?: BoolWithAggregatesFilter<"Subscription"> | boolean
    StudentId?: StringWithAggregatesFilter<"Subscription"> | string
    CompetitionId?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
  }

  export type RegionWhereInput = {
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    Id?: StringFilter<"Region"> | string
    DateCreate?: DateTimeFilter<"Region"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Region"> | Date | string | null
    Region?: IntFilter<"Region"> | number
    Name?: StringFilter<"Region"> | string
    RegionDetail?: StringFilter<"Region"> | string
    Competition?: CompetitionListRelationFilter
  }

  export type RegionOrderByWithRelationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Region?: SortOrder
    Name?: SortOrder
    RegionDetail?: SortOrder
    Competition?: CompetitionOrderByRelationAggregateInput
  }

  export type RegionWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    DateCreate?: DateTimeFilter<"Region"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Region"> | Date | string | null
    Region?: IntFilter<"Region"> | number
    Name?: StringFilter<"Region"> | string
    RegionDetail?: StringFilter<"Region"> | string
    Competition?: CompetitionListRelationFilter
  }, "Id">

  export type RegionOrderByWithAggregationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Region?: SortOrder
    Name?: SortOrder
    RegionDetail?: SortOrder
    _count?: RegionCountOrderByAggregateInput
    _avg?: RegionAvgOrderByAggregateInput
    _max?: RegionMaxOrderByAggregateInput
    _min?: RegionMinOrderByAggregateInput
    _sum?: RegionSumOrderByAggregateInput
  }

  export type RegionScalarWhereWithAggregatesInput = {
    AND?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    OR?: RegionScalarWhereWithAggregatesInput[]
    NOT?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"Region"> | string
    DateCreate?: DateTimeWithAggregatesFilter<"Region"> | Date | string
    DateUpdate?: DateTimeNullableWithAggregatesFilter<"Region"> | Date | string | null
    Region?: IntWithAggregatesFilter<"Region"> | number
    Name?: StringWithAggregatesFilter<"Region"> | string
    RegionDetail?: StringWithAggregatesFilter<"Region"> | string
  }

  export type SupervisorWhereInput = {
    AND?: SupervisorWhereInput | SupervisorWhereInput[]
    OR?: SupervisorWhereInput[]
    NOT?: SupervisorWhereInput | SupervisorWhereInput[]
    Id?: StringFilter<"Supervisor"> | string
    DateCreate?: DateTimeFilter<"Supervisor"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Supervisor"> | Date | string | null
    Name?: StringFilter<"Supervisor"> | string
    Birthdate?: IntFilter<"Supervisor"> | number
    PhoneNumber?: StringFilter<"Supervisor"> | string
    CompetitionRoom?: CompetitionRoomListRelationFilter
  }

  export type SupervisorOrderByWithRelationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Name?: SortOrder
    Birthdate?: SortOrder
    PhoneNumber?: SortOrder
    CompetitionRoom?: CompetitionRoomOrderByRelationAggregateInput
  }

  export type SupervisorWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: SupervisorWhereInput | SupervisorWhereInput[]
    OR?: SupervisorWhereInput[]
    NOT?: SupervisorWhereInput | SupervisorWhereInput[]
    DateCreate?: DateTimeFilter<"Supervisor"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Supervisor"> | Date | string | null
    Name?: StringFilter<"Supervisor"> | string
    Birthdate?: IntFilter<"Supervisor"> | number
    PhoneNumber?: StringFilter<"Supervisor"> | string
    CompetitionRoom?: CompetitionRoomListRelationFilter
  }, "Id">

  export type SupervisorOrderByWithAggregationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Name?: SortOrder
    Birthdate?: SortOrder
    PhoneNumber?: SortOrder
    _count?: SupervisorCountOrderByAggregateInput
    _avg?: SupervisorAvgOrderByAggregateInput
    _max?: SupervisorMaxOrderByAggregateInput
    _min?: SupervisorMinOrderByAggregateInput
    _sum?: SupervisorSumOrderByAggregateInput
  }

  export type SupervisorScalarWhereWithAggregatesInput = {
    AND?: SupervisorScalarWhereWithAggregatesInput | SupervisorScalarWhereWithAggregatesInput[]
    OR?: SupervisorScalarWhereWithAggregatesInput[]
    NOT?: SupervisorScalarWhereWithAggregatesInput | SupervisorScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"Supervisor"> | string
    DateCreate?: DateTimeWithAggregatesFilter<"Supervisor"> | Date | string
    DateUpdate?: DateTimeNullableWithAggregatesFilter<"Supervisor"> | Date | string | null
    Name?: StringWithAggregatesFilter<"Supervisor"> | string
    Birthdate?: IntWithAggregatesFilter<"Supervisor"> | number
    PhoneNumber?: StringWithAggregatesFilter<"Supervisor"> | string
  }

  export type CompetitionRoomWhereInput = {
    AND?: CompetitionRoomWhereInput | CompetitionRoomWhereInput[]
    OR?: CompetitionRoomWhereInput[]
    NOT?: CompetitionRoomWhereInput | CompetitionRoomWhereInput[]
    Id?: StringFilter<"CompetitionRoom"> | string
    DateCreate?: DateTimeFilter<"CompetitionRoom"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"CompetitionRoom"> | Date | string | null
    Name?: StringFilter<"CompetitionRoom"> | string
    CompetitionId?: StringFilter<"CompetitionRoom"> | string
    SupervisorId?: StringNullableFilter<"CompetitionRoom"> | string | null
    CompetitionParticipant?: CompetitionParticipantListRelationFilter
    Competition?: XOR<CompetitionRelationFilter, CompetitionWhereInput>
    Supervisor?: XOR<SupervisorNullableRelationFilter, SupervisorWhereInput> | null
  }

  export type CompetitionRoomOrderByWithRelationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Name?: SortOrder
    CompetitionId?: SortOrder
    SupervisorId?: SortOrderInput | SortOrder
    CompetitionParticipant?: CompetitionParticipantOrderByRelationAggregateInput
    Competition?: CompetitionOrderByWithRelationInput
    Supervisor?: SupervisorOrderByWithRelationInput
  }

  export type CompetitionRoomWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: CompetitionRoomWhereInput | CompetitionRoomWhereInput[]
    OR?: CompetitionRoomWhereInput[]
    NOT?: CompetitionRoomWhereInput | CompetitionRoomWhereInput[]
    DateCreate?: DateTimeFilter<"CompetitionRoom"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"CompetitionRoom"> | Date | string | null
    Name?: StringFilter<"CompetitionRoom"> | string
    CompetitionId?: StringFilter<"CompetitionRoom"> | string
    SupervisorId?: StringNullableFilter<"CompetitionRoom"> | string | null
    CompetitionParticipant?: CompetitionParticipantListRelationFilter
    Competition?: XOR<CompetitionRelationFilter, CompetitionWhereInput>
    Supervisor?: XOR<SupervisorNullableRelationFilter, SupervisorWhereInput> | null
  }, "Id">

  export type CompetitionRoomOrderByWithAggregationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Name?: SortOrder
    CompetitionId?: SortOrder
    SupervisorId?: SortOrderInput | SortOrder
    _count?: CompetitionRoomCountOrderByAggregateInput
    _max?: CompetitionRoomMaxOrderByAggregateInput
    _min?: CompetitionRoomMinOrderByAggregateInput
  }

  export type CompetitionRoomScalarWhereWithAggregatesInput = {
    AND?: CompetitionRoomScalarWhereWithAggregatesInput | CompetitionRoomScalarWhereWithAggregatesInput[]
    OR?: CompetitionRoomScalarWhereWithAggregatesInput[]
    NOT?: CompetitionRoomScalarWhereWithAggregatesInput | CompetitionRoomScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"CompetitionRoom"> | string
    DateCreate?: DateTimeWithAggregatesFilter<"CompetitionRoom"> | Date | string
    DateUpdate?: DateTimeNullableWithAggregatesFilter<"CompetitionRoom"> | Date | string | null
    Name?: StringWithAggregatesFilter<"CompetitionRoom"> | string
    CompetitionId?: StringWithAggregatesFilter<"CompetitionRoom"> | string
    SupervisorId?: StringNullableWithAggregatesFilter<"CompetitionRoom"> | string | null
  }

  export type CompetitionParticipantWhereInput = {
    AND?: CompetitionParticipantWhereInput | CompetitionParticipantWhereInput[]
    OR?: CompetitionParticipantWhereInput[]
    NOT?: CompetitionParticipantWhereInput | CompetitionParticipantWhereInput[]
    Id?: StringFilter<"CompetitionParticipant"> | string
    DateCreate?: DateTimeFilter<"CompetitionParticipant"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"CompetitionParticipant"> | Date | string | null
    ParticipantId?: StringNullableFilter<"CompetitionParticipant"> | string | null
    StudentId?: StringFilter<"CompetitionParticipant"> | string
    CompetitionId?: StringFilter<"CompetitionParticipant"> | string
    CompetitionRoomId?: StringNullableFilter<"CompetitionParticipant"> | string | null
    PaymentId?: StringNullableFilter<"CompetitionParticipant"> | string | null
    Attedance?: BoolNullableFilter<"CompetitionParticipant"> | boolean | null
    Score?: IntNullableFilter<"CompetitionParticipant"> | number | null
    Correct?: IntNullableFilter<"CompetitionParticipant"> | number | null
    Incorrect?: IntNullableFilter<"CompetitionParticipant"> | number | null
    PathAnswer?: StringNullableFilter<"CompetitionParticipant"> | string | null
    Competition?: XOR<CompetitionRelationFilter, CompetitionWhereInput>
    CompetitionRoom?: XOR<CompetitionRoomNullableRelationFilter, CompetitionRoomWhereInput> | null
    Payment?: XOR<PaymentNullableRelationFilter, PaymentWhereInput> | null
    Student?: XOR<StudentRelationFilter, StudentWhereInput>
  }

  export type CompetitionParticipantOrderByWithRelationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    ParticipantId?: SortOrderInput | SortOrder
    StudentId?: SortOrder
    CompetitionId?: SortOrder
    CompetitionRoomId?: SortOrderInput | SortOrder
    PaymentId?: SortOrderInput | SortOrder
    Attedance?: SortOrderInput | SortOrder
    Score?: SortOrderInput | SortOrder
    Correct?: SortOrderInput | SortOrder
    Incorrect?: SortOrderInput | SortOrder
    PathAnswer?: SortOrderInput | SortOrder
    Competition?: CompetitionOrderByWithRelationInput
    CompetitionRoom?: CompetitionRoomOrderByWithRelationInput
    Payment?: PaymentOrderByWithRelationInput
    Student?: StudentOrderByWithRelationInput
  }

  export type CompetitionParticipantWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: CompetitionParticipantWhereInput | CompetitionParticipantWhereInput[]
    OR?: CompetitionParticipantWhereInput[]
    NOT?: CompetitionParticipantWhereInput | CompetitionParticipantWhereInput[]
    DateCreate?: DateTimeFilter<"CompetitionParticipant"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"CompetitionParticipant"> | Date | string | null
    ParticipantId?: StringNullableFilter<"CompetitionParticipant"> | string | null
    StudentId?: StringFilter<"CompetitionParticipant"> | string
    CompetitionId?: StringFilter<"CompetitionParticipant"> | string
    CompetitionRoomId?: StringNullableFilter<"CompetitionParticipant"> | string | null
    PaymentId?: StringNullableFilter<"CompetitionParticipant"> | string | null
    Attedance?: BoolNullableFilter<"CompetitionParticipant"> | boolean | null
    Score?: IntNullableFilter<"CompetitionParticipant"> | number | null
    Correct?: IntNullableFilter<"CompetitionParticipant"> | number | null
    Incorrect?: IntNullableFilter<"CompetitionParticipant"> | number | null
    PathAnswer?: StringNullableFilter<"CompetitionParticipant"> | string | null
    Competition?: XOR<CompetitionRelationFilter, CompetitionWhereInput>
    CompetitionRoom?: XOR<CompetitionRoomNullableRelationFilter, CompetitionRoomWhereInput> | null
    Payment?: XOR<PaymentNullableRelationFilter, PaymentWhereInput> | null
    Student?: XOR<StudentRelationFilter, StudentWhereInput>
  }, "Id">

  export type CompetitionParticipantOrderByWithAggregationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    ParticipantId?: SortOrderInput | SortOrder
    StudentId?: SortOrder
    CompetitionId?: SortOrder
    CompetitionRoomId?: SortOrderInput | SortOrder
    PaymentId?: SortOrderInput | SortOrder
    Attedance?: SortOrderInput | SortOrder
    Score?: SortOrderInput | SortOrder
    Correct?: SortOrderInput | SortOrder
    Incorrect?: SortOrderInput | SortOrder
    PathAnswer?: SortOrderInput | SortOrder
    _count?: CompetitionParticipantCountOrderByAggregateInput
    _avg?: CompetitionParticipantAvgOrderByAggregateInput
    _max?: CompetitionParticipantMaxOrderByAggregateInput
    _min?: CompetitionParticipantMinOrderByAggregateInput
    _sum?: CompetitionParticipantSumOrderByAggregateInput
  }

  export type CompetitionParticipantScalarWhereWithAggregatesInput = {
    AND?: CompetitionParticipantScalarWhereWithAggregatesInput | CompetitionParticipantScalarWhereWithAggregatesInput[]
    OR?: CompetitionParticipantScalarWhereWithAggregatesInput[]
    NOT?: CompetitionParticipantScalarWhereWithAggregatesInput | CompetitionParticipantScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"CompetitionParticipant"> | string
    DateCreate?: DateTimeWithAggregatesFilter<"CompetitionParticipant"> | Date | string
    DateUpdate?: DateTimeNullableWithAggregatesFilter<"CompetitionParticipant"> | Date | string | null
    ParticipantId?: StringNullableWithAggregatesFilter<"CompetitionParticipant"> | string | null
    StudentId?: StringWithAggregatesFilter<"CompetitionParticipant"> | string
    CompetitionId?: StringWithAggregatesFilter<"CompetitionParticipant"> | string
    CompetitionRoomId?: StringNullableWithAggregatesFilter<"CompetitionParticipant"> | string | null
    PaymentId?: StringNullableWithAggregatesFilter<"CompetitionParticipant"> | string | null
    Attedance?: BoolNullableWithAggregatesFilter<"CompetitionParticipant"> | boolean | null
    Score?: IntNullableWithAggregatesFilter<"CompetitionParticipant"> | number | null
    Correct?: IntNullableWithAggregatesFilter<"CompetitionParticipant"> | number | null
    Incorrect?: IntNullableWithAggregatesFilter<"CompetitionParticipant"> | number | null
    PathAnswer?: StringNullableWithAggregatesFilter<"CompetitionParticipant"> | string | null
  }

  export type KisiWhereInput = {
    AND?: KisiWhereInput | KisiWhereInput[]
    OR?: KisiWhereInput[]
    NOT?: KisiWhereInput | KisiWhereInput[]
    Id?: StringFilter<"Kisi"> | string
    DateCreate?: DateTimeFilter<"Kisi"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Kisi"> | Date | string | null
    Header?: StringNullableFilter<"Kisi"> | string | null
    Content?: StringFilter<"Kisi"> | string
    CompetitionId?: StringFilter<"Kisi"> | string
    Competition?: XOR<CompetitionRelationFilter, CompetitionWhereInput>
  }

  export type KisiOrderByWithRelationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Header?: SortOrderInput | SortOrder
    Content?: SortOrder
    CompetitionId?: SortOrder
    Competition?: CompetitionOrderByWithRelationInput
  }

  export type KisiWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: KisiWhereInput | KisiWhereInput[]
    OR?: KisiWhereInput[]
    NOT?: KisiWhereInput | KisiWhereInput[]
    DateCreate?: DateTimeFilter<"Kisi"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Kisi"> | Date | string | null
    Header?: StringNullableFilter<"Kisi"> | string | null
    Content?: StringFilter<"Kisi"> | string
    CompetitionId?: StringFilter<"Kisi"> | string
    Competition?: XOR<CompetitionRelationFilter, CompetitionWhereInput>
  }, "Id">

  export type KisiOrderByWithAggregationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Header?: SortOrderInput | SortOrder
    Content?: SortOrder
    CompetitionId?: SortOrder
    _count?: KisiCountOrderByAggregateInput
    _max?: KisiMaxOrderByAggregateInput
    _min?: KisiMinOrderByAggregateInput
  }

  export type KisiScalarWhereWithAggregatesInput = {
    AND?: KisiScalarWhereWithAggregatesInput | KisiScalarWhereWithAggregatesInput[]
    OR?: KisiScalarWhereWithAggregatesInput[]
    NOT?: KisiScalarWhereWithAggregatesInput | KisiScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"Kisi"> | string
    DateCreate?: DateTimeWithAggregatesFilter<"Kisi"> | Date | string
    DateUpdate?: DateTimeNullableWithAggregatesFilter<"Kisi"> | Date | string | null
    Header?: StringNullableWithAggregatesFilter<"Kisi"> | string | null
    Content?: StringWithAggregatesFilter<"Kisi"> | string
    CompetitionId?: StringWithAggregatesFilter<"Kisi"> | string
  }

  export type TryoutWhereInput = {
    AND?: TryoutWhereInput | TryoutWhereInput[]
    OR?: TryoutWhereInput[]
    NOT?: TryoutWhereInput | TryoutWhereInput[]
    Id?: StringFilter<"Tryout"> | string
    DateCreate?: DateTimeFilter<"Tryout"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Tryout"> | Date | string | null
    Name?: StringFilter<"Tryout"> | string
    CompetitionId?: StringFilter<"Tryout"> | string
    Question?: QuestionListRelationFilter
    Competition?: XOR<CompetitionRelationFilter, CompetitionWhereInput>
  }

  export type TryoutOrderByWithRelationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Name?: SortOrder
    CompetitionId?: SortOrder
    Question?: QuestionOrderByRelationAggregateInput
    Competition?: CompetitionOrderByWithRelationInput
  }

  export type TryoutWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: TryoutWhereInput | TryoutWhereInput[]
    OR?: TryoutWhereInput[]
    NOT?: TryoutWhereInput | TryoutWhereInput[]
    DateCreate?: DateTimeFilter<"Tryout"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Tryout"> | Date | string | null
    Name?: StringFilter<"Tryout"> | string
    CompetitionId?: StringFilter<"Tryout"> | string
    Question?: QuestionListRelationFilter
    Competition?: XOR<CompetitionRelationFilter, CompetitionWhereInput>
  }, "Id">

  export type TryoutOrderByWithAggregationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Name?: SortOrder
    CompetitionId?: SortOrder
    _count?: TryoutCountOrderByAggregateInput
    _max?: TryoutMaxOrderByAggregateInput
    _min?: TryoutMinOrderByAggregateInput
  }

  export type TryoutScalarWhereWithAggregatesInput = {
    AND?: TryoutScalarWhereWithAggregatesInput | TryoutScalarWhereWithAggregatesInput[]
    OR?: TryoutScalarWhereWithAggregatesInput[]
    NOT?: TryoutScalarWhereWithAggregatesInput | TryoutScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"Tryout"> | string
    DateCreate?: DateTimeWithAggregatesFilter<"Tryout"> | Date | string
    DateUpdate?: DateTimeNullableWithAggregatesFilter<"Tryout"> | Date | string | null
    Name?: StringWithAggregatesFilter<"Tryout"> | string
    CompetitionId?: StringWithAggregatesFilter<"Tryout"> | string
  }

  export type QuestionWhereInput = {
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    Id?: StringFilter<"Question"> | string
    DateCreate?: DateTimeFilter<"Question"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Question"> | Date | string | null
    TryoutId?: StringFilter<"Question"> | string
    Content?: StringFilter<"Question"> | string
    Option?: OptionListRelationFilter
    Tryout?: XOR<TryoutRelationFilter, TryoutWhereInput>
  }

  export type QuestionOrderByWithRelationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    TryoutId?: SortOrder
    Content?: SortOrder
    Option?: OptionOrderByRelationAggregateInput
    Tryout?: TryoutOrderByWithRelationInput
  }

  export type QuestionWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    DateCreate?: DateTimeFilter<"Question"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Question"> | Date | string | null
    TryoutId?: StringFilter<"Question"> | string
    Content?: StringFilter<"Question"> | string
    Option?: OptionListRelationFilter
    Tryout?: XOR<TryoutRelationFilter, TryoutWhereInput>
  }, "Id">

  export type QuestionOrderByWithAggregationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    TryoutId?: SortOrder
    Content?: SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    OR?: QuestionScalarWhereWithAggregatesInput[]
    NOT?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"Question"> | string
    DateCreate?: DateTimeWithAggregatesFilter<"Question"> | Date | string
    DateUpdate?: DateTimeNullableWithAggregatesFilter<"Question"> | Date | string | null
    TryoutId?: StringWithAggregatesFilter<"Question"> | string
    Content?: StringWithAggregatesFilter<"Question"> | string
  }

  export type OptionWhereInput = {
    AND?: OptionWhereInput | OptionWhereInput[]
    OR?: OptionWhereInput[]
    NOT?: OptionWhereInput | OptionWhereInput[]
    Id?: StringFilter<"Option"> | string
    DateCreate?: DateTimeFilter<"Option"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Option"> | Date | string | null
    Answer?: StringFilter<"Option"> | string
    IsCorrect?: BoolFilter<"Option"> | boolean
    QuestionId?: StringFilter<"Option"> | string
    Question?: XOR<QuestionRelationFilter, QuestionWhereInput>
  }

  export type OptionOrderByWithRelationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Answer?: SortOrder
    IsCorrect?: SortOrder
    QuestionId?: SortOrder
    Question?: QuestionOrderByWithRelationInput
  }

  export type OptionWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: OptionWhereInput | OptionWhereInput[]
    OR?: OptionWhereInput[]
    NOT?: OptionWhereInput | OptionWhereInput[]
    DateCreate?: DateTimeFilter<"Option"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Option"> | Date | string | null
    Answer?: StringFilter<"Option"> | string
    IsCorrect?: BoolFilter<"Option"> | boolean
    QuestionId?: StringFilter<"Option"> | string
    Question?: XOR<QuestionRelationFilter, QuestionWhereInput>
  }, "Id">

  export type OptionOrderByWithAggregationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Answer?: SortOrder
    IsCorrect?: SortOrder
    QuestionId?: SortOrder
    _count?: OptionCountOrderByAggregateInput
    _max?: OptionMaxOrderByAggregateInput
    _min?: OptionMinOrderByAggregateInput
  }

  export type OptionScalarWhereWithAggregatesInput = {
    AND?: OptionScalarWhereWithAggregatesInput | OptionScalarWhereWithAggregatesInput[]
    OR?: OptionScalarWhereWithAggregatesInput[]
    NOT?: OptionScalarWhereWithAggregatesInput | OptionScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"Option"> | string
    DateCreate?: DateTimeWithAggregatesFilter<"Option"> | Date | string
    DateUpdate?: DateTimeNullableWithAggregatesFilter<"Option"> | Date | string | null
    Answer?: StringWithAggregatesFilter<"Option"> | string
    IsCorrect?: BoolWithAggregatesFilter<"Option"> | boolean
    QuestionId?: StringWithAggregatesFilter<"Option"> | string
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    Id?: StringFilter<"Payment"> | string
    DateCreate?: DateTimeFilter<"Payment"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Payment"> | Date | string | null
    Invoice?: StringFilter<"Payment"> | string
    Date?: IntFilter<"Payment"> | number
    Amount?: IntFilter<"Payment"> | number
    UserId?: StringNullableFilter<"Payment"> | string | null
    Status?: EnumPaymentTypeFilter<"Payment"> | $Enums.PaymentType
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    CompetitionParticipant?: CompetitionParticipantListRelationFilter
    PaymentStatusHistory?: PaymentStatusHistoryListRelationFilter
  }

  export type PaymentOrderByWithRelationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Invoice?: SortOrder
    Date?: SortOrder
    Amount?: SortOrder
    UserId?: SortOrderInput | SortOrder
    Status?: SortOrder
    User?: UserOrderByWithRelationInput
    CompetitionParticipant?: CompetitionParticipantOrderByRelationAggregateInput
    PaymentStatusHistory?: PaymentStatusHistoryOrderByRelationAggregateInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    DateCreate?: DateTimeFilter<"Payment"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Payment"> | Date | string | null
    Invoice?: StringFilter<"Payment"> | string
    Date?: IntFilter<"Payment"> | number
    Amount?: IntFilter<"Payment"> | number
    UserId?: StringNullableFilter<"Payment"> | string | null
    Status?: EnumPaymentTypeFilter<"Payment"> | $Enums.PaymentType
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    CompetitionParticipant?: CompetitionParticipantListRelationFilter
    PaymentStatusHistory?: PaymentStatusHistoryListRelationFilter
  }, "Id">

  export type PaymentOrderByWithAggregationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Invoice?: SortOrder
    Date?: SortOrder
    Amount?: SortOrder
    UserId?: SortOrderInput | SortOrder
    Status?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"Payment"> | string
    DateCreate?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    DateUpdate?: DateTimeNullableWithAggregatesFilter<"Payment"> | Date | string | null
    Invoice?: StringWithAggregatesFilter<"Payment"> | string
    Date?: IntWithAggregatesFilter<"Payment"> | number
    Amount?: IntWithAggregatesFilter<"Payment"> | number
    UserId?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    Status?: EnumPaymentTypeWithAggregatesFilter<"Payment"> | $Enums.PaymentType
  }

  export type PaymentStatusHistoryWhereInput = {
    AND?: PaymentStatusHistoryWhereInput | PaymentStatusHistoryWhereInput[]
    OR?: PaymentStatusHistoryWhereInput[]
    NOT?: PaymentStatusHistoryWhereInput | PaymentStatusHistoryWhereInput[]
    Id?: StringFilter<"PaymentStatusHistory"> | string
    DateCreate?: DateTimeFilter<"PaymentStatusHistory"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"PaymentStatusHistory"> | Date | string | null
    PaymentId?: StringFilter<"PaymentStatusHistory"> | string
    Status?: EnumPaymentTypeFilter<"PaymentStatusHistory"> | $Enums.PaymentType
    Date?: IntFilter<"PaymentStatusHistory"> | number
    Payment?: XOR<PaymentRelationFilter, PaymentWhereInput>
  }

  export type PaymentStatusHistoryOrderByWithRelationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    PaymentId?: SortOrder
    Status?: SortOrder
    Date?: SortOrder
    Payment?: PaymentOrderByWithRelationInput
  }

  export type PaymentStatusHistoryWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: PaymentStatusHistoryWhereInput | PaymentStatusHistoryWhereInput[]
    OR?: PaymentStatusHistoryWhereInput[]
    NOT?: PaymentStatusHistoryWhereInput | PaymentStatusHistoryWhereInput[]
    DateCreate?: DateTimeFilter<"PaymentStatusHistory"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"PaymentStatusHistory"> | Date | string | null
    PaymentId?: StringFilter<"PaymentStatusHistory"> | string
    Status?: EnumPaymentTypeFilter<"PaymentStatusHistory"> | $Enums.PaymentType
    Date?: IntFilter<"PaymentStatusHistory"> | number
    Payment?: XOR<PaymentRelationFilter, PaymentWhereInput>
  }, "Id">

  export type PaymentStatusHistoryOrderByWithAggregationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    PaymentId?: SortOrder
    Status?: SortOrder
    Date?: SortOrder
    _count?: PaymentStatusHistoryCountOrderByAggregateInput
    _avg?: PaymentStatusHistoryAvgOrderByAggregateInput
    _max?: PaymentStatusHistoryMaxOrderByAggregateInput
    _min?: PaymentStatusHistoryMinOrderByAggregateInput
    _sum?: PaymentStatusHistorySumOrderByAggregateInput
  }

  export type PaymentStatusHistoryScalarWhereWithAggregatesInput = {
    AND?: PaymentStatusHistoryScalarWhereWithAggregatesInput | PaymentStatusHistoryScalarWhereWithAggregatesInput[]
    OR?: PaymentStatusHistoryScalarWhereWithAggregatesInput[]
    NOT?: PaymentStatusHistoryScalarWhereWithAggregatesInput | PaymentStatusHistoryScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"PaymentStatusHistory"> | string
    DateCreate?: DateTimeWithAggregatesFilter<"PaymentStatusHistory"> | Date | string
    DateUpdate?: DateTimeNullableWithAggregatesFilter<"PaymentStatusHistory"> | Date | string | null
    PaymentId?: StringWithAggregatesFilter<"PaymentStatusHistory"> | string
    Status?: EnumPaymentTypeWithAggregatesFilter<"PaymentStatusHistory"> | $Enums.PaymentType
    Date?: IntWithAggregatesFilter<"PaymentStatusHistory"> | number
  }

  export type SchoolWhereInput = {
    AND?: SchoolWhereInput | SchoolWhereInput[]
    OR?: SchoolWhereInput[]
    NOT?: SchoolWhereInput | SchoolWhereInput[]
    Id?: StringFilter<"School"> | string
    DateCreate?: DateTimeFilter<"School"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"School"> | Date | string | null
    Name?: StringFilter<"School"> | string
    Stage?: EnumStageTypeFilter<"School"> | $Enums.StageType
    Subdistrict?: EnumSubdistrictFilter<"School"> | $Enums.Subdistrict
    Ward?: StringFilter<"School"> | string
    Status?: EnumStatusSchoolFilter<"School"> | $Enums.StatusSchool
    Student?: StudentListRelationFilter
  }

  export type SchoolOrderByWithRelationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Name?: SortOrder
    Stage?: SortOrder
    Subdistrict?: SortOrder
    Ward?: SortOrder
    Status?: SortOrder
    Student?: StudentOrderByRelationAggregateInput
  }

  export type SchoolWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: SchoolWhereInput | SchoolWhereInput[]
    OR?: SchoolWhereInput[]
    NOT?: SchoolWhereInput | SchoolWhereInput[]
    DateCreate?: DateTimeFilter<"School"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"School"> | Date | string | null
    Name?: StringFilter<"School"> | string
    Stage?: EnumStageTypeFilter<"School"> | $Enums.StageType
    Subdistrict?: EnumSubdistrictFilter<"School"> | $Enums.Subdistrict
    Ward?: StringFilter<"School"> | string
    Status?: EnumStatusSchoolFilter<"School"> | $Enums.StatusSchool
    Student?: StudentListRelationFilter
  }, "Id">

  export type SchoolOrderByWithAggregationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Name?: SortOrder
    Stage?: SortOrder
    Subdistrict?: SortOrder
    Ward?: SortOrder
    Status?: SortOrder
    _count?: SchoolCountOrderByAggregateInput
    _max?: SchoolMaxOrderByAggregateInput
    _min?: SchoolMinOrderByAggregateInput
  }

  export type SchoolScalarWhereWithAggregatesInput = {
    AND?: SchoolScalarWhereWithAggregatesInput | SchoolScalarWhereWithAggregatesInput[]
    OR?: SchoolScalarWhereWithAggregatesInput[]
    NOT?: SchoolScalarWhereWithAggregatesInput | SchoolScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"School"> | string
    DateCreate?: DateTimeWithAggregatesFilter<"School"> | Date | string
    DateUpdate?: DateTimeNullableWithAggregatesFilter<"School"> | Date | string | null
    Name?: StringWithAggregatesFilter<"School"> | string
    Stage?: EnumStageTypeWithAggregatesFilter<"School"> | $Enums.StageType
    Subdistrict?: EnumSubdistrictWithAggregatesFilter<"School"> | $Enums.Subdistrict
    Ward?: StringWithAggregatesFilter<"School"> | string
    Status?: EnumStatusSchoolWithAggregatesFilter<"School"> | $Enums.StatusSchool
  }

  export type NewsWhereInput = {
    AND?: NewsWhereInput | NewsWhereInput[]
    OR?: NewsWhereInput[]
    NOT?: NewsWhereInput | NewsWhereInput[]
    Id?: StringFilter<"News"> | string
    DateCreate?: DateTimeFilter<"News"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"News"> | Date | string | null
    Title?: StringFilter<"News"> | string
    Description?: StringFilter<"News"> | string
  }

  export type NewsOrderByWithRelationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Title?: SortOrder
    Description?: SortOrder
  }

  export type NewsWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: NewsWhereInput | NewsWhereInput[]
    OR?: NewsWhereInput[]
    NOT?: NewsWhereInput | NewsWhereInput[]
    DateCreate?: DateTimeFilter<"News"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"News"> | Date | string | null
    Title?: StringFilter<"News"> | string
    Description?: StringFilter<"News"> | string
  }, "Id">

  export type NewsOrderByWithAggregationInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrderInput | SortOrder
    Title?: SortOrder
    Description?: SortOrder
    _count?: NewsCountOrderByAggregateInput
    _max?: NewsMaxOrderByAggregateInput
    _min?: NewsMinOrderByAggregateInput
  }

  export type NewsScalarWhereWithAggregatesInput = {
    AND?: NewsScalarWhereWithAggregatesInput | NewsScalarWhereWithAggregatesInput[]
    OR?: NewsScalarWhereWithAggregatesInput[]
    NOT?: NewsScalarWhereWithAggregatesInput | NewsScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"News"> | string
    DateCreate?: DateTimeWithAggregatesFilter<"News"> | Date | string
    DateUpdate?: DateTimeNullableWithAggregatesFilter<"News"> | Date | string | null
    Title?: StringWithAggregatesFilter<"News"> | string
    Description?: StringWithAggregatesFilter<"News"> | string
  }

  export type RoleCreateInput = {
    Id: string
    Name: $Enums.RoleType
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    User?: UserCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    Id: string
    Name: $Enums.RoleType
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    User?: UserUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    Name?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UserUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    Name?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UserUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    Id: string
    Name: $Enums.RoleType
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
  }

  export type RoleUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
    Name?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RoleUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    Name?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Username: string
    Password: string
    Birthdate: number
    BirthPlace?: string | null
    PhoneNumber: string
    Gender: boolean
    Email?: string | null
    Status?: $Enums.ActiveStatus
    Achievement?: AchievementCreateNestedManyWithoutUserInput
    Student?: StudentCreateNestedManyWithoutUserInput
    Role: RoleCreateNestedOneWithoutUserInput
    Payment?: PaymentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Username: string
    Password: string
    RoleId: string
    Birthdate: number
    BirthPlace?: string | null
    PhoneNumber: string
    Gender: boolean
    Email?: string | null
    Status?: $Enums.ActiveStatus
    Achievement?: AchievementUncheckedCreateNestedManyWithoutUserInput
    Student?: StudentUncheckedCreateNestedManyWithoutUserInput
    Payment?: PaymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Birthdate?: IntFieldUpdateOperationsInput | number
    BirthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    Gender?: BoolFieldUpdateOperationsInput | boolean
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: EnumActiveStatusFieldUpdateOperationsInput | $Enums.ActiveStatus
    Achievement?: AchievementUpdateManyWithoutUserNestedInput
    Student?: StudentUpdateManyWithoutUserNestedInput
    Role?: RoleUpdateOneRequiredWithoutUserNestedInput
    Payment?: PaymentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    RoleId?: StringFieldUpdateOperationsInput | string
    Birthdate?: IntFieldUpdateOperationsInput | number
    BirthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    Gender?: BoolFieldUpdateOperationsInput | boolean
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: EnumActiveStatusFieldUpdateOperationsInput | $Enums.ActiveStatus
    Achievement?: AchievementUncheckedUpdateManyWithoutUserNestedInput
    Student?: StudentUncheckedUpdateManyWithoutUserNestedInput
    Payment?: PaymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Username: string
    Password: string
    RoleId: string
    Birthdate: number
    BirthPlace?: string | null
    PhoneNumber: string
    Gender: boolean
    Email?: string | null
    Status?: $Enums.ActiveStatus
  }

  export type UserUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Birthdate?: IntFieldUpdateOperationsInput | number
    BirthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    Gender?: BoolFieldUpdateOperationsInput | boolean
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: EnumActiveStatusFieldUpdateOperationsInput | $Enums.ActiveStatus
  }

  export type UserUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    RoleId?: StringFieldUpdateOperationsInput | string
    Birthdate?: IntFieldUpdateOperationsInput | number
    BirthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    Gender?: BoolFieldUpdateOperationsInput | boolean
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: EnumActiveStatusFieldUpdateOperationsInput | $Enums.ActiveStatus
  }

  export type StudentCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    IdMember?: string | null
    Address: string
    Stage: $Enums.StageType
    Class: string
    NIK: string
    FatherName?: string | null
    MotherName?: string | null
    PhotoPath?: string | null
    Poin?: number
    CompetitionParticipant?: CompetitionParticipantCreateNestedManyWithoutStudentInput
    User: UserCreateNestedOneWithoutStudentInput
    School: SchoolCreateNestedOneWithoutStudentInput
    Subscription?: SubscriptionCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    IdMember?: string | null
    Address: string
    Stage: $Enums.StageType
    Class: string
    SchoolId: string
    NIK: string
    FatherName?: string | null
    MotherName?: string | null
    IdUser: string
    PhotoPath?: string | null
    Poin?: number
    CompetitionParticipant?: CompetitionParticipantUncheckedCreateNestedManyWithoutStudentInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    IdMember?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: StringFieldUpdateOperationsInput | string
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Class?: StringFieldUpdateOperationsInput | string
    NIK?: StringFieldUpdateOperationsInput | string
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    PhotoPath?: NullableStringFieldUpdateOperationsInput | string | null
    Poin?: IntFieldUpdateOperationsInput | number
    CompetitionParticipant?: CompetitionParticipantUpdateManyWithoutStudentNestedInput
    User?: UserUpdateOneRequiredWithoutStudentNestedInput
    School?: SchoolUpdateOneRequiredWithoutStudentNestedInput
    Subscription?: SubscriptionUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    IdMember?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: StringFieldUpdateOperationsInput | string
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Class?: StringFieldUpdateOperationsInput | string
    SchoolId?: StringFieldUpdateOperationsInput | string
    NIK?: StringFieldUpdateOperationsInput | string
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    IdUser?: StringFieldUpdateOperationsInput | string
    PhotoPath?: NullableStringFieldUpdateOperationsInput | string | null
    Poin?: IntFieldUpdateOperationsInput | number
    CompetitionParticipant?: CompetitionParticipantUncheckedUpdateManyWithoutStudentNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentCreateManyInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    IdMember?: string | null
    Address: string
    Stage: $Enums.StageType
    Class: string
    SchoolId: string
    NIK: string
    FatherName?: string | null
    MotherName?: string | null
    IdUser: string
    PhotoPath?: string | null
    Poin?: number
  }

  export type StudentUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    IdMember?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: StringFieldUpdateOperationsInput | string
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Class?: StringFieldUpdateOperationsInput | string
    NIK?: StringFieldUpdateOperationsInput | string
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    PhotoPath?: NullableStringFieldUpdateOperationsInput | string | null
    Poin?: IntFieldUpdateOperationsInput | number
  }

  export type StudentUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    IdMember?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: StringFieldUpdateOperationsInput | string
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Class?: StringFieldUpdateOperationsInput | string
    SchoolId?: StringFieldUpdateOperationsInput | string
    NIK?: StringFieldUpdateOperationsInput | string
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    IdUser?: StringFieldUpdateOperationsInput | string
    PhotoPath?: NullableStringFieldUpdateOperationsInput | string | null
    Poin?: IntFieldUpdateOperationsInput | number
  }

  export type AchievementCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Category: string
    Describe?: string | null
    Competition: CompetitionCreateNestedOneWithoutAchievementInput
    User: UserCreateNestedOneWithoutAchievementInput
  }

  export type AchievementUncheckedCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    UserId: string
    Category: string
    Describe?: string | null
    CompetitionId: string
  }

  export type AchievementUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Category?: StringFieldUpdateOperationsInput | string
    Describe?: NullableStringFieldUpdateOperationsInput | string | null
    Competition?: CompetitionUpdateOneRequiredWithoutAchievementNestedInput
    User?: UserUpdateOneRequiredWithoutAchievementNestedInput
  }

  export type AchievementUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    UserId?: StringFieldUpdateOperationsInput | string
    Category?: StringFieldUpdateOperationsInput | string
    Describe?: NullableStringFieldUpdateOperationsInput | string | null
    CompetitionId?: StringFieldUpdateOperationsInput | string
  }

  export type AchievementCreateManyInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    UserId: string
    Category: string
    Describe?: string | null
    CompetitionId: string
  }

  export type AchievementUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Category?: StringFieldUpdateOperationsInput | string
    Describe?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AchievementUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    UserId?: StringFieldUpdateOperationsInput | string
    Category?: StringFieldUpdateOperationsInput | string
    Describe?: NullableStringFieldUpdateOperationsInput | string | null
    CompetitionId?: StringFieldUpdateOperationsInput | string
  }

  export type SeasonCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    StartDate: number
    EndDate: number
    Competition?: CompetitionCreateNestedManyWithoutSeasonInput
  }

  export type SeasonUncheckedCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    StartDate: number
    EndDate: number
    Competition?: CompetitionUncheckedCreateNestedManyWithoutSeasonInput
  }

  export type SeasonUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    StartDate?: IntFieldUpdateOperationsInput | number
    EndDate?: IntFieldUpdateOperationsInput | number
    Competition?: CompetitionUpdateManyWithoutSeasonNestedInput
  }

  export type SeasonUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    StartDate?: IntFieldUpdateOperationsInput | number
    EndDate?: IntFieldUpdateOperationsInput | number
    Competition?: CompetitionUncheckedUpdateManyWithoutSeasonNestedInput
  }

  export type SeasonCreateManyInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    StartDate: number
    EndDate: number
  }

  export type SeasonUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    StartDate?: IntFieldUpdateOperationsInput | number
    EndDate?: IntFieldUpdateOperationsInput | number
  }

  export type SeasonUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    StartDate?: IntFieldUpdateOperationsInput | number
    EndDate?: IntFieldUpdateOperationsInput | number
  }

  export type SubjectCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Competition?: CompetitionCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Competition?: CompetitionUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Competition?: CompetitionUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Competition?: CompetitionUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectCreateManyInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
  }

  export type SubjectUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type SubjectUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type CompetitionCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
    Achievement?: AchievementCreateNestedManyWithoutCompetitionInput
    Region: RegionCreateNestedOneWithoutCompetitionInput
    Season: SeasonCreateNestedOneWithoutCompetitionInput
    Subject: SubjectCreateNestedOneWithoutCompetitionInput
    CompetitionParticipant?: CompetitionParticipantCreateNestedManyWithoutCompetitionInput
    CompetitionRoom?: CompetitionRoomCreateNestedManyWithoutCompetitionInput
    Kisi?: KisiCreateNestedManyWithoutCompetitionInput
    Subscription?: SubscriptionCreateNestedManyWithoutCompetitionInput
    Tryout?: TryoutCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionUncheckedCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    SeasonId: string
    RegionId: string
    SubjectId: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
    Achievement?: AchievementUncheckedCreateNestedManyWithoutCompetitionInput
    CompetitionParticipant?: CompetitionParticipantUncheckedCreateNestedManyWithoutCompetitionInput
    CompetitionRoom?: CompetitionRoomUncheckedCreateNestedManyWithoutCompetitionInput
    Kisi?: KisiUncheckedCreateNestedManyWithoutCompetitionInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutCompetitionInput
    Tryout?: TryoutUncheckedCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    Achievement?: AchievementUpdateManyWithoutCompetitionNestedInput
    Region?: RegionUpdateOneRequiredWithoutCompetitionNestedInput
    Season?: SeasonUpdateOneRequiredWithoutCompetitionNestedInput
    Subject?: SubjectUpdateOneRequiredWithoutCompetitionNestedInput
    CompetitionParticipant?: CompetitionParticipantUpdateManyWithoutCompetitionNestedInput
    CompetitionRoom?: CompetitionRoomUpdateManyWithoutCompetitionNestedInput
    Kisi?: KisiUpdateManyWithoutCompetitionNestedInput
    Subscription?: SubscriptionUpdateManyWithoutCompetitionNestedInput
    Tryout?: TryoutUpdateManyWithoutCompetitionNestedInput
  }

  export type CompetitionUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    SeasonId?: StringFieldUpdateOperationsInput | string
    RegionId?: StringFieldUpdateOperationsInput | string
    SubjectId?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    Achievement?: AchievementUncheckedUpdateManyWithoutCompetitionNestedInput
    CompetitionParticipant?: CompetitionParticipantUncheckedUpdateManyWithoutCompetitionNestedInput
    CompetitionRoom?: CompetitionRoomUncheckedUpdateManyWithoutCompetitionNestedInput
    Kisi?: KisiUncheckedUpdateManyWithoutCompetitionNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutCompetitionNestedInput
    Tryout?: TryoutUncheckedUpdateManyWithoutCompetitionNestedInput
  }

  export type CompetitionCreateManyInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    SeasonId: string
    RegionId: string
    SubjectId: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
  }

  export type CompetitionUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompetitionUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    SeasonId?: StringFieldUpdateOperationsInput | string
    RegionId?: StringFieldUpdateOperationsInput | string
    SubjectId?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SubscriptionCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    StartDate: Date | string
    EndDate: Date | string
    Status?: boolean
    Competition?: CompetitionCreateNestedOneWithoutSubscriptionInput
    Student: StudentCreateNestedOneWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    StartDate: Date | string
    EndDate: Date | string
    Status?: boolean
    StudentId: string
    CompetitionId?: string | null
  }

  export type SubscriptionUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    StartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    EndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    Competition?: CompetitionUpdateOneWithoutSubscriptionNestedInput
    Student?: StudentUpdateOneRequiredWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    StartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    EndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    StudentId?: StringFieldUpdateOperationsInput | string
    CompetitionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SubscriptionCreateManyInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    StartDate: Date | string
    EndDate: Date | string
    Status?: boolean
    StudentId: string
    CompetitionId?: string | null
  }

  export type SubscriptionUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    StartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    EndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SubscriptionUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    StartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    EndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    StudentId?: StringFieldUpdateOperationsInput | string
    CompetitionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RegionCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Region: number
    Name: string
    RegionDetail: string
    Competition?: CompetitionCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Region: number
    Name: string
    RegionDetail: string
    Competition?: CompetitionUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Region?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    RegionDetail?: StringFieldUpdateOperationsInput | string
    Competition?: CompetitionUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Region?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    RegionDetail?: StringFieldUpdateOperationsInput | string
    Competition?: CompetitionUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type RegionCreateManyInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Region: number
    Name: string
    RegionDetail: string
  }

  export type RegionUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Region?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    RegionDetail?: StringFieldUpdateOperationsInput | string
  }

  export type RegionUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Region?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    RegionDetail?: StringFieldUpdateOperationsInput | string
  }

  export type SupervisorCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Birthdate: number
    PhoneNumber: string
    CompetitionRoom?: CompetitionRoomCreateNestedManyWithoutSupervisorInput
  }

  export type SupervisorUncheckedCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Birthdate: number
    PhoneNumber: string
    CompetitionRoom?: CompetitionRoomUncheckedCreateNestedManyWithoutSupervisorInput
  }

  export type SupervisorUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Birthdate?: IntFieldUpdateOperationsInput | number
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    CompetitionRoom?: CompetitionRoomUpdateManyWithoutSupervisorNestedInput
  }

  export type SupervisorUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Birthdate?: IntFieldUpdateOperationsInput | number
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    CompetitionRoom?: CompetitionRoomUncheckedUpdateManyWithoutSupervisorNestedInput
  }

  export type SupervisorCreateManyInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Birthdate: number
    PhoneNumber: string
  }

  export type SupervisorUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Birthdate?: IntFieldUpdateOperationsInput | number
    PhoneNumber?: StringFieldUpdateOperationsInput | string
  }

  export type SupervisorUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Birthdate?: IntFieldUpdateOperationsInput | number
    PhoneNumber?: StringFieldUpdateOperationsInput | string
  }

  export type CompetitionRoomCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    CompetitionParticipant?: CompetitionParticipantCreateNestedManyWithoutCompetitionRoomInput
    Competition: CompetitionCreateNestedOneWithoutCompetitionRoomInput
    Supervisor?: SupervisorCreateNestedOneWithoutCompetitionRoomInput
  }

  export type CompetitionRoomUncheckedCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    CompetitionId: string
    SupervisorId?: string | null
    CompetitionParticipant?: CompetitionParticipantUncheckedCreateNestedManyWithoutCompetitionRoomInput
  }

  export type CompetitionRoomUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    CompetitionParticipant?: CompetitionParticipantUpdateManyWithoutCompetitionRoomNestedInput
    Competition?: CompetitionUpdateOneRequiredWithoutCompetitionRoomNestedInput
    Supervisor?: SupervisorUpdateOneWithoutCompetitionRoomNestedInput
  }

  export type CompetitionRoomUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    CompetitionId?: StringFieldUpdateOperationsInput | string
    SupervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    CompetitionParticipant?: CompetitionParticipantUncheckedUpdateManyWithoutCompetitionRoomNestedInput
  }

  export type CompetitionRoomCreateManyInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    CompetitionId: string
    SupervisorId?: string | null
  }

  export type CompetitionRoomUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type CompetitionRoomUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    CompetitionId?: StringFieldUpdateOperationsInput | string
    SupervisorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompetitionParticipantCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    ParticipantId?: string | null
    Attedance?: boolean | null
    Score?: number | null
    Correct?: number | null
    Incorrect?: number | null
    PathAnswer?: string | null
    Competition: CompetitionCreateNestedOneWithoutCompetitionParticipantInput
    CompetitionRoom?: CompetitionRoomCreateNestedOneWithoutCompetitionParticipantInput
    Payment?: PaymentCreateNestedOneWithoutCompetitionParticipantInput
    Student: StudentCreateNestedOneWithoutCompetitionParticipantInput
  }

  export type CompetitionParticipantUncheckedCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    ParticipantId?: string | null
    StudentId: string
    CompetitionId: string
    CompetitionRoomId?: string | null
    PaymentId?: string | null
    Attedance?: boolean | null
    Score?: number | null
    Correct?: number | null
    Incorrect?: number | null
    PathAnswer?: string | null
  }

  export type CompetitionParticipantUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ParticipantId?: NullableStringFieldUpdateOperationsInput | string | null
    Attedance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Score?: NullableIntFieldUpdateOperationsInput | number | null
    Correct?: NullableIntFieldUpdateOperationsInput | number | null
    Incorrect?: NullableIntFieldUpdateOperationsInput | number | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    Competition?: CompetitionUpdateOneRequiredWithoutCompetitionParticipantNestedInput
    CompetitionRoom?: CompetitionRoomUpdateOneWithoutCompetitionParticipantNestedInput
    Payment?: PaymentUpdateOneWithoutCompetitionParticipantNestedInput
    Student?: StudentUpdateOneRequiredWithoutCompetitionParticipantNestedInput
  }

  export type CompetitionParticipantUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ParticipantId?: NullableStringFieldUpdateOperationsInput | string | null
    StudentId?: StringFieldUpdateOperationsInput | string
    CompetitionId?: StringFieldUpdateOperationsInput | string
    CompetitionRoomId?: NullableStringFieldUpdateOperationsInput | string | null
    PaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    Attedance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Score?: NullableIntFieldUpdateOperationsInput | number | null
    Correct?: NullableIntFieldUpdateOperationsInput | number | null
    Incorrect?: NullableIntFieldUpdateOperationsInput | number | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompetitionParticipantCreateManyInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    ParticipantId?: string | null
    StudentId: string
    CompetitionId: string
    CompetitionRoomId?: string | null
    PaymentId?: string | null
    Attedance?: boolean | null
    Score?: number | null
    Correct?: number | null
    Incorrect?: number | null
    PathAnswer?: string | null
  }

  export type CompetitionParticipantUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ParticipantId?: NullableStringFieldUpdateOperationsInput | string | null
    Attedance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Score?: NullableIntFieldUpdateOperationsInput | number | null
    Correct?: NullableIntFieldUpdateOperationsInput | number | null
    Incorrect?: NullableIntFieldUpdateOperationsInput | number | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompetitionParticipantUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ParticipantId?: NullableStringFieldUpdateOperationsInput | string | null
    StudentId?: StringFieldUpdateOperationsInput | string
    CompetitionId?: StringFieldUpdateOperationsInput | string
    CompetitionRoomId?: NullableStringFieldUpdateOperationsInput | string | null
    PaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    Attedance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Score?: NullableIntFieldUpdateOperationsInput | number | null
    Correct?: NullableIntFieldUpdateOperationsInput | number | null
    Incorrect?: NullableIntFieldUpdateOperationsInput | number | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type KisiCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Header?: string | null
    Content: string
    Competition: CompetitionCreateNestedOneWithoutKisiInput
  }

  export type KisiUncheckedCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Header?: string | null
    Content: string
    CompetitionId: string
  }

  export type KisiUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Header?: NullableStringFieldUpdateOperationsInput | string | null
    Content?: StringFieldUpdateOperationsInput | string
    Competition?: CompetitionUpdateOneRequiredWithoutKisiNestedInput
  }

  export type KisiUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Header?: NullableStringFieldUpdateOperationsInput | string | null
    Content?: StringFieldUpdateOperationsInput | string
    CompetitionId?: StringFieldUpdateOperationsInput | string
  }

  export type KisiCreateManyInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Header?: string | null
    Content: string
    CompetitionId: string
  }

  export type KisiUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Header?: NullableStringFieldUpdateOperationsInput | string | null
    Content?: StringFieldUpdateOperationsInput | string
  }

  export type KisiUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Header?: NullableStringFieldUpdateOperationsInput | string | null
    Content?: StringFieldUpdateOperationsInput | string
    CompetitionId?: StringFieldUpdateOperationsInput | string
  }

  export type TryoutCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Question?: QuestionCreateNestedManyWithoutTryoutInput
    Competition: CompetitionCreateNestedOneWithoutTryoutInput
  }

  export type TryoutUncheckedCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    CompetitionId: string
    Question?: QuestionUncheckedCreateNestedManyWithoutTryoutInput
  }

  export type TryoutUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Question?: QuestionUpdateManyWithoutTryoutNestedInput
    Competition?: CompetitionUpdateOneRequiredWithoutTryoutNestedInput
  }

  export type TryoutUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    CompetitionId?: StringFieldUpdateOperationsInput | string
    Question?: QuestionUncheckedUpdateManyWithoutTryoutNestedInput
  }

  export type TryoutCreateManyInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    CompetitionId: string
  }

  export type TryoutUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type TryoutUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    CompetitionId?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Content: string
    Option?: OptionCreateNestedManyWithoutQuestionInput
    Tryout: TryoutCreateNestedOneWithoutQuestionInput
  }

  export type QuestionUncheckedCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    TryoutId: string
    Content: string
    Option?: OptionUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Content?: StringFieldUpdateOperationsInput | string
    Option?: OptionUpdateManyWithoutQuestionNestedInput
    Tryout?: TryoutUpdateOneRequiredWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TryoutId?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
    Option?: OptionUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionCreateManyInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    TryoutId: string
    Content: string
  }

  export type QuestionUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Content?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TryoutId?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
  }

  export type OptionCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Answer: string
    IsCorrect: boolean
    Question: QuestionCreateNestedOneWithoutOptionInput
  }

  export type OptionUncheckedCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Answer: string
    IsCorrect: boolean
    QuestionId: string
  }

  export type OptionUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Answer?: StringFieldUpdateOperationsInput | string
    IsCorrect?: BoolFieldUpdateOperationsInput | boolean
    Question?: QuestionUpdateOneRequiredWithoutOptionNestedInput
  }

  export type OptionUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Answer?: StringFieldUpdateOperationsInput | string
    IsCorrect?: BoolFieldUpdateOperationsInput | boolean
    QuestionId?: StringFieldUpdateOperationsInput | string
  }

  export type OptionCreateManyInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Answer: string
    IsCorrect: boolean
    QuestionId: string
  }

  export type OptionUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Answer?: StringFieldUpdateOperationsInput | string
    IsCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OptionUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Answer?: StringFieldUpdateOperationsInput | string
    IsCorrect?: BoolFieldUpdateOperationsInput | boolean
    QuestionId?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Invoice: string
    Date: number
    Amount: number
    Status: $Enums.PaymentType
    User?: UserCreateNestedOneWithoutPaymentInput
    CompetitionParticipant?: CompetitionParticipantCreateNestedManyWithoutPaymentInput
    PaymentStatusHistory?: PaymentStatusHistoryCreateNestedManyWithoutPaymentInput
  }

  export type PaymentUncheckedCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Invoice: string
    Date: number
    Amount: number
    UserId?: string | null
    Status: $Enums.PaymentType
    CompetitionParticipant?: CompetitionParticipantUncheckedCreateNestedManyWithoutPaymentInput
    PaymentStatusHistory?: PaymentStatusHistoryUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type PaymentUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Invoice?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Amount?: IntFieldUpdateOperationsInput | number
    Status?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    User?: UserUpdateOneWithoutPaymentNestedInput
    CompetitionParticipant?: CompetitionParticipantUpdateManyWithoutPaymentNestedInput
    PaymentStatusHistory?: PaymentStatusHistoryUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Invoice?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Amount?: IntFieldUpdateOperationsInput | number
    UserId?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    CompetitionParticipant?: CompetitionParticipantUncheckedUpdateManyWithoutPaymentNestedInput
    PaymentStatusHistory?: PaymentStatusHistoryUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentCreateManyInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Invoice: string
    Date: number
    Amount: number
    UserId?: string | null
    Status: $Enums.PaymentType
  }

  export type PaymentUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Invoice?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Amount?: IntFieldUpdateOperationsInput | number
    Status?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
  }

  export type PaymentUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Invoice?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Amount?: IntFieldUpdateOperationsInput | number
    UserId?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
  }

  export type PaymentStatusHistoryCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Status: $Enums.PaymentType
    Date: number
    Payment: PaymentCreateNestedOneWithoutPaymentStatusHistoryInput
  }

  export type PaymentStatusHistoryUncheckedCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    PaymentId: string
    Status: $Enums.PaymentType
    Date: number
  }

  export type PaymentStatusHistoryUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    Date?: IntFieldUpdateOperationsInput | number
    Payment?: PaymentUpdateOneRequiredWithoutPaymentStatusHistoryNestedInput
  }

  export type PaymentStatusHistoryUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    PaymentId?: StringFieldUpdateOperationsInput | string
    Status?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    Date?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentStatusHistoryCreateManyInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    PaymentId: string
    Status: $Enums.PaymentType
    Date: number
  }

  export type PaymentStatusHistoryUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    Date?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentStatusHistoryUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    PaymentId?: StringFieldUpdateOperationsInput | string
    Status?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    Date?: IntFieldUpdateOperationsInput | number
  }

  export type SchoolCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Stage: $Enums.StageType
    Subdistrict: $Enums.Subdistrict
    Ward: string
    Status: $Enums.StatusSchool
    Student?: StudentCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Stage: $Enums.StageType
    Subdistrict: $Enums.Subdistrict
    Ward: string
    Status: $Enums.StatusSchool
    Student?: StudentUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Subdistrict?: EnumSubdistrictFieldUpdateOperationsInput | $Enums.Subdistrict
    Ward?: StringFieldUpdateOperationsInput | string
    Status?: EnumStatusSchoolFieldUpdateOperationsInput | $Enums.StatusSchool
    Student?: StudentUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Subdistrict?: EnumSubdistrictFieldUpdateOperationsInput | $Enums.Subdistrict
    Ward?: StringFieldUpdateOperationsInput | string
    Status?: EnumStatusSchoolFieldUpdateOperationsInput | $Enums.StatusSchool
    Student?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolCreateManyInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Stage: $Enums.StageType
    Subdistrict: $Enums.Subdistrict
    Ward: string
    Status: $Enums.StatusSchool
  }

  export type SchoolUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Subdistrict?: EnumSubdistrictFieldUpdateOperationsInput | $Enums.Subdistrict
    Ward?: StringFieldUpdateOperationsInput | string
    Status?: EnumStatusSchoolFieldUpdateOperationsInput | $Enums.StatusSchool
  }

  export type SchoolUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Subdistrict?: EnumSubdistrictFieldUpdateOperationsInput | $Enums.Subdistrict
    Ward?: StringFieldUpdateOperationsInput | string
    Status?: EnumStatusSchoolFieldUpdateOperationsInput | $Enums.StatusSchool
  }

  export type NewsCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Title: string
    Description: string
  }

  export type NewsUncheckedCreateInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Title: string
    Description: string
  }

  export type NewsUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Title?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
  }

  export type NewsUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Title?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
  }

  export type NewsCreateManyInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Title: string
    Description: string
  }

  export type NewsUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Title?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
  }

  export type NewsUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Title?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleType | EnumRoleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoleType[] | ListEnumRoleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleType[] | ListEnumRoleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleTypeFilter<$PrismaModel> | $Enums.RoleType
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    Id?: SortOrder
    Name?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    Id?: SortOrder
    Name?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    Id?: SortOrder
    Name?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleType | EnumRoleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoleType[] | ListEnumRoleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleType[] | ListEnumRoleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleTypeWithAggregatesFilter<$PrismaModel> | $Enums.RoleType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleTypeFilter<$PrismaModel>
    _max?: NestedEnumRoleTypeFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumActiveStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ActiveStatus | EnumActiveStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ActiveStatus[] | ListEnumActiveStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActiveStatus[] | ListEnumActiveStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumActiveStatusFilter<$PrismaModel> | $Enums.ActiveStatus
  }

  export type AchievementListRelationFilter = {
    every?: AchievementWhereInput
    some?: AchievementWhereInput
    none?: AchievementWhereInput
  }

  export type StudentListRelationFilter = {
    every?: StudentWhereInput
    some?: StudentWhereInput
    none?: StudentWhereInput
  }

  export type RoleRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type AchievementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
    Username?: SortOrder
    Password?: SortOrder
    RoleId?: SortOrder
    Birthdate?: SortOrder
    BirthPlace?: SortOrder
    PhoneNumber?: SortOrder
    Gender?: SortOrder
    Email?: SortOrder
    Status?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    Birthdate?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
    Username?: SortOrder
    Password?: SortOrder
    RoleId?: SortOrder
    Birthdate?: SortOrder
    BirthPlace?: SortOrder
    PhoneNumber?: SortOrder
    Gender?: SortOrder
    Email?: SortOrder
    Status?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
    Username?: SortOrder
    Password?: SortOrder
    RoleId?: SortOrder
    Birthdate?: SortOrder
    BirthPlace?: SortOrder
    PhoneNumber?: SortOrder
    Gender?: SortOrder
    Email?: SortOrder
    Status?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    Birthdate?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumActiveStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActiveStatus | EnumActiveStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ActiveStatus[] | ListEnumActiveStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActiveStatus[] | ListEnumActiveStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumActiveStatusWithAggregatesFilter<$PrismaModel> | $Enums.ActiveStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActiveStatusFilter<$PrismaModel>
    _max?: NestedEnumActiveStatusFilter<$PrismaModel>
  }

  export type EnumStageTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StageType | EnumStageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStageTypeFilter<$PrismaModel> | $Enums.StageType
  }

  export type CompetitionParticipantListRelationFilter = {
    every?: CompetitionParticipantWhereInput
    some?: CompetitionParticipantWhereInput
    none?: CompetitionParticipantWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SchoolRelationFilter = {
    is?: SchoolWhereInput
    isNot?: SchoolWhereInput
  }

  export type SubscriptionListRelationFilter = {
    every?: SubscriptionWhereInput
    some?: SubscriptionWhereInput
    none?: SubscriptionWhereInput
  }

  export type CompetitionParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentCountOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    IdMember?: SortOrder
    Address?: SortOrder
    Stage?: SortOrder
    Class?: SortOrder
    SchoolId?: SortOrder
    NIK?: SortOrder
    FatherName?: SortOrder
    MotherName?: SortOrder
    IdUser?: SortOrder
    PhotoPath?: SortOrder
    Poin?: SortOrder
  }

  export type StudentAvgOrderByAggregateInput = {
    Poin?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    IdMember?: SortOrder
    Address?: SortOrder
    Stage?: SortOrder
    Class?: SortOrder
    SchoolId?: SortOrder
    NIK?: SortOrder
    FatherName?: SortOrder
    MotherName?: SortOrder
    IdUser?: SortOrder
    PhotoPath?: SortOrder
    Poin?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    IdMember?: SortOrder
    Address?: SortOrder
    Stage?: SortOrder
    Class?: SortOrder
    SchoolId?: SortOrder
    NIK?: SortOrder
    FatherName?: SortOrder
    MotherName?: SortOrder
    IdUser?: SortOrder
    PhotoPath?: SortOrder
    Poin?: SortOrder
  }

  export type StudentSumOrderByAggregateInput = {
    Poin?: SortOrder
  }

  export type EnumStageTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StageType | EnumStageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStageTypeWithAggregatesFilter<$PrismaModel> | $Enums.StageType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStageTypeFilter<$PrismaModel>
    _max?: NestedEnumStageTypeFilter<$PrismaModel>
  }

  export type CompetitionRelationFilter = {
    is?: CompetitionWhereInput
    isNot?: CompetitionWhereInput
  }

  export type AchievementCountOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    UserId?: SortOrder
    Category?: SortOrder
    Describe?: SortOrder
    CompetitionId?: SortOrder
  }

  export type AchievementMaxOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    UserId?: SortOrder
    Category?: SortOrder
    Describe?: SortOrder
    CompetitionId?: SortOrder
  }

  export type AchievementMinOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    UserId?: SortOrder
    Category?: SortOrder
    Describe?: SortOrder
    CompetitionId?: SortOrder
  }

  export type CompetitionListRelationFilter = {
    every?: CompetitionWhereInput
    some?: CompetitionWhereInput
    none?: CompetitionWhereInput
  }

  export type CompetitionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SeasonCountOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
    StartDate?: SortOrder
    EndDate?: SortOrder
  }

  export type SeasonAvgOrderByAggregateInput = {
    StartDate?: SortOrder
    EndDate?: SortOrder
  }

  export type SeasonMaxOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
    StartDate?: SortOrder
    EndDate?: SortOrder
  }

  export type SeasonMinOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
    StartDate?: SortOrder
    EndDate?: SortOrder
  }

  export type SeasonSumOrderByAggregateInput = {
    StartDate?: SortOrder
    EndDate?: SortOrder
  }

  export type SubjectCountOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
  }

  export type SubjectMaxOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
  }

  export type SubjectMinOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
  }

  export type RegionRelationFilter = {
    is?: RegionWhereInput
    isNot?: RegionWhereInput
  }

  export type SeasonRelationFilter = {
    is?: SeasonWhereInput
    isNot?: SeasonWhereInput
  }

  export type SubjectRelationFilter = {
    is?: SubjectWhereInput
    isNot?: SubjectWhereInput
  }

  export type CompetitionRoomListRelationFilter = {
    every?: CompetitionRoomWhereInput
    some?: CompetitionRoomWhereInput
    none?: CompetitionRoomWhereInput
  }

  export type KisiListRelationFilter = {
    every?: KisiWhereInput
    some?: KisiWhereInput
    none?: KisiWhereInput
  }

  export type TryoutListRelationFilter = {
    every?: TryoutWhereInput
    some?: TryoutWhereInput
    none?: TryoutWhereInput
  }

  export type CompetitionRoomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KisiOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TryoutOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompetitionCountOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
    Description?: SortOrder
    Date?: SortOrder
    Level?: SortOrder
    Stage?: SortOrder
    Price?: SortOrder
    Location?: SortOrder
    SeasonId?: SortOrder
    RegionId?: SortOrder
    SubjectId?: SortOrder
    CodePackage?: SortOrder
    PathAnswer?: SortOrder
    regionId?: SortOrder
  }

  export type CompetitionAvgOrderByAggregateInput = {
    Date?: SortOrder
    Level?: SortOrder
    Price?: SortOrder
  }

  export type CompetitionMaxOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
    Description?: SortOrder
    Date?: SortOrder
    Level?: SortOrder
    Stage?: SortOrder
    Price?: SortOrder
    Location?: SortOrder
    SeasonId?: SortOrder
    RegionId?: SortOrder
    SubjectId?: SortOrder
    CodePackage?: SortOrder
    PathAnswer?: SortOrder
    regionId?: SortOrder
  }

  export type CompetitionMinOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
    Description?: SortOrder
    Date?: SortOrder
    Level?: SortOrder
    Stage?: SortOrder
    Price?: SortOrder
    Location?: SortOrder
    SeasonId?: SortOrder
    RegionId?: SortOrder
    SubjectId?: SortOrder
    CodePackage?: SortOrder
    PathAnswer?: SortOrder
    regionId?: SortOrder
  }

  export type CompetitionSumOrderByAggregateInput = {
    Date?: SortOrder
    Level?: SortOrder
    Price?: SortOrder
  }

  export type CompetitionNullableRelationFilter = {
    is?: CompetitionWhereInput | null
    isNot?: CompetitionWhereInput | null
  }

  export type StudentRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type SubscriptionCountOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    StartDate?: SortOrder
    EndDate?: SortOrder
    Status?: SortOrder
    StudentId?: SortOrder
    CompetitionId?: SortOrder
  }

  export type SubscriptionMaxOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    StartDate?: SortOrder
    EndDate?: SortOrder
    Status?: SortOrder
    StudentId?: SortOrder
    CompetitionId?: SortOrder
  }

  export type SubscriptionMinOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    StartDate?: SortOrder
    EndDate?: SortOrder
    Status?: SortOrder
    StudentId?: SortOrder
    CompetitionId?: SortOrder
  }

  export type RegionCountOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Region?: SortOrder
    Name?: SortOrder
    RegionDetail?: SortOrder
  }

  export type RegionAvgOrderByAggregateInput = {
    Region?: SortOrder
  }

  export type RegionMaxOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Region?: SortOrder
    Name?: SortOrder
    RegionDetail?: SortOrder
  }

  export type RegionMinOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Region?: SortOrder
    Name?: SortOrder
    RegionDetail?: SortOrder
  }

  export type RegionSumOrderByAggregateInput = {
    Region?: SortOrder
  }

  export type SupervisorCountOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
    Birthdate?: SortOrder
    PhoneNumber?: SortOrder
  }

  export type SupervisorAvgOrderByAggregateInput = {
    Birthdate?: SortOrder
  }

  export type SupervisorMaxOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
    Birthdate?: SortOrder
    PhoneNumber?: SortOrder
  }

  export type SupervisorMinOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
    Birthdate?: SortOrder
    PhoneNumber?: SortOrder
  }

  export type SupervisorSumOrderByAggregateInput = {
    Birthdate?: SortOrder
  }

  export type SupervisorNullableRelationFilter = {
    is?: SupervisorWhereInput | null
    isNot?: SupervisorWhereInput | null
  }

  export type CompetitionRoomCountOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
    CompetitionId?: SortOrder
    SupervisorId?: SortOrder
  }

  export type CompetitionRoomMaxOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
    CompetitionId?: SortOrder
    SupervisorId?: SortOrder
  }

  export type CompetitionRoomMinOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
    CompetitionId?: SortOrder
    SupervisorId?: SortOrder
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CompetitionRoomNullableRelationFilter = {
    is?: CompetitionRoomWhereInput | null
    isNot?: CompetitionRoomWhereInput | null
  }

  export type PaymentNullableRelationFilter = {
    is?: PaymentWhereInput | null
    isNot?: PaymentWhereInput | null
  }

  export type CompetitionParticipantCountOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    ParticipantId?: SortOrder
    StudentId?: SortOrder
    CompetitionId?: SortOrder
    CompetitionRoomId?: SortOrder
    PaymentId?: SortOrder
    Attedance?: SortOrder
    Score?: SortOrder
    Correct?: SortOrder
    Incorrect?: SortOrder
    PathAnswer?: SortOrder
  }

  export type CompetitionParticipantAvgOrderByAggregateInput = {
    Score?: SortOrder
    Correct?: SortOrder
    Incorrect?: SortOrder
  }

  export type CompetitionParticipantMaxOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    ParticipantId?: SortOrder
    StudentId?: SortOrder
    CompetitionId?: SortOrder
    CompetitionRoomId?: SortOrder
    PaymentId?: SortOrder
    Attedance?: SortOrder
    Score?: SortOrder
    Correct?: SortOrder
    Incorrect?: SortOrder
    PathAnswer?: SortOrder
  }

  export type CompetitionParticipantMinOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    ParticipantId?: SortOrder
    StudentId?: SortOrder
    CompetitionId?: SortOrder
    CompetitionRoomId?: SortOrder
    PaymentId?: SortOrder
    Attedance?: SortOrder
    Score?: SortOrder
    Correct?: SortOrder
    Incorrect?: SortOrder
    PathAnswer?: SortOrder
  }

  export type CompetitionParticipantSumOrderByAggregateInput = {
    Score?: SortOrder
    Correct?: SortOrder
    Incorrect?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type KisiCountOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Header?: SortOrder
    Content?: SortOrder
    CompetitionId?: SortOrder
  }

  export type KisiMaxOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Header?: SortOrder
    Content?: SortOrder
    CompetitionId?: SortOrder
  }

  export type KisiMinOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Header?: SortOrder
    Content?: SortOrder
    CompetitionId?: SortOrder
  }

  export type QuestionListRelationFilter = {
    every?: QuestionWhereInput
    some?: QuestionWhereInput
    none?: QuestionWhereInput
  }

  export type QuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TryoutCountOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
    CompetitionId?: SortOrder
  }

  export type TryoutMaxOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
    CompetitionId?: SortOrder
  }

  export type TryoutMinOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
    CompetitionId?: SortOrder
  }

  export type OptionListRelationFilter = {
    every?: OptionWhereInput
    some?: OptionWhereInput
    none?: OptionWhereInput
  }

  export type TryoutRelationFilter = {
    is?: TryoutWhereInput
    isNot?: TryoutWhereInput
  }

  export type OptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionCountOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    TryoutId?: SortOrder
    Content?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    TryoutId?: SortOrder
    Content?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    TryoutId?: SortOrder
    Content?: SortOrder
  }

  export type QuestionRelationFilter = {
    is?: QuestionWhereInput
    isNot?: QuestionWhereInput
  }

  export type OptionCountOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Answer?: SortOrder
    IsCorrect?: SortOrder
    QuestionId?: SortOrder
  }

  export type OptionMaxOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Answer?: SortOrder
    IsCorrect?: SortOrder
    QuestionId?: SortOrder
  }

  export type OptionMinOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Answer?: SortOrder
    IsCorrect?: SortOrder
    QuestionId?: SortOrder
  }

  export type EnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type PaymentStatusHistoryListRelationFilter = {
    every?: PaymentStatusHistoryWhereInput
    some?: PaymentStatusHistoryWhereInput
    none?: PaymentStatusHistoryWhereInput
  }

  export type PaymentStatusHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentCountOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Invoice?: SortOrder
    Date?: SortOrder
    Amount?: SortOrder
    UserId?: SortOrder
    Status?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    Date?: SortOrder
    Amount?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Invoice?: SortOrder
    Date?: SortOrder
    Amount?: SortOrder
    UserId?: SortOrder
    Status?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Invoice?: SortOrder
    Date?: SortOrder
    Amount?: SortOrder
    UserId?: SortOrder
    Status?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    Date?: SortOrder
    Amount?: SortOrder
  }

  export type EnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type PaymentRelationFilter = {
    is?: PaymentWhereInput
    isNot?: PaymentWhereInput
  }

  export type PaymentStatusHistoryCountOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    PaymentId?: SortOrder
    Status?: SortOrder
    Date?: SortOrder
  }

  export type PaymentStatusHistoryAvgOrderByAggregateInput = {
    Date?: SortOrder
  }

  export type PaymentStatusHistoryMaxOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    PaymentId?: SortOrder
    Status?: SortOrder
    Date?: SortOrder
  }

  export type PaymentStatusHistoryMinOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    PaymentId?: SortOrder
    Status?: SortOrder
    Date?: SortOrder
  }

  export type PaymentStatusHistorySumOrderByAggregateInput = {
    Date?: SortOrder
  }

  export type EnumSubdistrictFilter<$PrismaModel = never> = {
    equals?: $Enums.Subdistrict | EnumSubdistrictFieldRefInput<$PrismaModel>
    in?: $Enums.Subdistrict[] | ListEnumSubdistrictFieldRefInput<$PrismaModel>
    notIn?: $Enums.Subdistrict[] | ListEnumSubdistrictFieldRefInput<$PrismaModel>
    not?: NestedEnumSubdistrictFilter<$PrismaModel> | $Enums.Subdistrict
  }

  export type EnumStatusSchoolFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusSchool | EnumStatusSchoolFieldRefInput<$PrismaModel>
    in?: $Enums.StatusSchool[] | ListEnumStatusSchoolFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusSchool[] | ListEnumStatusSchoolFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusSchoolFilter<$PrismaModel> | $Enums.StatusSchool
  }

  export type SchoolCountOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
    Stage?: SortOrder
    Subdistrict?: SortOrder
    Ward?: SortOrder
    Status?: SortOrder
  }

  export type SchoolMaxOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
    Stage?: SortOrder
    Subdistrict?: SortOrder
    Ward?: SortOrder
    Status?: SortOrder
  }

  export type SchoolMinOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Name?: SortOrder
    Stage?: SortOrder
    Subdistrict?: SortOrder
    Ward?: SortOrder
    Status?: SortOrder
  }

  export type EnumSubdistrictWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Subdistrict | EnumSubdistrictFieldRefInput<$PrismaModel>
    in?: $Enums.Subdistrict[] | ListEnumSubdistrictFieldRefInput<$PrismaModel>
    notIn?: $Enums.Subdistrict[] | ListEnumSubdistrictFieldRefInput<$PrismaModel>
    not?: NestedEnumSubdistrictWithAggregatesFilter<$PrismaModel> | $Enums.Subdistrict
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubdistrictFilter<$PrismaModel>
    _max?: NestedEnumSubdistrictFilter<$PrismaModel>
  }

  export type EnumStatusSchoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusSchool | EnumStatusSchoolFieldRefInput<$PrismaModel>
    in?: $Enums.StatusSchool[] | ListEnumStatusSchoolFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusSchool[] | ListEnumStatusSchoolFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusSchoolWithAggregatesFilter<$PrismaModel> | $Enums.StatusSchool
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusSchoolFilter<$PrismaModel>
    _max?: NestedEnumStatusSchoolFilter<$PrismaModel>
  }

  export type NewsCountOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Title?: SortOrder
    Description?: SortOrder
  }

  export type NewsMaxOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Title?: SortOrder
    Description?: SortOrder
  }

  export type NewsMinOrderByAggregateInput = {
    Id?: SortOrder
    DateCreate?: SortOrder
    DateUpdate?: SortOrder
    Title?: SortOrder
    Description?: SortOrder
  }

  export type UserCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleTypeFieldUpdateOperationsInput = {
    set?: $Enums.RoleType
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AchievementCreateNestedManyWithoutUserInput = {
    create?: XOR<AchievementCreateWithoutUserInput, AchievementUncheckedCreateWithoutUserInput> | AchievementCreateWithoutUserInput[] | AchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AchievementCreateOrConnectWithoutUserInput | AchievementCreateOrConnectWithoutUserInput[]
    createMany?: AchievementCreateManyUserInputEnvelope
    connect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
  }

  export type StudentCreateNestedManyWithoutUserInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput> | StudentCreateWithoutUserInput[] | StudentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput | StudentCreateOrConnectWithoutUserInput[]
    createMany?: StudentCreateManyUserInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type RoleCreateNestedOneWithoutUserInput = {
    create?: XOR<RoleCreateWithoutUserInput, RoleUncheckedCreateWithoutUserInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUserInput
    connect?: RoleWhereUniqueInput
  }

  export type PaymentCreateNestedManyWithoutUserInput = {
    create?: XOR<PaymentCreateWithoutUserInput, PaymentUncheckedCreateWithoutUserInput> | PaymentCreateWithoutUserInput[] | PaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutUserInput | PaymentCreateOrConnectWithoutUserInput[]
    createMany?: PaymentCreateManyUserInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type AchievementUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AchievementCreateWithoutUserInput, AchievementUncheckedCreateWithoutUserInput> | AchievementCreateWithoutUserInput[] | AchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AchievementCreateOrConnectWithoutUserInput | AchievementCreateOrConnectWithoutUserInput[]
    createMany?: AchievementCreateManyUserInputEnvelope
    connect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput> | StudentCreateWithoutUserInput[] | StudentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput | StudentCreateOrConnectWithoutUserInput[]
    createMany?: StudentCreateManyUserInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PaymentCreateWithoutUserInput, PaymentUncheckedCreateWithoutUserInput> | PaymentCreateWithoutUserInput[] | PaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutUserInput | PaymentCreateOrConnectWithoutUserInput[]
    createMany?: PaymentCreateManyUserInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumActiveStatusFieldUpdateOperationsInput = {
    set?: $Enums.ActiveStatus
  }

  export type AchievementUpdateManyWithoutUserNestedInput = {
    create?: XOR<AchievementCreateWithoutUserInput, AchievementUncheckedCreateWithoutUserInput> | AchievementCreateWithoutUserInput[] | AchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AchievementCreateOrConnectWithoutUserInput | AchievementCreateOrConnectWithoutUserInput[]
    upsert?: AchievementUpsertWithWhereUniqueWithoutUserInput | AchievementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AchievementCreateManyUserInputEnvelope
    set?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    disconnect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    delete?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    connect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    update?: AchievementUpdateWithWhereUniqueWithoutUserInput | AchievementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AchievementUpdateManyWithWhereWithoutUserInput | AchievementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AchievementScalarWhereInput | AchievementScalarWhereInput[]
  }

  export type StudentUpdateManyWithoutUserNestedInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput> | StudentCreateWithoutUserInput[] | StudentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput | StudentCreateOrConnectWithoutUserInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutUserInput | StudentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StudentCreateManyUserInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutUserInput | StudentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutUserInput | StudentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type RoleUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<RoleCreateWithoutUserInput, RoleUncheckedCreateWithoutUserInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUserInput
    upsert?: RoleUpsertWithoutUserInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUserInput, RoleUpdateWithoutUserInput>, RoleUncheckedUpdateWithoutUserInput>
  }

  export type PaymentUpdateManyWithoutUserNestedInput = {
    create?: XOR<PaymentCreateWithoutUserInput, PaymentUncheckedCreateWithoutUserInput> | PaymentCreateWithoutUserInput[] | PaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutUserInput | PaymentCreateOrConnectWithoutUserInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutUserInput | PaymentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PaymentCreateManyUserInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutUserInput | PaymentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutUserInput | PaymentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type AchievementUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AchievementCreateWithoutUserInput, AchievementUncheckedCreateWithoutUserInput> | AchievementCreateWithoutUserInput[] | AchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AchievementCreateOrConnectWithoutUserInput | AchievementCreateOrConnectWithoutUserInput[]
    upsert?: AchievementUpsertWithWhereUniqueWithoutUserInput | AchievementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AchievementCreateManyUserInputEnvelope
    set?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    disconnect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    delete?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    connect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    update?: AchievementUpdateWithWhereUniqueWithoutUserInput | AchievementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AchievementUpdateManyWithWhereWithoutUserInput | AchievementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AchievementScalarWhereInput | AchievementScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput> | StudentCreateWithoutUserInput[] | StudentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput | StudentCreateOrConnectWithoutUserInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutUserInput | StudentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StudentCreateManyUserInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutUserInput | StudentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutUserInput | StudentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PaymentCreateWithoutUserInput, PaymentUncheckedCreateWithoutUserInput> | PaymentCreateWithoutUserInput[] | PaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutUserInput | PaymentCreateOrConnectWithoutUserInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutUserInput | PaymentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PaymentCreateManyUserInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutUserInput | PaymentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutUserInput | PaymentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type CompetitionParticipantCreateNestedManyWithoutStudentInput = {
    create?: XOR<CompetitionParticipantCreateWithoutStudentInput, CompetitionParticipantUncheckedCreateWithoutStudentInput> | CompetitionParticipantCreateWithoutStudentInput[] | CompetitionParticipantUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: CompetitionParticipantCreateOrConnectWithoutStudentInput | CompetitionParticipantCreateOrConnectWithoutStudentInput[]
    createMany?: CompetitionParticipantCreateManyStudentInputEnvelope
    connect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutStudentInput = {
    create?: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentInput
    connect?: UserWhereUniqueInput
  }

  export type SchoolCreateNestedOneWithoutStudentInput = {
    create?: XOR<SchoolCreateWithoutStudentInput, SchoolUncheckedCreateWithoutStudentInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutStudentInput
    connect?: SchoolWhereUniqueInput
  }

  export type SubscriptionCreateNestedManyWithoutStudentInput = {
    create?: XOR<SubscriptionCreateWithoutStudentInput, SubscriptionUncheckedCreateWithoutStudentInput> | SubscriptionCreateWithoutStudentInput[] | SubscriptionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutStudentInput | SubscriptionCreateOrConnectWithoutStudentInput[]
    createMany?: SubscriptionCreateManyStudentInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type CompetitionParticipantUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<CompetitionParticipantCreateWithoutStudentInput, CompetitionParticipantUncheckedCreateWithoutStudentInput> | CompetitionParticipantCreateWithoutStudentInput[] | CompetitionParticipantUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: CompetitionParticipantCreateOrConnectWithoutStudentInput | CompetitionParticipantCreateOrConnectWithoutStudentInput[]
    createMany?: CompetitionParticipantCreateManyStudentInputEnvelope
    connect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<SubscriptionCreateWithoutStudentInput, SubscriptionUncheckedCreateWithoutStudentInput> | SubscriptionCreateWithoutStudentInput[] | SubscriptionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutStudentInput | SubscriptionCreateOrConnectWithoutStudentInput[]
    createMany?: SubscriptionCreateManyStudentInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type EnumStageTypeFieldUpdateOperationsInput = {
    set?: $Enums.StageType
  }

  export type CompetitionParticipantUpdateManyWithoutStudentNestedInput = {
    create?: XOR<CompetitionParticipantCreateWithoutStudentInput, CompetitionParticipantUncheckedCreateWithoutStudentInput> | CompetitionParticipantCreateWithoutStudentInput[] | CompetitionParticipantUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: CompetitionParticipantCreateOrConnectWithoutStudentInput | CompetitionParticipantCreateOrConnectWithoutStudentInput[]
    upsert?: CompetitionParticipantUpsertWithWhereUniqueWithoutStudentInput | CompetitionParticipantUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: CompetitionParticipantCreateManyStudentInputEnvelope
    set?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    disconnect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    delete?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    connect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    update?: CompetitionParticipantUpdateWithWhereUniqueWithoutStudentInput | CompetitionParticipantUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: CompetitionParticipantUpdateManyWithWhereWithoutStudentInput | CompetitionParticipantUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: CompetitionParticipantScalarWhereInput | CompetitionParticipantScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutStudentNestedInput = {
    create?: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentInput
    upsert?: UserUpsertWithoutStudentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudentInput, UserUpdateWithoutStudentInput>, UserUncheckedUpdateWithoutStudentInput>
  }

  export type SchoolUpdateOneRequiredWithoutStudentNestedInput = {
    create?: XOR<SchoolCreateWithoutStudentInput, SchoolUncheckedCreateWithoutStudentInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutStudentInput
    upsert?: SchoolUpsertWithoutStudentInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutStudentInput, SchoolUpdateWithoutStudentInput>, SchoolUncheckedUpdateWithoutStudentInput>
  }

  export type SubscriptionUpdateManyWithoutStudentNestedInput = {
    create?: XOR<SubscriptionCreateWithoutStudentInput, SubscriptionUncheckedCreateWithoutStudentInput> | SubscriptionCreateWithoutStudentInput[] | SubscriptionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutStudentInput | SubscriptionCreateOrConnectWithoutStudentInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutStudentInput | SubscriptionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: SubscriptionCreateManyStudentInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutStudentInput | SubscriptionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutStudentInput | SubscriptionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type CompetitionParticipantUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<CompetitionParticipantCreateWithoutStudentInput, CompetitionParticipantUncheckedCreateWithoutStudentInput> | CompetitionParticipantCreateWithoutStudentInput[] | CompetitionParticipantUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: CompetitionParticipantCreateOrConnectWithoutStudentInput | CompetitionParticipantCreateOrConnectWithoutStudentInput[]
    upsert?: CompetitionParticipantUpsertWithWhereUniqueWithoutStudentInput | CompetitionParticipantUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: CompetitionParticipantCreateManyStudentInputEnvelope
    set?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    disconnect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    delete?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    connect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    update?: CompetitionParticipantUpdateWithWhereUniqueWithoutStudentInput | CompetitionParticipantUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: CompetitionParticipantUpdateManyWithWhereWithoutStudentInput | CompetitionParticipantUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: CompetitionParticipantScalarWhereInput | CompetitionParticipantScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<SubscriptionCreateWithoutStudentInput, SubscriptionUncheckedCreateWithoutStudentInput> | SubscriptionCreateWithoutStudentInput[] | SubscriptionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutStudentInput | SubscriptionCreateOrConnectWithoutStudentInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutStudentInput | SubscriptionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: SubscriptionCreateManyStudentInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutStudentInput | SubscriptionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutStudentInput | SubscriptionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type CompetitionCreateNestedOneWithoutAchievementInput = {
    create?: XOR<CompetitionCreateWithoutAchievementInput, CompetitionUncheckedCreateWithoutAchievementInput>
    connectOrCreate?: CompetitionCreateOrConnectWithoutAchievementInput
    connect?: CompetitionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAchievementInput = {
    create?: XOR<UserCreateWithoutAchievementInput, UserUncheckedCreateWithoutAchievementInput>
    connectOrCreate?: UserCreateOrConnectWithoutAchievementInput
    connect?: UserWhereUniqueInput
  }

  export type CompetitionUpdateOneRequiredWithoutAchievementNestedInput = {
    create?: XOR<CompetitionCreateWithoutAchievementInput, CompetitionUncheckedCreateWithoutAchievementInput>
    connectOrCreate?: CompetitionCreateOrConnectWithoutAchievementInput
    upsert?: CompetitionUpsertWithoutAchievementInput
    connect?: CompetitionWhereUniqueInput
    update?: XOR<XOR<CompetitionUpdateToOneWithWhereWithoutAchievementInput, CompetitionUpdateWithoutAchievementInput>, CompetitionUncheckedUpdateWithoutAchievementInput>
  }

  export type UserUpdateOneRequiredWithoutAchievementNestedInput = {
    create?: XOR<UserCreateWithoutAchievementInput, UserUncheckedCreateWithoutAchievementInput>
    connectOrCreate?: UserCreateOrConnectWithoutAchievementInput
    upsert?: UserUpsertWithoutAchievementInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAchievementInput, UserUpdateWithoutAchievementInput>, UserUncheckedUpdateWithoutAchievementInput>
  }

  export type CompetitionCreateNestedManyWithoutSeasonInput = {
    create?: XOR<CompetitionCreateWithoutSeasonInput, CompetitionUncheckedCreateWithoutSeasonInput> | CompetitionCreateWithoutSeasonInput[] | CompetitionUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: CompetitionCreateOrConnectWithoutSeasonInput | CompetitionCreateOrConnectWithoutSeasonInput[]
    createMany?: CompetitionCreateManySeasonInputEnvelope
    connect?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
  }

  export type CompetitionUncheckedCreateNestedManyWithoutSeasonInput = {
    create?: XOR<CompetitionCreateWithoutSeasonInput, CompetitionUncheckedCreateWithoutSeasonInput> | CompetitionCreateWithoutSeasonInput[] | CompetitionUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: CompetitionCreateOrConnectWithoutSeasonInput | CompetitionCreateOrConnectWithoutSeasonInput[]
    createMany?: CompetitionCreateManySeasonInputEnvelope
    connect?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
  }

  export type CompetitionUpdateManyWithoutSeasonNestedInput = {
    create?: XOR<CompetitionCreateWithoutSeasonInput, CompetitionUncheckedCreateWithoutSeasonInput> | CompetitionCreateWithoutSeasonInput[] | CompetitionUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: CompetitionCreateOrConnectWithoutSeasonInput | CompetitionCreateOrConnectWithoutSeasonInput[]
    upsert?: CompetitionUpsertWithWhereUniqueWithoutSeasonInput | CompetitionUpsertWithWhereUniqueWithoutSeasonInput[]
    createMany?: CompetitionCreateManySeasonInputEnvelope
    set?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    disconnect?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    delete?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    connect?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    update?: CompetitionUpdateWithWhereUniqueWithoutSeasonInput | CompetitionUpdateWithWhereUniqueWithoutSeasonInput[]
    updateMany?: CompetitionUpdateManyWithWhereWithoutSeasonInput | CompetitionUpdateManyWithWhereWithoutSeasonInput[]
    deleteMany?: CompetitionScalarWhereInput | CompetitionScalarWhereInput[]
  }

  export type CompetitionUncheckedUpdateManyWithoutSeasonNestedInput = {
    create?: XOR<CompetitionCreateWithoutSeasonInput, CompetitionUncheckedCreateWithoutSeasonInput> | CompetitionCreateWithoutSeasonInput[] | CompetitionUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: CompetitionCreateOrConnectWithoutSeasonInput | CompetitionCreateOrConnectWithoutSeasonInput[]
    upsert?: CompetitionUpsertWithWhereUniqueWithoutSeasonInput | CompetitionUpsertWithWhereUniqueWithoutSeasonInput[]
    createMany?: CompetitionCreateManySeasonInputEnvelope
    set?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    disconnect?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    delete?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    connect?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    update?: CompetitionUpdateWithWhereUniqueWithoutSeasonInput | CompetitionUpdateWithWhereUniqueWithoutSeasonInput[]
    updateMany?: CompetitionUpdateManyWithWhereWithoutSeasonInput | CompetitionUpdateManyWithWhereWithoutSeasonInput[]
    deleteMany?: CompetitionScalarWhereInput | CompetitionScalarWhereInput[]
  }

  export type CompetitionCreateNestedManyWithoutSubjectInput = {
    create?: XOR<CompetitionCreateWithoutSubjectInput, CompetitionUncheckedCreateWithoutSubjectInput> | CompetitionCreateWithoutSubjectInput[] | CompetitionUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: CompetitionCreateOrConnectWithoutSubjectInput | CompetitionCreateOrConnectWithoutSubjectInput[]
    createMany?: CompetitionCreateManySubjectInputEnvelope
    connect?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
  }

  export type CompetitionUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<CompetitionCreateWithoutSubjectInput, CompetitionUncheckedCreateWithoutSubjectInput> | CompetitionCreateWithoutSubjectInput[] | CompetitionUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: CompetitionCreateOrConnectWithoutSubjectInput | CompetitionCreateOrConnectWithoutSubjectInput[]
    createMany?: CompetitionCreateManySubjectInputEnvelope
    connect?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
  }

  export type CompetitionUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<CompetitionCreateWithoutSubjectInput, CompetitionUncheckedCreateWithoutSubjectInput> | CompetitionCreateWithoutSubjectInput[] | CompetitionUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: CompetitionCreateOrConnectWithoutSubjectInput | CompetitionCreateOrConnectWithoutSubjectInput[]
    upsert?: CompetitionUpsertWithWhereUniqueWithoutSubjectInput | CompetitionUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: CompetitionCreateManySubjectInputEnvelope
    set?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    disconnect?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    delete?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    connect?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    update?: CompetitionUpdateWithWhereUniqueWithoutSubjectInput | CompetitionUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: CompetitionUpdateManyWithWhereWithoutSubjectInput | CompetitionUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: CompetitionScalarWhereInput | CompetitionScalarWhereInput[]
  }

  export type CompetitionUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<CompetitionCreateWithoutSubjectInput, CompetitionUncheckedCreateWithoutSubjectInput> | CompetitionCreateWithoutSubjectInput[] | CompetitionUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: CompetitionCreateOrConnectWithoutSubjectInput | CompetitionCreateOrConnectWithoutSubjectInput[]
    upsert?: CompetitionUpsertWithWhereUniqueWithoutSubjectInput | CompetitionUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: CompetitionCreateManySubjectInputEnvelope
    set?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    disconnect?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    delete?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    connect?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    update?: CompetitionUpdateWithWhereUniqueWithoutSubjectInput | CompetitionUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: CompetitionUpdateManyWithWhereWithoutSubjectInput | CompetitionUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: CompetitionScalarWhereInput | CompetitionScalarWhereInput[]
  }

  export type AchievementCreateNestedManyWithoutCompetitionInput = {
    create?: XOR<AchievementCreateWithoutCompetitionInput, AchievementUncheckedCreateWithoutCompetitionInput> | AchievementCreateWithoutCompetitionInput[] | AchievementUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: AchievementCreateOrConnectWithoutCompetitionInput | AchievementCreateOrConnectWithoutCompetitionInput[]
    createMany?: AchievementCreateManyCompetitionInputEnvelope
    connect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
  }

  export type RegionCreateNestedOneWithoutCompetitionInput = {
    create?: XOR<RegionCreateWithoutCompetitionInput, RegionUncheckedCreateWithoutCompetitionInput>
    connectOrCreate?: RegionCreateOrConnectWithoutCompetitionInput
    connect?: RegionWhereUniqueInput
  }

  export type SeasonCreateNestedOneWithoutCompetitionInput = {
    create?: XOR<SeasonCreateWithoutCompetitionInput, SeasonUncheckedCreateWithoutCompetitionInput>
    connectOrCreate?: SeasonCreateOrConnectWithoutCompetitionInput
    connect?: SeasonWhereUniqueInput
  }

  export type SubjectCreateNestedOneWithoutCompetitionInput = {
    create?: XOR<SubjectCreateWithoutCompetitionInput, SubjectUncheckedCreateWithoutCompetitionInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutCompetitionInput
    connect?: SubjectWhereUniqueInput
  }

  export type CompetitionParticipantCreateNestedManyWithoutCompetitionInput = {
    create?: XOR<CompetitionParticipantCreateWithoutCompetitionInput, CompetitionParticipantUncheckedCreateWithoutCompetitionInput> | CompetitionParticipantCreateWithoutCompetitionInput[] | CompetitionParticipantUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: CompetitionParticipantCreateOrConnectWithoutCompetitionInput | CompetitionParticipantCreateOrConnectWithoutCompetitionInput[]
    createMany?: CompetitionParticipantCreateManyCompetitionInputEnvelope
    connect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
  }

  export type CompetitionRoomCreateNestedManyWithoutCompetitionInput = {
    create?: XOR<CompetitionRoomCreateWithoutCompetitionInput, CompetitionRoomUncheckedCreateWithoutCompetitionInput> | CompetitionRoomCreateWithoutCompetitionInput[] | CompetitionRoomUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: CompetitionRoomCreateOrConnectWithoutCompetitionInput | CompetitionRoomCreateOrConnectWithoutCompetitionInput[]
    createMany?: CompetitionRoomCreateManyCompetitionInputEnvelope
    connect?: CompetitionRoomWhereUniqueInput | CompetitionRoomWhereUniqueInput[]
  }

  export type KisiCreateNestedManyWithoutCompetitionInput = {
    create?: XOR<KisiCreateWithoutCompetitionInput, KisiUncheckedCreateWithoutCompetitionInput> | KisiCreateWithoutCompetitionInput[] | KisiUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: KisiCreateOrConnectWithoutCompetitionInput | KisiCreateOrConnectWithoutCompetitionInput[]
    createMany?: KisiCreateManyCompetitionInputEnvelope
    connect?: KisiWhereUniqueInput | KisiWhereUniqueInput[]
  }

  export type SubscriptionCreateNestedManyWithoutCompetitionInput = {
    create?: XOR<SubscriptionCreateWithoutCompetitionInput, SubscriptionUncheckedCreateWithoutCompetitionInput> | SubscriptionCreateWithoutCompetitionInput[] | SubscriptionUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutCompetitionInput | SubscriptionCreateOrConnectWithoutCompetitionInput[]
    createMany?: SubscriptionCreateManyCompetitionInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type TryoutCreateNestedManyWithoutCompetitionInput = {
    create?: XOR<TryoutCreateWithoutCompetitionInput, TryoutUncheckedCreateWithoutCompetitionInput> | TryoutCreateWithoutCompetitionInput[] | TryoutUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: TryoutCreateOrConnectWithoutCompetitionInput | TryoutCreateOrConnectWithoutCompetitionInput[]
    createMany?: TryoutCreateManyCompetitionInputEnvelope
    connect?: TryoutWhereUniqueInput | TryoutWhereUniqueInput[]
  }

  export type AchievementUncheckedCreateNestedManyWithoutCompetitionInput = {
    create?: XOR<AchievementCreateWithoutCompetitionInput, AchievementUncheckedCreateWithoutCompetitionInput> | AchievementCreateWithoutCompetitionInput[] | AchievementUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: AchievementCreateOrConnectWithoutCompetitionInput | AchievementCreateOrConnectWithoutCompetitionInput[]
    createMany?: AchievementCreateManyCompetitionInputEnvelope
    connect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
  }

  export type CompetitionParticipantUncheckedCreateNestedManyWithoutCompetitionInput = {
    create?: XOR<CompetitionParticipantCreateWithoutCompetitionInput, CompetitionParticipantUncheckedCreateWithoutCompetitionInput> | CompetitionParticipantCreateWithoutCompetitionInput[] | CompetitionParticipantUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: CompetitionParticipantCreateOrConnectWithoutCompetitionInput | CompetitionParticipantCreateOrConnectWithoutCompetitionInput[]
    createMany?: CompetitionParticipantCreateManyCompetitionInputEnvelope
    connect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
  }

  export type CompetitionRoomUncheckedCreateNestedManyWithoutCompetitionInput = {
    create?: XOR<CompetitionRoomCreateWithoutCompetitionInput, CompetitionRoomUncheckedCreateWithoutCompetitionInput> | CompetitionRoomCreateWithoutCompetitionInput[] | CompetitionRoomUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: CompetitionRoomCreateOrConnectWithoutCompetitionInput | CompetitionRoomCreateOrConnectWithoutCompetitionInput[]
    createMany?: CompetitionRoomCreateManyCompetitionInputEnvelope
    connect?: CompetitionRoomWhereUniqueInput | CompetitionRoomWhereUniqueInput[]
  }

  export type KisiUncheckedCreateNestedManyWithoutCompetitionInput = {
    create?: XOR<KisiCreateWithoutCompetitionInput, KisiUncheckedCreateWithoutCompetitionInput> | KisiCreateWithoutCompetitionInput[] | KisiUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: KisiCreateOrConnectWithoutCompetitionInput | KisiCreateOrConnectWithoutCompetitionInput[]
    createMany?: KisiCreateManyCompetitionInputEnvelope
    connect?: KisiWhereUniqueInput | KisiWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutCompetitionInput = {
    create?: XOR<SubscriptionCreateWithoutCompetitionInput, SubscriptionUncheckedCreateWithoutCompetitionInput> | SubscriptionCreateWithoutCompetitionInput[] | SubscriptionUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutCompetitionInput | SubscriptionCreateOrConnectWithoutCompetitionInput[]
    createMany?: SubscriptionCreateManyCompetitionInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type TryoutUncheckedCreateNestedManyWithoutCompetitionInput = {
    create?: XOR<TryoutCreateWithoutCompetitionInput, TryoutUncheckedCreateWithoutCompetitionInput> | TryoutCreateWithoutCompetitionInput[] | TryoutUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: TryoutCreateOrConnectWithoutCompetitionInput | TryoutCreateOrConnectWithoutCompetitionInput[]
    createMany?: TryoutCreateManyCompetitionInputEnvelope
    connect?: TryoutWhereUniqueInput | TryoutWhereUniqueInput[]
  }

  export type AchievementUpdateManyWithoutCompetitionNestedInput = {
    create?: XOR<AchievementCreateWithoutCompetitionInput, AchievementUncheckedCreateWithoutCompetitionInput> | AchievementCreateWithoutCompetitionInput[] | AchievementUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: AchievementCreateOrConnectWithoutCompetitionInput | AchievementCreateOrConnectWithoutCompetitionInput[]
    upsert?: AchievementUpsertWithWhereUniqueWithoutCompetitionInput | AchievementUpsertWithWhereUniqueWithoutCompetitionInput[]
    createMany?: AchievementCreateManyCompetitionInputEnvelope
    set?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    disconnect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    delete?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    connect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    update?: AchievementUpdateWithWhereUniqueWithoutCompetitionInput | AchievementUpdateWithWhereUniqueWithoutCompetitionInput[]
    updateMany?: AchievementUpdateManyWithWhereWithoutCompetitionInput | AchievementUpdateManyWithWhereWithoutCompetitionInput[]
    deleteMany?: AchievementScalarWhereInput | AchievementScalarWhereInput[]
  }

  export type RegionUpdateOneRequiredWithoutCompetitionNestedInput = {
    create?: XOR<RegionCreateWithoutCompetitionInput, RegionUncheckedCreateWithoutCompetitionInput>
    connectOrCreate?: RegionCreateOrConnectWithoutCompetitionInput
    upsert?: RegionUpsertWithoutCompetitionInput
    connect?: RegionWhereUniqueInput
    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutCompetitionInput, RegionUpdateWithoutCompetitionInput>, RegionUncheckedUpdateWithoutCompetitionInput>
  }

  export type SeasonUpdateOneRequiredWithoutCompetitionNestedInput = {
    create?: XOR<SeasonCreateWithoutCompetitionInput, SeasonUncheckedCreateWithoutCompetitionInput>
    connectOrCreate?: SeasonCreateOrConnectWithoutCompetitionInput
    upsert?: SeasonUpsertWithoutCompetitionInput
    connect?: SeasonWhereUniqueInput
    update?: XOR<XOR<SeasonUpdateToOneWithWhereWithoutCompetitionInput, SeasonUpdateWithoutCompetitionInput>, SeasonUncheckedUpdateWithoutCompetitionInput>
  }

  export type SubjectUpdateOneRequiredWithoutCompetitionNestedInput = {
    create?: XOR<SubjectCreateWithoutCompetitionInput, SubjectUncheckedCreateWithoutCompetitionInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutCompetitionInput
    upsert?: SubjectUpsertWithoutCompetitionInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutCompetitionInput, SubjectUpdateWithoutCompetitionInput>, SubjectUncheckedUpdateWithoutCompetitionInput>
  }

  export type CompetitionParticipantUpdateManyWithoutCompetitionNestedInput = {
    create?: XOR<CompetitionParticipantCreateWithoutCompetitionInput, CompetitionParticipantUncheckedCreateWithoutCompetitionInput> | CompetitionParticipantCreateWithoutCompetitionInput[] | CompetitionParticipantUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: CompetitionParticipantCreateOrConnectWithoutCompetitionInput | CompetitionParticipantCreateOrConnectWithoutCompetitionInput[]
    upsert?: CompetitionParticipantUpsertWithWhereUniqueWithoutCompetitionInput | CompetitionParticipantUpsertWithWhereUniqueWithoutCompetitionInput[]
    createMany?: CompetitionParticipantCreateManyCompetitionInputEnvelope
    set?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    disconnect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    delete?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    connect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    update?: CompetitionParticipantUpdateWithWhereUniqueWithoutCompetitionInput | CompetitionParticipantUpdateWithWhereUniqueWithoutCompetitionInput[]
    updateMany?: CompetitionParticipantUpdateManyWithWhereWithoutCompetitionInput | CompetitionParticipantUpdateManyWithWhereWithoutCompetitionInput[]
    deleteMany?: CompetitionParticipantScalarWhereInput | CompetitionParticipantScalarWhereInput[]
  }

  export type CompetitionRoomUpdateManyWithoutCompetitionNestedInput = {
    create?: XOR<CompetitionRoomCreateWithoutCompetitionInput, CompetitionRoomUncheckedCreateWithoutCompetitionInput> | CompetitionRoomCreateWithoutCompetitionInput[] | CompetitionRoomUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: CompetitionRoomCreateOrConnectWithoutCompetitionInput | CompetitionRoomCreateOrConnectWithoutCompetitionInput[]
    upsert?: CompetitionRoomUpsertWithWhereUniqueWithoutCompetitionInput | CompetitionRoomUpsertWithWhereUniqueWithoutCompetitionInput[]
    createMany?: CompetitionRoomCreateManyCompetitionInputEnvelope
    set?: CompetitionRoomWhereUniqueInput | CompetitionRoomWhereUniqueInput[]
    disconnect?: CompetitionRoomWhereUniqueInput | CompetitionRoomWhereUniqueInput[]
    delete?: CompetitionRoomWhereUniqueInput | CompetitionRoomWhereUniqueInput[]
    connect?: CompetitionRoomWhereUniqueInput | CompetitionRoomWhereUniqueInput[]
    update?: CompetitionRoomUpdateWithWhereUniqueWithoutCompetitionInput | CompetitionRoomUpdateWithWhereUniqueWithoutCompetitionInput[]
    updateMany?: CompetitionRoomUpdateManyWithWhereWithoutCompetitionInput | CompetitionRoomUpdateManyWithWhereWithoutCompetitionInput[]
    deleteMany?: CompetitionRoomScalarWhereInput | CompetitionRoomScalarWhereInput[]
  }

  export type KisiUpdateManyWithoutCompetitionNestedInput = {
    create?: XOR<KisiCreateWithoutCompetitionInput, KisiUncheckedCreateWithoutCompetitionInput> | KisiCreateWithoutCompetitionInput[] | KisiUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: KisiCreateOrConnectWithoutCompetitionInput | KisiCreateOrConnectWithoutCompetitionInput[]
    upsert?: KisiUpsertWithWhereUniqueWithoutCompetitionInput | KisiUpsertWithWhereUniqueWithoutCompetitionInput[]
    createMany?: KisiCreateManyCompetitionInputEnvelope
    set?: KisiWhereUniqueInput | KisiWhereUniqueInput[]
    disconnect?: KisiWhereUniqueInput | KisiWhereUniqueInput[]
    delete?: KisiWhereUniqueInput | KisiWhereUniqueInput[]
    connect?: KisiWhereUniqueInput | KisiWhereUniqueInput[]
    update?: KisiUpdateWithWhereUniqueWithoutCompetitionInput | KisiUpdateWithWhereUniqueWithoutCompetitionInput[]
    updateMany?: KisiUpdateManyWithWhereWithoutCompetitionInput | KisiUpdateManyWithWhereWithoutCompetitionInput[]
    deleteMany?: KisiScalarWhereInput | KisiScalarWhereInput[]
  }

  export type SubscriptionUpdateManyWithoutCompetitionNestedInput = {
    create?: XOR<SubscriptionCreateWithoutCompetitionInput, SubscriptionUncheckedCreateWithoutCompetitionInput> | SubscriptionCreateWithoutCompetitionInput[] | SubscriptionUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutCompetitionInput | SubscriptionCreateOrConnectWithoutCompetitionInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutCompetitionInput | SubscriptionUpsertWithWhereUniqueWithoutCompetitionInput[]
    createMany?: SubscriptionCreateManyCompetitionInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutCompetitionInput | SubscriptionUpdateWithWhereUniqueWithoutCompetitionInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutCompetitionInput | SubscriptionUpdateManyWithWhereWithoutCompetitionInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type TryoutUpdateManyWithoutCompetitionNestedInput = {
    create?: XOR<TryoutCreateWithoutCompetitionInput, TryoutUncheckedCreateWithoutCompetitionInput> | TryoutCreateWithoutCompetitionInput[] | TryoutUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: TryoutCreateOrConnectWithoutCompetitionInput | TryoutCreateOrConnectWithoutCompetitionInput[]
    upsert?: TryoutUpsertWithWhereUniqueWithoutCompetitionInput | TryoutUpsertWithWhereUniqueWithoutCompetitionInput[]
    createMany?: TryoutCreateManyCompetitionInputEnvelope
    set?: TryoutWhereUniqueInput | TryoutWhereUniqueInput[]
    disconnect?: TryoutWhereUniqueInput | TryoutWhereUniqueInput[]
    delete?: TryoutWhereUniqueInput | TryoutWhereUniqueInput[]
    connect?: TryoutWhereUniqueInput | TryoutWhereUniqueInput[]
    update?: TryoutUpdateWithWhereUniqueWithoutCompetitionInput | TryoutUpdateWithWhereUniqueWithoutCompetitionInput[]
    updateMany?: TryoutUpdateManyWithWhereWithoutCompetitionInput | TryoutUpdateManyWithWhereWithoutCompetitionInput[]
    deleteMany?: TryoutScalarWhereInput | TryoutScalarWhereInput[]
  }

  export type AchievementUncheckedUpdateManyWithoutCompetitionNestedInput = {
    create?: XOR<AchievementCreateWithoutCompetitionInput, AchievementUncheckedCreateWithoutCompetitionInput> | AchievementCreateWithoutCompetitionInput[] | AchievementUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: AchievementCreateOrConnectWithoutCompetitionInput | AchievementCreateOrConnectWithoutCompetitionInput[]
    upsert?: AchievementUpsertWithWhereUniqueWithoutCompetitionInput | AchievementUpsertWithWhereUniqueWithoutCompetitionInput[]
    createMany?: AchievementCreateManyCompetitionInputEnvelope
    set?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    disconnect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    delete?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    connect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    update?: AchievementUpdateWithWhereUniqueWithoutCompetitionInput | AchievementUpdateWithWhereUniqueWithoutCompetitionInput[]
    updateMany?: AchievementUpdateManyWithWhereWithoutCompetitionInput | AchievementUpdateManyWithWhereWithoutCompetitionInput[]
    deleteMany?: AchievementScalarWhereInput | AchievementScalarWhereInput[]
  }

  export type CompetitionParticipantUncheckedUpdateManyWithoutCompetitionNestedInput = {
    create?: XOR<CompetitionParticipantCreateWithoutCompetitionInput, CompetitionParticipantUncheckedCreateWithoutCompetitionInput> | CompetitionParticipantCreateWithoutCompetitionInput[] | CompetitionParticipantUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: CompetitionParticipantCreateOrConnectWithoutCompetitionInput | CompetitionParticipantCreateOrConnectWithoutCompetitionInput[]
    upsert?: CompetitionParticipantUpsertWithWhereUniqueWithoutCompetitionInput | CompetitionParticipantUpsertWithWhereUniqueWithoutCompetitionInput[]
    createMany?: CompetitionParticipantCreateManyCompetitionInputEnvelope
    set?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    disconnect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    delete?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    connect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    update?: CompetitionParticipantUpdateWithWhereUniqueWithoutCompetitionInput | CompetitionParticipantUpdateWithWhereUniqueWithoutCompetitionInput[]
    updateMany?: CompetitionParticipantUpdateManyWithWhereWithoutCompetitionInput | CompetitionParticipantUpdateManyWithWhereWithoutCompetitionInput[]
    deleteMany?: CompetitionParticipantScalarWhereInput | CompetitionParticipantScalarWhereInput[]
  }

  export type CompetitionRoomUncheckedUpdateManyWithoutCompetitionNestedInput = {
    create?: XOR<CompetitionRoomCreateWithoutCompetitionInput, CompetitionRoomUncheckedCreateWithoutCompetitionInput> | CompetitionRoomCreateWithoutCompetitionInput[] | CompetitionRoomUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: CompetitionRoomCreateOrConnectWithoutCompetitionInput | CompetitionRoomCreateOrConnectWithoutCompetitionInput[]
    upsert?: CompetitionRoomUpsertWithWhereUniqueWithoutCompetitionInput | CompetitionRoomUpsertWithWhereUniqueWithoutCompetitionInput[]
    createMany?: CompetitionRoomCreateManyCompetitionInputEnvelope
    set?: CompetitionRoomWhereUniqueInput | CompetitionRoomWhereUniqueInput[]
    disconnect?: CompetitionRoomWhereUniqueInput | CompetitionRoomWhereUniqueInput[]
    delete?: CompetitionRoomWhereUniqueInput | CompetitionRoomWhereUniqueInput[]
    connect?: CompetitionRoomWhereUniqueInput | CompetitionRoomWhereUniqueInput[]
    update?: CompetitionRoomUpdateWithWhereUniqueWithoutCompetitionInput | CompetitionRoomUpdateWithWhereUniqueWithoutCompetitionInput[]
    updateMany?: CompetitionRoomUpdateManyWithWhereWithoutCompetitionInput | CompetitionRoomUpdateManyWithWhereWithoutCompetitionInput[]
    deleteMany?: CompetitionRoomScalarWhereInput | CompetitionRoomScalarWhereInput[]
  }

  export type KisiUncheckedUpdateManyWithoutCompetitionNestedInput = {
    create?: XOR<KisiCreateWithoutCompetitionInput, KisiUncheckedCreateWithoutCompetitionInput> | KisiCreateWithoutCompetitionInput[] | KisiUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: KisiCreateOrConnectWithoutCompetitionInput | KisiCreateOrConnectWithoutCompetitionInput[]
    upsert?: KisiUpsertWithWhereUniqueWithoutCompetitionInput | KisiUpsertWithWhereUniqueWithoutCompetitionInput[]
    createMany?: KisiCreateManyCompetitionInputEnvelope
    set?: KisiWhereUniqueInput | KisiWhereUniqueInput[]
    disconnect?: KisiWhereUniqueInput | KisiWhereUniqueInput[]
    delete?: KisiWhereUniqueInput | KisiWhereUniqueInput[]
    connect?: KisiWhereUniqueInput | KisiWhereUniqueInput[]
    update?: KisiUpdateWithWhereUniqueWithoutCompetitionInput | KisiUpdateWithWhereUniqueWithoutCompetitionInput[]
    updateMany?: KisiUpdateManyWithWhereWithoutCompetitionInput | KisiUpdateManyWithWhereWithoutCompetitionInput[]
    deleteMany?: KisiScalarWhereInput | KisiScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutCompetitionNestedInput = {
    create?: XOR<SubscriptionCreateWithoutCompetitionInput, SubscriptionUncheckedCreateWithoutCompetitionInput> | SubscriptionCreateWithoutCompetitionInput[] | SubscriptionUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutCompetitionInput | SubscriptionCreateOrConnectWithoutCompetitionInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutCompetitionInput | SubscriptionUpsertWithWhereUniqueWithoutCompetitionInput[]
    createMany?: SubscriptionCreateManyCompetitionInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutCompetitionInput | SubscriptionUpdateWithWhereUniqueWithoutCompetitionInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutCompetitionInput | SubscriptionUpdateManyWithWhereWithoutCompetitionInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type TryoutUncheckedUpdateManyWithoutCompetitionNestedInput = {
    create?: XOR<TryoutCreateWithoutCompetitionInput, TryoutUncheckedCreateWithoutCompetitionInput> | TryoutCreateWithoutCompetitionInput[] | TryoutUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: TryoutCreateOrConnectWithoutCompetitionInput | TryoutCreateOrConnectWithoutCompetitionInput[]
    upsert?: TryoutUpsertWithWhereUniqueWithoutCompetitionInput | TryoutUpsertWithWhereUniqueWithoutCompetitionInput[]
    createMany?: TryoutCreateManyCompetitionInputEnvelope
    set?: TryoutWhereUniqueInput | TryoutWhereUniqueInput[]
    disconnect?: TryoutWhereUniqueInput | TryoutWhereUniqueInput[]
    delete?: TryoutWhereUniqueInput | TryoutWhereUniqueInput[]
    connect?: TryoutWhereUniqueInput | TryoutWhereUniqueInput[]
    update?: TryoutUpdateWithWhereUniqueWithoutCompetitionInput | TryoutUpdateWithWhereUniqueWithoutCompetitionInput[]
    updateMany?: TryoutUpdateManyWithWhereWithoutCompetitionInput | TryoutUpdateManyWithWhereWithoutCompetitionInput[]
    deleteMany?: TryoutScalarWhereInput | TryoutScalarWhereInput[]
  }

  export type CompetitionCreateNestedOneWithoutSubscriptionInput = {
    create?: XOR<CompetitionCreateWithoutSubscriptionInput, CompetitionUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: CompetitionCreateOrConnectWithoutSubscriptionInput
    connect?: CompetitionWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutSubscriptionInput = {
    create?: XOR<StudentCreateWithoutSubscriptionInput, StudentUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: StudentCreateOrConnectWithoutSubscriptionInput
    connect?: StudentWhereUniqueInput
  }

  export type CompetitionUpdateOneWithoutSubscriptionNestedInput = {
    create?: XOR<CompetitionCreateWithoutSubscriptionInput, CompetitionUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: CompetitionCreateOrConnectWithoutSubscriptionInput
    upsert?: CompetitionUpsertWithoutSubscriptionInput
    disconnect?: CompetitionWhereInput | boolean
    delete?: CompetitionWhereInput | boolean
    connect?: CompetitionWhereUniqueInput
    update?: XOR<XOR<CompetitionUpdateToOneWithWhereWithoutSubscriptionInput, CompetitionUpdateWithoutSubscriptionInput>, CompetitionUncheckedUpdateWithoutSubscriptionInput>
  }

  export type StudentUpdateOneRequiredWithoutSubscriptionNestedInput = {
    create?: XOR<StudentCreateWithoutSubscriptionInput, StudentUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: StudentCreateOrConnectWithoutSubscriptionInput
    upsert?: StudentUpsertWithoutSubscriptionInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutSubscriptionInput, StudentUpdateWithoutSubscriptionInput>, StudentUncheckedUpdateWithoutSubscriptionInput>
  }

  export type CompetitionCreateNestedManyWithoutRegionInput = {
    create?: XOR<CompetitionCreateWithoutRegionInput, CompetitionUncheckedCreateWithoutRegionInput> | CompetitionCreateWithoutRegionInput[] | CompetitionUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: CompetitionCreateOrConnectWithoutRegionInput | CompetitionCreateOrConnectWithoutRegionInput[]
    createMany?: CompetitionCreateManyRegionInputEnvelope
    connect?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
  }

  export type CompetitionUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<CompetitionCreateWithoutRegionInput, CompetitionUncheckedCreateWithoutRegionInput> | CompetitionCreateWithoutRegionInput[] | CompetitionUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: CompetitionCreateOrConnectWithoutRegionInput | CompetitionCreateOrConnectWithoutRegionInput[]
    createMany?: CompetitionCreateManyRegionInputEnvelope
    connect?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
  }

  export type CompetitionUpdateManyWithoutRegionNestedInput = {
    create?: XOR<CompetitionCreateWithoutRegionInput, CompetitionUncheckedCreateWithoutRegionInput> | CompetitionCreateWithoutRegionInput[] | CompetitionUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: CompetitionCreateOrConnectWithoutRegionInput | CompetitionCreateOrConnectWithoutRegionInput[]
    upsert?: CompetitionUpsertWithWhereUniqueWithoutRegionInput | CompetitionUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: CompetitionCreateManyRegionInputEnvelope
    set?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    disconnect?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    delete?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    connect?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    update?: CompetitionUpdateWithWhereUniqueWithoutRegionInput | CompetitionUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: CompetitionUpdateManyWithWhereWithoutRegionInput | CompetitionUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: CompetitionScalarWhereInput | CompetitionScalarWhereInput[]
  }

  export type CompetitionUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<CompetitionCreateWithoutRegionInput, CompetitionUncheckedCreateWithoutRegionInput> | CompetitionCreateWithoutRegionInput[] | CompetitionUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: CompetitionCreateOrConnectWithoutRegionInput | CompetitionCreateOrConnectWithoutRegionInput[]
    upsert?: CompetitionUpsertWithWhereUniqueWithoutRegionInput | CompetitionUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: CompetitionCreateManyRegionInputEnvelope
    set?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    disconnect?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    delete?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    connect?: CompetitionWhereUniqueInput | CompetitionWhereUniqueInput[]
    update?: CompetitionUpdateWithWhereUniqueWithoutRegionInput | CompetitionUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: CompetitionUpdateManyWithWhereWithoutRegionInput | CompetitionUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: CompetitionScalarWhereInput | CompetitionScalarWhereInput[]
  }

  export type CompetitionRoomCreateNestedManyWithoutSupervisorInput = {
    create?: XOR<CompetitionRoomCreateWithoutSupervisorInput, CompetitionRoomUncheckedCreateWithoutSupervisorInput> | CompetitionRoomCreateWithoutSupervisorInput[] | CompetitionRoomUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: CompetitionRoomCreateOrConnectWithoutSupervisorInput | CompetitionRoomCreateOrConnectWithoutSupervisorInput[]
    createMany?: CompetitionRoomCreateManySupervisorInputEnvelope
    connect?: CompetitionRoomWhereUniqueInput | CompetitionRoomWhereUniqueInput[]
  }

  export type CompetitionRoomUncheckedCreateNestedManyWithoutSupervisorInput = {
    create?: XOR<CompetitionRoomCreateWithoutSupervisorInput, CompetitionRoomUncheckedCreateWithoutSupervisorInput> | CompetitionRoomCreateWithoutSupervisorInput[] | CompetitionRoomUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: CompetitionRoomCreateOrConnectWithoutSupervisorInput | CompetitionRoomCreateOrConnectWithoutSupervisorInput[]
    createMany?: CompetitionRoomCreateManySupervisorInputEnvelope
    connect?: CompetitionRoomWhereUniqueInput | CompetitionRoomWhereUniqueInput[]
  }

  export type CompetitionRoomUpdateManyWithoutSupervisorNestedInput = {
    create?: XOR<CompetitionRoomCreateWithoutSupervisorInput, CompetitionRoomUncheckedCreateWithoutSupervisorInput> | CompetitionRoomCreateWithoutSupervisorInput[] | CompetitionRoomUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: CompetitionRoomCreateOrConnectWithoutSupervisorInput | CompetitionRoomCreateOrConnectWithoutSupervisorInput[]
    upsert?: CompetitionRoomUpsertWithWhereUniqueWithoutSupervisorInput | CompetitionRoomUpsertWithWhereUniqueWithoutSupervisorInput[]
    createMany?: CompetitionRoomCreateManySupervisorInputEnvelope
    set?: CompetitionRoomWhereUniqueInput | CompetitionRoomWhereUniqueInput[]
    disconnect?: CompetitionRoomWhereUniqueInput | CompetitionRoomWhereUniqueInput[]
    delete?: CompetitionRoomWhereUniqueInput | CompetitionRoomWhereUniqueInput[]
    connect?: CompetitionRoomWhereUniqueInput | CompetitionRoomWhereUniqueInput[]
    update?: CompetitionRoomUpdateWithWhereUniqueWithoutSupervisorInput | CompetitionRoomUpdateWithWhereUniqueWithoutSupervisorInput[]
    updateMany?: CompetitionRoomUpdateManyWithWhereWithoutSupervisorInput | CompetitionRoomUpdateManyWithWhereWithoutSupervisorInput[]
    deleteMany?: CompetitionRoomScalarWhereInput | CompetitionRoomScalarWhereInput[]
  }

  export type CompetitionRoomUncheckedUpdateManyWithoutSupervisorNestedInput = {
    create?: XOR<CompetitionRoomCreateWithoutSupervisorInput, CompetitionRoomUncheckedCreateWithoutSupervisorInput> | CompetitionRoomCreateWithoutSupervisorInput[] | CompetitionRoomUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: CompetitionRoomCreateOrConnectWithoutSupervisorInput | CompetitionRoomCreateOrConnectWithoutSupervisorInput[]
    upsert?: CompetitionRoomUpsertWithWhereUniqueWithoutSupervisorInput | CompetitionRoomUpsertWithWhereUniqueWithoutSupervisorInput[]
    createMany?: CompetitionRoomCreateManySupervisorInputEnvelope
    set?: CompetitionRoomWhereUniqueInput | CompetitionRoomWhereUniqueInput[]
    disconnect?: CompetitionRoomWhereUniqueInput | CompetitionRoomWhereUniqueInput[]
    delete?: CompetitionRoomWhereUniqueInput | CompetitionRoomWhereUniqueInput[]
    connect?: CompetitionRoomWhereUniqueInput | CompetitionRoomWhereUniqueInput[]
    update?: CompetitionRoomUpdateWithWhereUniqueWithoutSupervisorInput | CompetitionRoomUpdateWithWhereUniqueWithoutSupervisorInput[]
    updateMany?: CompetitionRoomUpdateManyWithWhereWithoutSupervisorInput | CompetitionRoomUpdateManyWithWhereWithoutSupervisorInput[]
    deleteMany?: CompetitionRoomScalarWhereInput | CompetitionRoomScalarWhereInput[]
  }

  export type CompetitionParticipantCreateNestedManyWithoutCompetitionRoomInput = {
    create?: XOR<CompetitionParticipantCreateWithoutCompetitionRoomInput, CompetitionParticipantUncheckedCreateWithoutCompetitionRoomInput> | CompetitionParticipantCreateWithoutCompetitionRoomInput[] | CompetitionParticipantUncheckedCreateWithoutCompetitionRoomInput[]
    connectOrCreate?: CompetitionParticipantCreateOrConnectWithoutCompetitionRoomInput | CompetitionParticipantCreateOrConnectWithoutCompetitionRoomInput[]
    createMany?: CompetitionParticipantCreateManyCompetitionRoomInputEnvelope
    connect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
  }

  export type CompetitionCreateNestedOneWithoutCompetitionRoomInput = {
    create?: XOR<CompetitionCreateWithoutCompetitionRoomInput, CompetitionUncheckedCreateWithoutCompetitionRoomInput>
    connectOrCreate?: CompetitionCreateOrConnectWithoutCompetitionRoomInput
    connect?: CompetitionWhereUniqueInput
  }

  export type SupervisorCreateNestedOneWithoutCompetitionRoomInput = {
    create?: XOR<SupervisorCreateWithoutCompetitionRoomInput, SupervisorUncheckedCreateWithoutCompetitionRoomInput>
    connectOrCreate?: SupervisorCreateOrConnectWithoutCompetitionRoomInput
    connect?: SupervisorWhereUniqueInput
  }

  export type CompetitionParticipantUncheckedCreateNestedManyWithoutCompetitionRoomInput = {
    create?: XOR<CompetitionParticipantCreateWithoutCompetitionRoomInput, CompetitionParticipantUncheckedCreateWithoutCompetitionRoomInput> | CompetitionParticipantCreateWithoutCompetitionRoomInput[] | CompetitionParticipantUncheckedCreateWithoutCompetitionRoomInput[]
    connectOrCreate?: CompetitionParticipantCreateOrConnectWithoutCompetitionRoomInput | CompetitionParticipantCreateOrConnectWithoutCompetitionRoomInput[]
    createMany?: CompetitionParticipantCreateManyCompetitionRoomInputEnvelope
    connect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
  }

  export type CompetitionParticipantUpdateManyWithoutCompetitionRoomNestedInput = {
    create?: XOR<CompetitionParticipantCreateWithoutCompetitionRoomInput, CompetitionParticipantUncheckedCreateWithoutCompetitionRoomInput> | CompetitionParticipantCreateWithoutCompetitionRoomInput[] | CompetitionParticipantUncheckedCreateWithoutCompetitionRoomInput[]
    connectOrCreate?: CompetitionParticipantCreateOrConnectWithoutCompetitionRoomInput | CompetitionParticipantCreateOrConnectWithoutCompetitionRoomInput[]
    upsert?: CompetitionParticipantUpsertWithWhereUniqueWithoutCompetitionRoomInput | CompetitionParticipantUpsertWithWhereUniqueWithoutCompetitionRoomInput[]
    createMany?: CompetitionParticipantCreateManyCompetitionRoomInputEnvelope
    set?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    disconnect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    delete?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    connect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    update?: CompetitionParticipantUpdateWithWhereUniqueWithoutCompetitionRoomInput | CompetitionParticipantUpdateWithWhereUniqueWithoutCompetitionRoomInput[]
    updateMany?: CompetitionParticipantUpdateManyWithWhereWithoutCompetitionRoomInput | CompetitionParticipantUpdateManyWithWhereWithoutCompetitionRoomInput[]
    deleteMany?: CompetitionParticipantScalarWhereInput | CompetitionParticipantScalarWhereInput[]
  }

  export type CompetitionUpdateOneRequiredWithoutCompetitionRoomNestedInput = {
    create?: XOR<CompetitionCreateWithoutCompetitionRoomInput, CompetitionUncheckedCreateWithoutCompetitionRoomInput>
    connectOrCreate?: CompetitionCreateOrConnectWithoutCompetitionRoomInput
    upsert?: CompetitionUpsertWithoutCompetitionRoomInput
    connect?: CompetitionWhereUniqueInput
    update?: XOR<XOR<CompetitionUpdateToOneWithWhereWithoutCompetitionRoomInput, CompetitionUpdateWithoutCompetitionRoomInput>, CompetitionUncheckedUpdateWithoutCompetitionRoomInput>
  }

  export type SupervisorUpdateOneWithoutCompetitionRoomNestedInput = {
    create?: XOR<SupervisorCreateWithoutCompetitionRoomInput, SupervisorUncheckedCreateWithoutCompetitionRoomInput>
    connectOrCreate?: SupervisorCreateOrConnectWithoutCompetitionRoomInput
    upsert?: SupervisorUpsertWithoutCompetitionRoomInput
    disconnect?: SupervisorWhereInput | boolean
    delete?: SupervisorWhereInput | boolean
    connect?: SupervisorWhereUniqueInput
    update?: XOR<XOR<SupervisorUpdateToOneWithWhereWithoutCompetitionRoomInput, SupervisorUpdateWithoutCompetitionRoomInput>, SupervisorUncheckedUpdateWithoutCompetitionRoomInput>
  }

  export type CompetitionParticipantUncheckedUpdateManyWithoutCompetitionRoomNestedInput = {
    create?: XOR<CompetitionParticipantCreateWithoutCompetitionRoomInput, CompetitionParticipantUncheckedCreateWithoutCompetitionRoomInput> | CompetitionParticipantCreateWithoutCompetitionRoomInput[] | CompetitionParticipantUncheckedCreateWithoutCompetitionRoomInput[]
    connectOrCreate?: CompetitionParticipantCreateOrConnectWithoutCompetitionRoomInput | CompetitionParticipantCreateOrConnectWithoutCompetitionRoomInput[]
    upsert?: CompetitionParticipantUpsertWithWhereUniqueWithoutCompetitionRoomInput | CompetitionParticipantUpsertWithWhereUniqueWithoutCompetitionRoomInput[]
    createMany?: CompetitionParticipantCreateManyCompetitionRoomInputEnvelope
    set?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    disconnect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    delete?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    connect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    update?: CompetitionParticipantUpdateWithWhereUniqueWithoutCompetitionRoomInput | CompetitionParticipantUpdateWithWhereUniqueWithoutCompetitionRoomInput[]
    updateMany?: CompetitionParticipantUpdateManyWithWhereWithoutCompetitionRoomInput | CompetitionParticipantUpdateManyWithWhereWithoutCompetitionRoomInput[]
    deleteMany?: CompetitionParticipantScalarWhereInput | CompetitionParticipantScalarWhereInput[]
  }

  export type CompetitionCreateNestedOneWithoutCompetitionParticipantInput = {
    create?: XOR<CompetitionCreateWithoutCompetitionParticipantInput, CompetitionUncheckedCreateWithoutCompetitionParticipantInput>
    connectOrCreate?: CompetitionCreateOrConnectWithoutCompetitionParticipantInput
    connect?: CompetitionWhereUniqueInput
  }

  export type CompetitionRoomCreateNestedOneWithoutCompetitionParticipantInput = {
    create?: XOR<CompetitionRoomCreateWithoutCompetitionParticipantInput, CompetitionRoomUncheckedCreateWithoutCompetitionParticipantInput>
    connectOrCreate?: CompetitionRoomCreateOrConnectWithoutCompetitionParticipantInput
    connect?: CompetitionRoomWhereUniqueInput
  }

  export type PaymentCreateNestedOneWithoutCompetitionParticipantInput = {
    create?: XOR<PaymentCreateWithoutCompetitionParticipantInput, PaymentUncheckedCreateWithoutCompetitionParticipantInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutCompetitionParticipantInput
    connect?: PaymentWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutCompetitionParticipantInput = {
    create?: XOR<StudentCreateWithoutCompetitionParticipantInput, StudentUncheckedCreateWithoutCompetitionParticipantInput>
    connectOrCreate?: StudentCreateOrConnectWithoutCompetitionParticipantInput
    connect?: StudentWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CompetitionUpdateOneRequiredWithoutCompetitionParticipantNestedInput = {
    create?: XOR<CompetitionCreateWithoutCompetitionParticipantInput, CompetitionUncheckedCreateWithoutCompetitionParticipantInput>
    connectOrCreate?: CompetitionCreateOrConnectWithoutCompetitionParticipantInput
    upsert?: CompetitionUpsertWithoutCompetitionParticipantInput
    connect?: CompetitionWhereUniqueInput
    update?: XOR<XOR<CompetitionUpdateToOneWithWhereWithoutCompetitionParticipantInput, CompetitionUpdateWithoutCompetitionParticipantInput>, CompetitionUncheckedUpdateWithoutCompetitionParticipantInput>
  }

  export type CompetitionRoomUpdateOneWithoutCompetitionParticipantNestedInput = {
    create?: XOR<CompetitionRoomCreateWithoutCompetitionParticipantInput, CompetitionRoomUncheckedCreateWithoutCompetitionParticipantInput>
    connectOrCreate?: CompetitionRoomCreateOrConnectWithoutCompetitionParticipantInput
    upsert?: CompetitionRoomUpsertWithoutCompetitionParticipantInput
    disconnect?: CompetitionRoomWhereInput | boolean
    delete?: CompetitionRoomWhereInput | boolean
    connect?: CompetitionRoomWhereUniqueInput
    update?: XOR<XOR<CompetitionRoomUpdateToOneWithWhereWithoutCompetitionParticipantInput, CompetitionRoomUpdateWithoutCompetitionParticipantInput>, CompetitionRoomUncheckedUpdateWithoutCompetitionParticipantInput>
  }

  export type PaymentUpdateOneWithoutCompetitionParticipantNestedInput = {
    create?: XOR<PaymentCreateWithoutCompetitionParticipantInput, PaymentUncheckedCreateWithoutCompetitionParticipantInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutCompetitionParticipantInput
    upsert?: PaymentUpsertWithoutCompetitionParticipantInput
    disconnect?: PaymentWhereInput | boolean
    delete?: PaymentWhereInput | boolean
    connect?: PaymentWhereUniqueInput
    update?: XOR<XOR<PaymentUpdateToOneWithWhereWithoutCompetitionParticipantInput, PaymentUpdateWithoutCompetitionParticipantInput>, PaymentUncheckedUpdateWithoutCompetitionParticipantInput>
  }

  export type StudentUpdateOneRequiredWithoutCompetitionParticipantNestedInput = {
    create?: XOR<StudentCreateWithoutCompetitionParticipantInput, StudentUncheckedCreateWithoutCompetitionParticipantInput>
    connectOrCreate?: StudentCreateOrConnectWithoutCompetitionParticipantInput
    upsert?: StudentUpsertWithoutCompetitionParticipantInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutCompetitionParticipantInput, StudentUpdateWithoutCompetitionParticipantInput>, StudentUncheckedUpdateWithoutCompetitionParticipantInput>
  }

  export type CompetitionCreateNestedOneWithoutKisiInput = {
    create?: XOR<CompetitionCreateWithoutKisiInput, CompetitionUncheckedCreateWithoutKisiInput>
    connectOrCreate?: CompetitionCreateOrConnectWithoutKisiInput
    connect?: CompetitionWhereUniqueInput
  }

  export type CompetitionUpdateOneRequiredWithoutKisiNestedInput = {
    create?: XOR<CompetitionCreateWithoutKisiInput, CompetitionUncheckedCreateWithoutKisiInput>
    connectOrCreate?: CompetitionCreateOrConnectWithoutKisiInput
    upsert?: CompetitionUpsertWithoutKisiInput
    connect?: CompetitionWhereUniqueInput
    update?: XOR<XOR<CompetitionUpdateToOneWithWhereWithoutKisiInput, CompetitionUpdateWithoutKisiInput>, CompetitionUncheckedUpdateWithoutKisiInput>
  }

  export type QuestionCreateNestedManyWithoutTryoutInput = {
    create?: XOR<QuestionCreateWithoutTryoutInput, QuestionUncheckedCreateWithoutTryoutInput> | QuestionCreateWithoutTryoutInput[] | QuestionUncheckedCreateWithoutTryoutInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutTryoutInput | QuestionCreateOrConnectWithoutTryoutInput[]
    createMany?: QuestionCreateManyTryoutInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type CompetitionCreateNestedOneWithoutTryoutInput = {
    create?: XOR<CompetitionCreateWithoutTryoutInput, CompetitionUncheckedCreateWithoutTryoutInput>
    connectOrCreate?: CompetitionCreateOrConnectWithoutTryoutInput
    connect?: CompetitionWhereUniqueInput
  }

  export type QuestionUncheckedCreateNestedManyWithoutTryoutInput = {
    create?: XOR<QuestionCreateWithoutTryoutInput, QuestionUncheckedCreateWithoutTryoutInput> | QuestionCreateWithoutTryoutInput[] | QuestionUncheckedCreateWithoutTryoutInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutTryoutInput | QuestionCreateOrConnectWithoutTryoutInput[]
    createMany?: QuestionCreateManyTryoutInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type QuestionUpdateManyWithoutTryoutNestedInput = {
    create?: XOR<QuestionCreateWithoutTryoutInput, QuestionUncheckedCreateWithoutTryoutInput> | QuestionCreateWithoutTryoutInput[] | QuestionUncheckedCreateWithoutTryoutInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutTryoutInput | QuestionCreateOrConnectWithoutTryoutInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutTryoutInput | QuestionUpsertWithWhereUniqueWithoutTryoutInput[]
    createMany?: QuestionCreateManyTryoutInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutTryoutInput | QuestionUpdateWithWhereUniqueWithoutTryoutInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutTryoutInput | QuestionUpdateManyWithWhereWithoutTryoutInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type CompetitionUpdateOneRequiredWithoutTryoutNestedInput = {
    create?: XOR<CompetitionCreateWithoutTryoutInput, CompetitionUncheckedCreateWithoutTryoutInput>
    connectOrCreate?: CompetitionCreateOrConnectWithoutTryoutInput
    upsert?: CompetitionUpsertWithoutTryoutInput
    connect?: CompetitionWhereUniqueInput
    update?: XOR<XOR<CompetitionUpdateToOneWithWhereWithoutTryoutInput, CompetitionUpdateWithoutTryoutInput>, CompetitionUncheckedUpdateWithoutTryoutInput>
  }

  export type QuestionUncheckedUpdateManyWithoutTryoutNestedInput = {
    create?: XOR<QuestionCreateWithoutTryoutInput, QuestionUncheckedCreateWithoutTryoutInput> | QuestionCreateWithoutTryoutInput[] | QuestionUncheckedCreateWithoutTryoutInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutTryoutInput | QuestionCreateOrConnectWithoutTryoutInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutTryoutInput | QuestionUpsertWithWhereUniqueWithoutTryoutInput[]
    createMany?: QuestionCreateManyTryoutInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutTryoutInput | QuestionUpdateWithWhereUniqueWithoutTryoutInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutTryoutInput | QuestionUpdateManyWithWhereWithoutTryoutInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type OptionCreateNestedManyWithoutQuestionInput = {
    create?: XOR<OptionCreateWithoutQuestionInput, OptionUncheckedCreateWithoutQuestionInput> | OptionCreateWithoutQuestionInput[] | OptionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: OptionCreateOrConnectWithoutQuestionInput | OptionCreateOrConnectWithoutQuestionInput[]
    createMany?: OptionCreateManyQuestionInputEnvelope
    connect?: OptionWhereUniqueInput | OptionWhereUniqueInput[]
  }

  export type TryoutCreateNestedOneWithoutQuestionInput = {
    create?: XOR<TryoutCreateWithoutQuestionInput, TryoutUncheckedCreateWithoutQuestionInput>
    connectOrCreate?: TryoutCreateOrConnectWithoutQuestionInput
    connect?: TryoutWhereUniqueInput
  }

  export type OptionUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<OptionCreateWithoutQuestionInput, OptionUncheckedCreateWithoutQuestionInput> | OptionCreateWithoutQuestionInput[] | OptionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: OptionCreateOrConnectWithoutQuestionInput | OptionCreateOrConnectWithoutQuestionInput[]
    createMany?: OptionCreateManyQuestionInputEnvelope
    connect?: OptionWhereUniqueInput | OptionWhereUniqueInput[]
  }

  export type OptionUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<OptionCreateWithoutQuestionInput, OptionUncheckedCreateWithoutQuestionInput> | OptionCreateWithoutQuestionInput[] | OptionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: OptionCreateOrConnectWithoutQuestionInput | OptionCreateOrConnectWithoutQuestionInput[]
    upsert?: OptionUpsertWithWhereUniqueWithoutQuestionInput | OptionUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: OptionCreateManyQuestionInputEnvelope
    set?: OptionWhereUniqueInput | OptionWhereUniqueInput[]
    disconnect?: OptionWhereUniqueInput | OptionWhereUniqueInput[]
    delete?: OptionWhereUniqueInput | OptionWhereUniqueInput[]
    connect?: OptionWhereUniqueInput | OptionWhereUniqueInput[]
    update?: OptionUpdateWithWhereUniqueWithoutQuestionInput | OptionUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: OptionUpdateManyWithWhereWithoutQuestionInput | OptionUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: OptionScalarWhereInput | OptionScalarWhereInput[]
  }

  export type TryoutUpdateOneRequiredWithoutQuestionNestedInput = {
    create?: XOR<TryoutCreateWithoutQuestionInput, TryoutUncheckedCreateWithoutQuestionInput>
    connectOrCreate?: TryoutCreateOrConnectWithoutQuestionInput
    upsert?: TryoutUpsertWithoutQuestionInput
    connect?: TryoutWhereUniqueInput
    update?: XOR<XOR<TryoutUpdateToOneWithWhereWithoutQuestionInput, TryoutUpdateWithoutQuestionInput>, TryoutUncheckedUpdateWithoutQuestionInput>
  }

  export type OptionUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<OptionCreateWithoutQuestionInput, OptionUncheckedCreateWithoutQuestionInput> | OptionCreateWithoutQuestionInput[] | OptionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: OptionCreateOrConnectWithoutQuestionInput | OptionCreateOrConnectWithoutQuestionInput[]
    upsert?: OptionUpsertWithWhereUniqueWithoutQuestionInput | OptionUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: OptionCreateManyQuestionInputEnvelope
    set?: OptionWhereUniqueInput | OptionWhereUniqueInput[]
    disconnect?: OptionWhereUniqueInput | OptionWhereUniqueInput[]
    delete?: OptionWhereUniqueInput | OptionWhereUniqueInput[]
    connect?: OptionWhereUniqueInput | OptionWhereUniqueInput[]
    update?: OptionUpdateWithWhereUniqueWithoutQuestionInput | OptionUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: OptionUpdateManyWithWhereWithoutQuestionInput | OptionUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: OptionScalarWhereInput | OptionScalarWhereInput[]
  }

  export type QuestionCreateNestedOneWithoutOptionInput = {
    create?: XOR<QuestionCreateWithoutOptionInput, QuestionUncheckedCreateWithoutOptionInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutOptionInput
    connect?: QuestionWhereUniqueInput
  }

  export type QuestionUpdateOneRequiredWithoutOptionNestedInput = {
    create?: XOR<QuestionCreateWithoutOptionInput, QuestionUncheckedCreateWithoutOptionInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutOptionInput
    upsert?: QuestionUpsertWithoutOptionInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutOptionInput, QuestionUpdateWithoutOptionInput>, QuestionUncheckedUpdateWithoutOptionInput>
  }

  export type UserCreateNestedOneWithoutPaymentInput = {
    create?: XOR<UserCreateWithoutPaymentInput, UserUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentInput
    connect?: UserWhereUniqueInput
  }

  export type CompetitionParticipantCreateNestedManyWithoutPaymentInput = {
    create?: XOR<CompetitionParticipantCreateWithoutPaymentInput, CompetitionParticipantUncheckedCreateWithoutPaymentInput> | CompetitionParticipantCreateWithoutPaymentInput[] | CompetitionParticipantUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: CompetitionParticipantCreateOrConnectWithoutPaymentInput | CompetitionParticipantCreateOrConnectWithoutPaymentInput[]
    createMany?: CompetitionParticipantCreateManyPaymentInputEnvelope
    connect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
  }

  export type PaymentStatusHistoryCreateNestedManyWithoutPaymentInput = {
    create?: XOR<PaymentStatusHistoryCreateWithoutPaymentInput, PaymentStatusHistoryUncheckedCreateWithoutPaymentInput> | PaymentStatusHistoryCreateWithoutPaymentInput[] | PaymentStatusHistoryUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: PaymentStatusHistoryCreateOrConnectWithoutPaymentInput | PaymentStatusHistoryCreateOrConnectWithoutPaymentInput[]
    createMany?: PaymentStatusHistoryCreateManyPaymentInputEnvelope
    connect?: PaymentStatusHistoryWhereUniqueInput | PaymentStatusHistoryWhereUniqueInput[]
  }

  export type CompetitionParticipantUncheckedCreateNestedManyWithoutPaymentInput = {
    create?: XOR<CompetitionParticipantCreateWithoutPaymentInput, CompetitionParticipantUncheckedCreateWithoutPaymentInput> | CompetitionParticipantCreateWithoutPaymentInput[] | CompetitionParticipantUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: CompetitionParticipantCreateOrConnectWithoutPaymentInput | CompetitionParticipantCreateOrConnectWithoutPaymentInput[]
    createMany?: CompetitionParticipantCreateManyPaymentInputEnvelope
    connect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
  }

  export type PaymentStatusHistoryUncheckedCreateNestedManyWithoutPaymentInput = {
    create?: XOR<PaymentStatusHistoryCreateWithoutPaymentInput, PaymentStatusHistoryUncheckedCreateWithoutPaymentInput> | PaymentStatusHistoryCreateWithoutPaymentInput[] | PaymentStatusHistoryUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: PaymentStatusHistoryCreateOrConnectWithoutPaymentInput | PaymentStatusHistoryCreateOrConnectWithoutPaymentInput[]
    createMany?: PaymentStatusHistoryCreateManyPaymentInputEnvelope
    connect?: PaymentStatusHistoryWhereUniqueInput | PaymentStatusHistoryWhereUniqueInput[]
  }

  export type EnumPaymentTypeFieldUpdateOperationsInput = {
    set?: $Enums.PaymentType
  }

  export type UserUpdateOneWithoutPaymentNestedInput = {
    create?: XOR<UserCreateWithoutPaymentInput, UserUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentInput
    upsert?: UserUpsertWithoutPaymentInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPaymentInput, UserUpdateWithoutPaymentInput>, UserUncheckedUpdateWithoutPaymentInput>
  }

  export type CompetitionParticipantUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<CompetitionParticipantCreateWithoutPaymentInput, CompetitionParticipantUncheckedCreateWithoutPaymentInput> | CompetitionParticipantCreateWithoutPaymentInput[] | CompetitionParticipantUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: CompetitionParticipantCreateOrConnectWithoutPaymentInput | CompetitionParticipantCreateOrConnectWithoutPaymentInput[]
    upsert?: CompetitionParticipantUpsertWithWhereUniqueWithoutPaymentInput | CompetitionParticipantUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: CompetitionParticipantCreateManyPaymentInputEnvelope
    set?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    disconnect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    delete?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    connect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    update?: CompetitionParticipantUpdateWithWhereUniqueWithoutPaymentInput | CompetitionParticipantUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: CompetitionParticipantUpdateManyWithWhereWithoutPaymentInput | CompetitionParticipantUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: CompetitionParticipantScalarWhereInput | CompetitionParticipantScalarWhereInput[]
  }

  export type PaymentStatusHistoryUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<PaymentStatusHistoryCreateWithoutPaymentInput, PaymentStatusHistoryUncheckedCreateWithoutPaymentInput> | PaymentStatusHistoryCreateWithoutPaymentInput[] | PaymentStatusHistoryUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: PaymentStatusHistoryCreateOrConnectWithoutPaymentInput | PaymentStatusHistoryCreateOrConnectWithoutPaymentInput[]
    upsert?: PaymentStatusHistoryUpsertWithWhereUniqueWithoutPaymentInput | PaymentStatusHistoryUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: PaymentStatusHistoryCreateManyPaymentInputEnvelope
    set?: PaymentStatusHistoryWhereUniqueInput | PaymentStatusHistoryWhereUniqueInput[]
    disconnect?: PaymentStatusHistoryWhereUniqueInput | PaymentStatusHistoryWhereUniqueInput[]
    delete?: PaymentStatusHistoryWhereUniqueInput | PaymentStatusHistoryWhereUniqueInput[]
    connect?: PaymentStatusHistoryWhereUniqueInput | PaymentStatusHistoryWhereUniqueInput[]
    update?: PaymentStatusHistoryUpdateWithWhereUniqueWithoutPaymentInput | PaymentStatusHistoryUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: PaymentStatusHistoryUpdateManyWithWhereWithoutPaymentInput | PaymentStatusHistoryUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: PaymentStatusHistoryScalarWhereInput | PaymentStatusHistoryScalarWhereInput[]
  }

  export type CompetitionParticipantUncheckedUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<CompetitionParticipantCreateWithoutPaymentInput, CompetitionParticipantUncheckedCreateWithoutPaymentInput> | CompetitionParticipantCreateWithoutPaymentInput[] | CompetitionParticipantUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: CompetitionParticipantCreateOrConnectWithoutPaymentInput | CompetitionParticipantCreateOrConnectWithoutPaymentInput[]
    upsert?: CompetitionParticipantUpsertWithWhereUniqueWithoutPaymentInput | CompetitionParticipantUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: CompetitionParticipantCreateManyPaymentInputEnvelope
    set?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    disconnect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    delete?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    connect?: CompetitionParticipantWhereUniqueInput | CompetitionParticipantWhereUniqueInput[]
    update?: CompetitionParticipantUpdateWithWhereUniqueWithoutPaymentInput | CompetitionParticipantUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: CompetitionParticipantUpdateManyWithWhereWithoutPaymentInput | CompetitionParticipantUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: CompetitionParticipantScalarWhereInput | CompetitionParticipantScalarWhereInput[]
  }

  export type PaymentStatusHistoryUncheckedUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<PaymentStatusHistoryCreateWithoutPaymentInput, PaymentStatusHistoryUncheckedCreateWithoutPaymentInput> | PaymentStatusHistoryCreateWithoutPaymentInput[] | PaymentStatusHistoryUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: PaymentStatusHistoryCreateOrConnectWithoutPaymentInput | PaymentStatusHistoryCreateOrConnectWithoutPaymentInput[]
    upsert?: PaymentStatusHistoryUpsertWithWhereUniqueWithoutPaymentInput | PaymentStatusHistoryUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: PaymentStatusHistoryCreateManyPaymentInputEnvelope
    set?: PaymentStatusHistoryWhereUniqueInput | PaymentStatusHistoryWhereUniqueInput[]
    disconnect?: PaymentStatusHistoryWhereUniqueInput | PaymentStatusHistoryWhereUniqueInput[]
    delete?: PaymentStatusHistoryWhereUniqueInput | PaymentStatusHistoryWhereUniqueInput[]
    connect?: PaymentStatusHistoryWhereUniqueInput | PaymentStatusHistoryWhereUniqueInput[]
    update?: PaymentStatusHistoryUpdateWithWhereUniqueWithoutPaymentInput | PaymentStatusHistoryUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: PaymentStatusHistoryUpdateManyWithWhereWithoutPaymentInput | PaymentStatusHistoryUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: PaymentStatusHistoryScalarWhereInput | PaymentStatusHistoryScalarWhereInput[]
  }

  export type PaymentCreateNestedOneWithoutPaymentStatusHistoryInput = {
    create?: XOR<PaymentCreateWithoutPaymentStatusHistoryInput, PaymentUncheckedCreateWithoutPaymentStatusHistoryInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutPaymentStatusHistoryInput
    connect?: PaymentWhereUniqueInput
  }

  export type PaymentUpdateOneRequiredWithoutPaymentStatusHistoryNestedInput = {
    create?: XOR<PaymentCreateWithoutPaymentStatusHistoryInput, PaymentUncheckedCreateWithoutPaymentStatusHistoryInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutPaymentStatusHistoryInput
    upsert?: PaymentUpsertWithoutPaymentStatusHistoryInput
    connect?: PaymentWhereUniqueInput
    update?: XOR<XOR<PaymentUpdateToOneWithWhereWithoutPaymentStatusHistoryInput, PaymentUpdateWithoutPaymentStatusHistoryInput>, PaymentUncheckedUpdateWithoutPaymentStatusHistoryInput>
  }

  export type StudentCreateNestedManyWithoutSchoolInput = {
    create?: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput> | StudentCreateWithoutSchoolInput[] | StudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSchoolInput | StudentCreateOrConnectWithoutSchoolInput[]
    createMany?: StudentCreateManySchoolInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput> | StudentCreateWithoutSchoolInput[] | StudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSchoolInput | StudentCreateOrConnectWithoutSchoolInput[]
    createMany?: StudentCreateManySchoolInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type EnumSubdistrictFieldUpdateOperationsInput = {
    set?: $Enums.Subdistrict
  }

  export type EnumStatusSchoolFieldUpdateOperationsInput = {
    set?: $Enums.StatusSchool
  }

  export type StudentUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput> | StudentCreateWithoutSchoolInput[] | StudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSchoolInput | StudentCreateOrConnectWithoutSchoolInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutSchoolInput | StudentUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: StudentCreateManySchoolInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutSchoolInput | StudentUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutSchoolInput | StudentUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput> | StudentCreateWithoutSchoolInput[] | StudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSchoolInput | StudentCreateOrConnectWithoutSchoolInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutSchoolInput | StudentUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: StudentCreateManySchoolInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutSchoolInput | StudentUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutSchoolInput | StudentUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleType | EnumRoleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoleType[] | ListEnumRoleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleType[] | ListEnumRoleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleTypeFilter<$PrismaModel> | $Enums.RoleType
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleType | EnumRoleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoleType[] | ListEnumRoleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleType[] | ListEnumRoleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleTypeWithAggregatesFilter<$PrismaModel> | $Enums.RoleType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleTypeFilter<$PrismaModel>
    _max?: NestedEnumRoleTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumActiveStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ActiveStatus | EnumActiveStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ActiveStatus[] | ListEnumActiveStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActiveStatus[] | ListEnumActiveStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumActiveStatusFilter<$PrismaModel> | $Enums.ActiveStatus
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumActiveStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActiveStatus | EnumActiveStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ActiveStatus[] | ListEnumActiveStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActiveStatus[] | ListEnumActiveStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumActiveStatusWithAggregatesFilter<$PrismaModel> | $Enums.ActiveStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActiveStatusFilter<$PrismaModel>
    _max?: NestedEnumActiveStatusFilter<$PrismaModel>
  }

  export type NestedEnumStageTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StageType | EnumStageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStageTypeFilter<$PrismaModel> | $Enums.StageType
  }

  export type NestedEnumStageTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StageType | EnumStageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStageTypeWithAggregatesFilter<$PrismaModel> | $Enums.StageType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStageTypeFilter<$PrismaModel>
    _max?: NestedEnumStageTypeFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type NestedEnumSubdistrictFilter<$PrismaModel = never> = {
    equals?: $Enums.Subdistrict | EnumSubdistrictFieldRefInput<$PrismaModel>
    in?: $Enums.Subdistrict[] | ListEnumSubdistrictFieldRefInput<$PrismaModel>
    notIn?: $Enums.Subdistrict[] | ListEnumSubdistrictFieldRefInput<$PrismaModel>
    not?: NestedEnumSubdistrictFilter<$PrismaModel> | $Enums.Subdistrict
  }

  export type NestedEnumStatusSchoolFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusSchool | EnumStatusSchoolFieldRefInput<$PrismaModel>
    in?: $Enums.StatusSchool[] | ListEnumStatusSchoolFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusSchool[] | ListEnumStatusSchoolFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusSchoolFilter<$PrismaModel> | $Enums.StatusSchool
  }

  export type NestedEnumSubdistrictWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Subdistrict | EnumSubdistrictFieldRefInput<$PrismaModel>
    in?: $Enums.Subdistrict[] | ListEnumSubdistrictFieldRefInput<$PrismaModel>
    notIn?: $Enums.Subdistrict[] | ListEnumSubdistrictFieldRefInput<$PrismaModel>
    not?: NestedEnumSubdistrictWithAggregatesFilter<$PrismaModel> | $Enums.Subdistrict
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubdistrictFilter<$PrismaModel>
    _max?: NestedEnumSubdistrictFilter<$PrismaModel>
  }

  export type NestedEnumStatusSchoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusSchool | EnumStatusSchoolFieldRefInput<$PrismaModel>
    in?: $Enums.StatusSchool[] | ListEnumStatusSchoolFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusSchool[] | ListEnumStatusSchoolFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusSchoolWithAggregatesFilter<$PrismaModel> | $Enums.StatusSchool
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusSchoolFilter<$PrismaModel>
    _max?: NestedEnumStatusSchoolFilter<$PrismaModel>
  }

  export type UserCreateWithoutRoleInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Username: string
    Password: string
    Birthdate: number
    BirthPlace?: string | null
    PhoneNumber: string
    Gender: boolean
    Email?: string | null
    Status?: $Enums.ActiveStatus
    Achievement?: AchievementCreateNestedManyWithoutUserInput
    Student?: StudentCreateNestedManyWithoutUserInput
    Payment?: PaymentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRoleInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Username: string
    Password: string
    Birthdate: number
    BirthPlace?: string | null
    PhoneNumber: string
    Gender: boolean
    Email?: string | null
    Status?: $Enums.ActiveStatus
    Achievement?: AchievementUncheckedCreateNestedManyWithoutUserInput
    Student?: StudentUncheckedCreateNestedManyWithoutUserInput
    Payment?: PaymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRoleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserCreateManyRoleInputEnvelope = {
    data: UserCreateManyRoleInput | UserCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
  }

  export type UserUpdateManyWithWhereWithoutRoleInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRoleInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    Id?: StringFilter<"User"> | string
    DateCreate?: DateTimeFilter<"User"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"User"> | Date | string | null
    Name?: StringFilter<"User"> | string
    Username?: StringFilter<"User"> | string
    Password?: StringFilter<"User"> | string
    RoleId?: StringFilter<"User"> | string
    Birthdate?: IntFilter<"User"> | number
    BirthPlace?: StringNullableFilter<"User"> | string | null
    PhoneNumber?: StringFilter<"User"> | string
    Gender?: BoolFilter<"User"> | boolean
    Email?: StringNullableFilter<"User"> | string | null
    Status?: EnumActiveStatusFilter<"User"> | $Enums.ActiveStatus
  }

  export type AchievementCreateWithoutUserInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Category: string
    Describe?: string | null
    Competition: CompetitionCreateNestedOneWithoutAchievementInput
  }

  export type AchievementUncheckedCreateWithoutUserInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Category: string
    Describe?: string | null
    CompetitionId: string
  }

  export type AchievementCreateOrConnectWithoutUserInput = {
    where: AchievementWhereUniqueInput
    create: XOR<AchievementCreateWithoutUserInput, AchievementUncheckedCreateWithoutUserInput>
  }

  export type AchievementCreateManyUserInputEnvelope = {
    data: AchievementCreateManyUserInput | AchievementCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StudentCreateWithoutUserInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    IdMember?: string | null
    Address: string
    Stage: $Enums.StageType
    Class: string
    NIK: string
    FatherName?: string | null
    MotherName?: string | null
    PhotoPath?: string | null
    Poin?: number
    CompetitionParticipant?: CompetitionParticipantCreateNestedManyWithoutStudentInput
    School: SchoolCreateNestedOneWithoutStudentInput
    Subscription?: SubscriptionCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutUserInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    IdMember?: string | null
    Address: string
    Stage: $Enums.StageType
    Class: string
    SchoolId: string
    NIK: string
    FatherName?: string | null
    MotherName?: string | null
    PhotoPath?: string | null
    Poin?: number
    CompetitionParticipant?: CompetitionParticipantUncheckedCreateNestedManyWithoutStudentInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutUserInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
  }

  export type StudentCreateManyUserInputEnvelope = {
    data: StudentCreateManyUserInput | StudentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RoleCreateWithoutUserInput = {
    Id: string
    Name: $Enums.RoleType
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
  }

  export type RoleUncheckedCreateWithoutUserInput = {
    Id: string
    Name: $Enums.RoleType
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
  }

  export type RoleCreateOrConnectWithoutUserInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUserInput, RoleUncheckedCreateWithoutUserInput>
  }

  export type PaymentCreateWithoutUserInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Invoice: string
    Date: number
    Amount: number
    Status: $Enums.PaymentType
    CompetitionParticipant?: CompetitionParticipantCreateNestedManyWithoutPaymentInput
    PaymentStatusHistory?: PaymentStatusHistoryCreateNestedManyWithoutPaymentInput
  }

  export type PaymentUncheckedCreateWithoutUserInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Invoice: string
    Date: number
    Amount: number
    Status: $Enums.PaymentType
    CompetitionParticipant?: CompetitionParticipantUncheckedCreateNestedManyWithoutPaymentInput
    PaymentStatusHistory?: PaymentStatusHistoryUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type PaymentCreateOrConnectWithoutUserInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutUserInput, PaymentUncheckedCreateWithoutUserInput>
  }

  export type PaymentCreateManyUserInputEnvelope = {
    data: PaymentCreateManyUserInput | PaymentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AchievementUpsertWithWhereUniqueWithoutUserInput = {
    where: AchievementWhereUniqueInput
    update: XOR<AchievementUpdateWithoutUserInput, AchievementUncheckedUpdateWithoutUserInput>
    create: XOR<AchievementCreateWithoutUserInput, AchievementUncheckedCreateWithoutUserInput>
  }

  export type AchievementUpdateWithWhereUniqueWithoutUserInput = {
    where: AchievementWhereUniqueInput
    data: XOR<AchievementUpdateWithoutUserInput, AchievementUncheckedUpdateWithoutUserInput>
  }

  export type AchievementUpdateManyWithWhereWithoutUserInput = {
    where: AchievementScalarWhereInput
    data: XOR<AchievementUpdateManyMutationInput, AchievementUncheckedUpdateManyWithoutUserInput>
  }

  export type AchievementScalarWhereInput = {
    AND?: AchievementScalarWhereInput | AchievementScalarWhereInput[]
    OR?: AchievementScalarWhereInput[]
    NOT?: AchievementScalarWhereInput | AchievementScalarWhereInput[]
    Id?: StringFilter<"Achievement"> | string
    DateCreate?: DateTimeFilter<"Achievement"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Achievement"> | Date | string | null
    UserId?: StringFilter<"Achievement"> | string
    Category?: StringFilter<"Achievement"> | string
    Describe?: StringNullableFilter<"Achievement"> | string | null
    CompetitionId?: StringFilter<"Achievement"> | string
  }

  export type StudentUpsertWithWhereUniqueWithoutUserInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutUserInput, StudentUncheckedUpdateWithoutUserInput>
    create: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutUserInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutUserInput, StudentUncheckedUpdateWithoutUserInput>
  }

  export type StudentUpdateManyWithWhereWithoutUserInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutUserInput>
  }

  export type StudentScalarWhereInput = {
    AND?: StudentScalarWhereInput | StudentScalarWhereInput[]
    OR?: StudentScalarWhereInput[]
    NOT?: StudentScalarWhereInput | StudentScalarWhereInput[]
    Id?: StringFilter<"Student"> | string
    DateCreate?: DateTimeFilter<"Student"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Student"> | Date | string | null
    IdMember?: StringNullableFilter<"Student"> | string | null
    Address?: StringFilter<"Student"> | string
    Stage?: EnumStageTypeFilter<"Student"> | $Enums.StageType
    Class?: StringFilter<"Student"> | string
    SchoolId?: StringFilter<"Student"> | string
    NIK?: StringFilter<"Student"> | string
    FatherName?: StringNullableFilter<"Student"> | string | null
    MotherName?: StringNullableFilter<"Student"> | string | null
    IdUser?: StringFilter<"Student"> | string
    PhotoPath?: StringNullableFilter<"Student"> | string | null
    Poin?: IntFilter<"Student"> | number
  }

  export type RoleUpsertWithoutUserInput = {
    update: XOR<RoleUpdateWithoutUserInput, RoleUncheckedUpdateWithoutUserInput>
    create: XOR<RoleCreateWithoutUserInput, RoleUncheckedCreateWithoutUserInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUserInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUserInput, RoleUncheckedUpdateWithoutUserInput>
  }

  export type RoleUpdateWithoutUserInput = {
    Id?: StringFieldUpdateOperationsInput | string
    Name?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RoleUncheckedUpdateWithoutUserInput = {
    Id?: StringFieldUpdateOperationsInput | string
    Name?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PaymentUpsertWithWhereUniqueWithoutUserInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutUserInput, PaymentUncheckedUpdateWithoutUserInput>
    create: XOR<PaymentCreateWithoutUserInput, PaymentUncheckedCreateWithoutUserInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutUserInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutUserInput, PaymentUncheckedUpdateWithoutUserInput>
  }

  export type PaymentUpdateManyWithWhereWithoutUserInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutUserInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    Id?: StringFilter<"Payment"> | string
    DateCreate?: DateTimeFilter<"Payment"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Payment"> | Date | string | null
    Invoice?: StringFilter<"Payment"> | string
    Date?: IntFilter<"Payment"> | number
    Amount?: IntFilter<"Payment"> | number
    UserId?: StringNullableFilter<"Payment"> | string | null
    Status?: EnumPaymentTypeFilter<"Payment"> | $Enums.PaymentType
  }

  export type CompetitionParticipantCreateWithoutStudentInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    ParticipantId?: string | null
    Attedance?: boolean | null
    Score?: number | null
    Correct?: number | null
    Incorrect?: number | null
    PathAnswer?: string | null
    Competition: CompetitionCreateNestedOneWithoutCompetitionParticipantInput
    CompetitionRoom?: CompetitionRoomCreateNestedOneWithoutCompetitionParticipantInput
    Payment?: PaymentCreateNestedOneWithoutCompetitionParticipantInput
  }

  export type CompetitionParticipantUncheckedCreateWithoutStudentInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    ParticipantId?: string | null
    CompetitionId: string
    CompetitionRoomId?: string | null
    PaymentId?: string | null
    Attedance?: boolean | null
    Score?: number | null
    Correct?: number | null
    Incorrect?: number | null
    PathAnswer?: string | null
  }

  export type CompetitionParticipantCreateOrConnectWithoutStudentInput = {
    where: CompetitionParticipantWhereUniqueInput
    create: XOR<CompetitionParticipantCreateWithoutStudentInput, CompetitionParticipantUncheckedCreateWithoutStudentInput>
  }

  export type CompetitionParticipantCreateManyStudentInputEnvelope = {
    data: CompetitionParticipantCreateManyStudentInput | CompetitionParticipantCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutStudentInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Username: string
    Password: string
    Birthdate: number
    BirthPlace?: string | null
    PhoneNumber: string
    Gender: boolean
    Email?: string | null
    Status?: $Enums.ActiveStatus
    Achievement?: AchievementCreateNestedManyWithoutUserInput
    Role: RoleCreateNestedOneWithoutUserInput
    Payment?: PaymentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStudentInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Username: string
    Password: string
    RoleId: string
    Birthdate: number
    BirthPlace?: string | null
    PhoneNumber: string
    Gender: boolean
    Email?: string | null
    Status?: $Enums.ActiveStatus
    Achievement?: AchievementUncheckedCreateNestedManyWithoutUserInput
    Payment?: PaymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStudentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
  }

  export type SchoolCreateWithoutStudentInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Stage: $Enums.StageType
    Subdistrict: $Enums.Subdistrict
    Ward: string
    Status: $Enums.StatusSchool
  }

  export type SchoolUncheckedCreateWithoutStudentInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Stage: $Enums.StageType
    Subdistrict: $Enums.Subdistrict
    Ward: string
    Status: $Enums.StatusSchool
  }

  export type SchoolCreateOrConnectWithoutStudentInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutStudentInput, SchoolUncheckedCreateWithoutStudentInput>
  }

  export type SubscriptionCreateWithoutStudentInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    StartDate: Date | string
    EndDate: Date | string
    Status?: boolean
    Competition?: CompetitionCreateNestedOneWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateWithoutStudentInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    StartDate: Date | string
    EndDate: Date | string
    Status?: boolean
    CompetitionId?: string | null
  }

  export type SubscriptionCreateOrConnectWithoutStudentInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutStudentInput, SubscriptionUncheckedCreateWithoutStudentInput>
  }

  export type SubscriptionCreateManyStudentInputEnvelope = {
    data: SubscriptionCreateManyStudentInput | SubscriptionCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type CompetitionParticipantUpsertWithWhereUniqueWithoutStudentInput = {
    where: CompetitionParticipantWhereUniqueInput
    update: XOR<CompetitionParticipantUpdateWithoutStudentInput, CompetitionParticipantUncheckedUpdateWithoutStudentInput>
    create: XOR<CompetitionParticipantCreateWithoutStudentInput, CompetitionParticipantUncheckedCreateWithoutStudentInput>
  }

  export type CompetitionParticipantUpdateWithWhereUniqueWithoutStudentInput = {
    where: CompetitionParticipantWhereUniqueInput
    data: XOR<CompetitionParticipantUpdateWithoutStudentInput, CompetitionParticipantUncheckedUpdateWithoutStudentInput>
  }

  export type CompetitionParticipantUpdateManyWithWhereWithoutStudentInput = {
    where: CompetitionParticipantScalarWhereInput
    data: XOR<CompetitionParticipantUpdateManyMutationInput, CompetitionParticipantUncheckedUpdateManyWithoutStudentInput>
  }

  export type CompetitionParticipantScalarWhereInput = {
    AND?: CompetitionParticipantScalarWhereInput | CompetitionParticipantScalarWhereInput[]
    OR?: CompetitionParticipantScalarWhereInput[]
    NOT?: CompetitionParticipantScalarWhereInput | CompetitionParticipantScalarWhereInput[]
    Id?: StringFilter<"CompetitionParticipant"> | string
    DateCreate?: DateTimeFilter<"CompetitionParticipant"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"CompetitionParticipant"> | Date | string | null
    ParticipantId?: StringNullableFilter<"CompetitionParticipant"> | string | null
    StudentId?: StringFilter<"CompetitionParticipant"> | string
    CompetitionId?: StringFilter<"CompetitionParticipant"> | string
    CompetitionRoomId?: StringNullableFilter<"CompetitionParticipant"> | string | null
    PaymentId?: StringNullableFilter<"CompetitionParticipant"> | string | null
    Attedance?: BoolNullableFilter<"CompetitionParticipant"> | boolean | null
    Score?: IntNullableFilter<"CompetitionParticipant"> | number | null
    Correct?: IntNullableFilter<"CompetitionParticipant"> | number | null
    Incorrect?: IntNullableFilter<"CompetitionParticipant"> | number | null
    PathAnswer?: StringNullableFilter<"CompetitionParticipant"> | string | null
  }

  export type UserUpsertWithoutStudentInput = {
    update: XOR<UserUpdateWithoutStudentInput, UserUncheckedUpdateWithoutStudentInput>
    create: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudentInput, UserUncheckedUpdateWithoutStudentInput>
  }

  export type UserUpdateWithoutStudentInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Birthdate?: IntFieldUpdateOperationsInput | number
    BirthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    Gender?: BoolFieldUpdateOperationsInput | boolean
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: EnumActiveStatusFieldUpdateOperationsInput | $Enums.ActiveStatus
    Achievement?: AchievementUpdateManyWithoutUserNestedInput
    Role?: RoleUpdateOneRequiredWithoutUserNestedInput
    Payment?: PaymentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStudentInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    RoleId?: StringFieldUpdateOperationsInput | string
    Birthdate?: IntFieldUpdateOperationsInput | number
    BirthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    Gender?: BoolFieldUpdateOperationsInput | boolean
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: EnumActiveStatusFieldUpdateOperationsInput | $Enums.ActiveStatus
    Achievement?: AchievementUncheckedUpdateManyWithoutUserNestedInput
    Payment?: PaymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SchoolUpsertWithoutStudentInput = {
    update: XOR<SchoolUpdateWithoutStudentInput, SchoolUncheckedUpdateWithoutStudentInput>
    create: XOR<SchoolCreateWithoutStudentInput, SchoolUncheckedCreateWithoutStudentInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutStudentInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutStudentInput, SchoolUncheckedUpdateWithoutStudentInput>
  }

  export type SchoolUpdateWithoutStudentInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Subdistrict?: EnumSubdistrictFieldUpdateOperationsInput | $Enums.Subdistrict
    Ward?: StringFieldUpdateOperationsInput | string
    Status?: EnumStatusSchoolFieldUpdateOperationsInput | $Enums.StatusSchool
  }

  export type SchoolUncheckedUpdateWithoutStudentInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Subdistrict?: EnumSubdistrictFieldUpdateOperationsInput | $Enums.Subdistrict
    Ward?: StringFieldUpdateOperationsInput | string
    Status?: EnumStatusSchoolFieldUpdateOperationsInput | $Enums.StatusSchool
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutStudentInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutStudentInput, SubscriptionUncheckedUpdateWithoutStudentInput>
    create: XOR<SubscriptionCreateWithoutStudentInput, SubscriptionUncheckedCreateWithoutStudentInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutStudentInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutStudentInput, SubscriptionUncheckedUpdateWithoutStudentInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutStudentInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutStudentInput>
  }

  export type SubscriptionScalarWhereInput = {
    AND?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    OR?: SubscriptionScalarWhereInput[]
    NOT?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    Id?: StringFilter<"Subscription"> | string
    DateCreate?: DateTimeFilter<"Subscription"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    StartDate?: DateTimeFilter<"Subscription"> | Date | string
    EndDate?: DateTimeFilter<"Subscription"> | Date | string
    Status?: BoolFilter<"Subscription"> | boolean
    StudentId?: StringFilter<"Subscription"> | string
    CompetitionId?: StringNullableFilter<"Subscription"> | string | null
  }

  export type CompetitionCreateWithoutAchievementInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
    Region: RegionCreateNestedOneWithoutCompetitionInput
    Season: SeasonCreateNestedOneWithoutCompetitionInput
    Subject: SubjectCreateNestedOneWithoutCompetitionInput
    CompetitionParticipant?: CompetitionParticipantCreateNestedManyWithoutCompetitionInput
    CompetitionRoom?: CompetitionRoomCreateNestedManyWithoutCompetitionInput
    Kisi?: KisiCreateNestedManyWithoutCompetitionInput
    Subscription?: SubscriptionCreateNestedManyWithoutCompetitionInput
    Tryout?: TryoutCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionUncheckedCreateWithoutAchievementInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    SeasonId: string
    RegionId: string
    SubjectId: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
    CompetitionParticipant?: CompetitionParticipantUncheckedCreateNestedManyWithoutCompetitionInput
    CompetitionRoom?: CompetitionRoomUncheckedCreateNestedManyWithoutCompetitionInput
    Kisi?: KisiUncheckedCreateNestedManyWithoutCompetitionInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutCompetitionInput
    Tryout?: TryoutUncheckedCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionCreateOrConnectWithoutAchievementInput = {
    where: CompetitionWhereUniqueInput
    create: XOR<CompetitionCreateWithoutAchievementInput, CompetitionUncheckedCreateWithoutAchievementInput>
  }

  export type UserCreateWithoutAchievementInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Username: string
    Password: string
    Birthdate: number
    BirthPlace?: string | null
    PhoneNumber: string
    Gender: boolean
    Email?: string | null
    Status?: $Enums.ActiveStatus
    Student?: StudentCreateNestedManyWithoutUserInput
    Role: RoleCreateNestedOneWithoutUserInput
    Payment?: PaymentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAchievementInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Username: string
    Password: string
    RoleId: string
    Birthdate: number
    BirthPlace?: string | null
    PhoneNumber: string
    Gender: boolean
    Email?: string | null
    Status?: $Enums.ActiveStatus
    Student?: StudentUncheckedCreateNestedManyWithoutUserInput
    Payment?: PaymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAchievementInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAchievementInput, UserUncheckedCreateWithoutAchievementInput>
  }

  export type CompetitionUpsertWithoutAchievementInput = {
    update: XOR<CompetitionUpdateWithoutAchievementInput, CompetitionUncheckedUpdateWithoutAchievementInput>
    create: XOR<CompetitionCreateWithoutAchievementInput, CompetitionUncheckedCreateWithoutAchievementInput>
    where?: CompetitionWhereInput
  }

  export type CompetitionUpdateToOneWithWhereWithoutAchievementInput = {
    where?: CompetitionWhereInput
    data: XOR<CompetitionUpdateWithoutAchievementInput, CompetitionUncheckedUpdateWithoutAchievementInput>
  }

  export type CompetitionUpdateWithoutAchievementInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    Region?: RegionUpdateOneRequiredWithoutCompetitionNestedInput
    Season?: SeasonUpdateOneRequiredWithoutCompetitionNestedInput
    Subject?: SubjectUpdateOneRequiredWithoutCompetitionNestedInput
    CompetitionParticipant?: CompetitionParticipantUpdateManyWithoutCompetitionNestedInput
    CompetitionRoom?: CompetitionRoomUpdateManyWithoutCompetitionNestedInput
    Kisi?: KisiUpdateManyWithoutCompetitionNestedInput
    Subscription?: SubscriptionUpdateManyWithoutCompetitionNestedInput
    Tryout?: TryoutUpdateManyWithoutCompetitionNestedInput
  }

  export type CompetitionUncheckedUpdateWithoutAchievementInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    SeasonId?: StringFieldUpdateOperationsInput | string
    RegionId?: StringFieldUpdateOperationsInput | string
    SubjectId?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    CompetitionParticipant?: CompetitionParticipantUncheckedUpdateManyWithoutCompetitionNestedInput
    CompetitionRoom?: CompetitionRoomUncheckedUpdateManyWithoutCompetitionNestedInput
    Kisi?: KisiUncheckedUpdateManyWithoutCompetitionNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutCompetitionNestedInput
    Tryout?: TryoutUncheckedUpdateManyWithoutCompetitionNestedInput
  }

  export type UserUpsertWithoutAchievementInput = {
    update: XOR<UserUpdateWithoutAchievementInput, UserUncheckedUpdateWithoutAchievementInput>
    create: XOR<UserCreateWithoutAchievementInput, UserUncheckedCreateWithoutAchievementInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAchievementInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAchievementInput, UserUncheckedUpdateWithoutAchievementInput>
  }

  export type UserUpdateWithoutAchievementInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Birthdate?: IntFieldUpdateOperationsInput | number
    BirthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    Gender?: BoolFieldUpdateOperationsInput | boolean
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: EnumActiveStatusFieldUpdateOperationsInput | $Enums.ActiveStatus
    Student?: StudentUpdateManyWithoutUserNestedInput
    Role?: RoleUpdateOneRequiredWithoutUserNestedInput
    Payment?: PaymentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAchievementInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    RoleId?: StringFieldUpdateOperationsInput | string
    Birthdate?: IntFieldUpdateOperationsInput | number
    BirthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    Gender?: BoolFieldUpdateOperationsInput | boolean
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: EnumActiveStatusFieldUpdateOperationsInput | $Enums.ActiveStatus
    Student?: StudentUncheckedUpdateManyWithoutUserNestedInput
    Payment?: PaymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CompetitionCreateWithoutSeasonInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
    Achievement?: AchievementCreateNestedManyWithoutCompetitionInput
    Region: RegionCreateNestedOneWithoutCompetitionInput
    Subject: SubjectCreateNestedOneWithoutCompetitionInput
    CompetitionParticipant?: CompetitionParticipantCreateNestedManyWithoutCompetitionInput
    CompetitionRoom?: CompetitionRoomCreateNestedManyWithoutCompetitionInput
    Kisi?: KisiCreateNestedManyWithoutCompetitionInput
    Subscription?: SubscriptionCreateNestedManyWithoutCompetitionInput
    Tryout?: TryoutCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionUncheckedCreateWithoutSeasonInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    RegionId: string
    SubjectId: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
    Achievement?: AchievementUncheckedCreateNestedManyWithoutCompetitionInput
    CompetitionParticipant?: CompetitionParticipantUncheckedCreateNestedManyWithoutCompetitionInput
    CompetitionRoom?: CompetitionRoomUncheckedCreateNestedManyWithoutCompetitionInput
    Kisi?: KisiUncheckedCreateNestedManyWithoutCompetitionInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutCompetitionInput
    Tryout?: TryoutUncheckedCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionCreateOrConnectWithoutSeasonInput = {
    where: CompetitionWhereUniqueInput
    create: XOR<CompetitionCreateWithoutSeasonInput, CompetitionUncheckedCreateWithoutSeasonInput>
  }

  export type CompetitionCreateManySeasonInputEnvelope = {
    data: CompetitionCreateManySeasonInput | CompetitionCreateManySeasonInput[]
    skipDuplicates?: boolean
  }

  export type CompetitionUpsertWithWhereUniqueWithoutSeasonInput = {
    where: CompetitionWhereUniqueInput
    update: XOR<CompetitionUpdateWithoutSeasonInput, CompetitionUncheckedUpdateWithoutSeasonInput>
    create: XOR<CompetitionCreateWithoutSeasonInput, CompetitionUncheckedCreateWithoutSeasonInput>
  }

  export type CompetitionUpdateWithWhereUniqueWithoutSeasonInput = {
    where: CompetitionWhereUniqueInput
    data: XOR<CompetitionUpdateWithoutSeasonInput, CompetitionUncheckedUpdateWithoutSeasonInput>
  }

  export type CompetitionUpdateManyWithWhereWithoutSeasonInput = {
    where: CompetitionScalarWhereInput
    data: XOR<CompetitionUpdateManyMutationInput, CompetitionUncheckedUpdateManyWithoutSeasonInput>
  }

  export type CompetitionScalarWhereInput = {
    AND?: CompetitionScalarWhereInput | CompetitionScalarWhereInput[]
    OR?: CompetitionScalarWhereInput[]
    NOT?: CompetitionScalarWhereInput | CompetitionScalarWhereInput[]
    Id?: StringFilter<"Competition"> | string
    DateCreate?: DateTimeFilter<"Competition"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Competition"> | Date | string | null
    Name?: StringFilter<"Competition"> | string
    Description?: StringFilter<"Competition"> | string
    Date?: IntFilter<"Competition"> | number
    Level?: IntFilter<"Competition"> | number
    Stage?: EnumStageTypeFilter<"Competition"> | $Enums.StageType
    Price?: IntFilter<"Competition"> | number
    Location?: StringFilter<"Competition"> | string
    SeasonId?: StringFilter<"Competition"> | string
    RegionId?: StringFilter<"Competition"> | string
    SubjectId?: StringFilter<"Competition"> | string
    CodePackage?: StringNullableFilter<"Competition"> | string | null
    PathAnswer?: StringNullableFilter<"Competition"> | string | null
    regionId?: StringNullableFilter<"Competition"> | string | null
  }

  export type CompetitionCreateWithoutSubjectInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
    Achievement?: AchievementCreateNestedManyWithoutCompetitionInput
    Region: RegionCreateNestedOneWithoutCompetitionInput
    Season: SeasonCreateNestedOneWithoutCompetitionInput
    CompetitionParticipant?: CompetitionParticipantCreateNestedManyWithoutCompetitionInput
    CompetitionRoom?: CompetitionRoomCreateNestedManyWithoutCompetitionInput
    Kisi?: KisiCreateNestedManyWithoutCompetitionInput
    Subscription?: SubscriptionCreateNestedManyWithoutCompetitionInput
    Tryout?: TryoutCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionUncheckedCreateWithoutSubjectInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    SeasonId: string
    RegionId: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
    Achievement?: AchievementUncheckedCreateNestedManyWithoutCompetitionInput
    CompetitionParticipant?: CompetitionParticipantUncheckedCreateNestedManyWithoutCompetitionInput
    CompetitionRoom?: CompetitionRoomUncheckedCreateNestedManyWithoutCompetitionInput
    Kisi?: KisiUncheckedCreateNestedManyWithoutCompetitionInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutCompetitionInput
    Tryout?: TryoutUncheckedCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionCreateOrConnectWithoutSubjectInput = {
    where: CompetitionWhereUniqueInput
    create: XOR<CompetitionCreateWithoutSubjectInput, CompetitionUncheckedCreateWithoutSubjectInput>
  }

  export type CompetitionCreateManySubjectInputEnvelope = {
    data: CompetitionCreateManySubjectInput | CompetitionCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type CompetitionUpsertWithWhereUniqueWithoutSubjectInput = {
    where: CompetitionWhereUniqueInput
    update: XOR<CompetitionUpdateWithoutSubjectInput, CompetitionUncheckedUpdateWithoutSubjectInput>
    create: XOR<CompetitionCreateWithoutSubjectInput, CompetitionUncheckedCreateWithoutSubjectInput>
  }

  export type CompetitionUpdateWithWhereUniqueWithoutSubjectInput = {
    where: CompetitionWhereUniqueInput
    data: XOR<CompetitionUpdateWithoutSubjectInput, CompetitionUncheckedUpdateWithoutSubjectInput>
  }

  export type CompetitionUpdateManyWithWhereWithoutSubjectInput = {
    where: CompetitionScalarWhereInput
    data: XOR<CompetitionUpdateManyMutationInput, CompetitionUncheckedUpdateManyWithoutSubjectInput>
  }

  export type AchievementCreateWithoutCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Category: string
    Describe?: string | null
    User: UserCreateNestedOneWithoutAchievementInput
  }

  export type AchievementUncheckedCreateWithoutCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    UserId: string
    Category: string
    Describe?: string | null
  }

  export type AchievementCreateOrConnectWithoutCompetitionInput = {
    where: AchievementWhereUniqueInput
    create: XOR<AchievementCreateWithoutCompetitionInput, AchievementUncheckedCreateWithoutCompetitionInput>
  }

  export type AchievementCreateManyCompetitionInputEnvelope = {
    data: AchievementCreateManyCompetitionInput | AchievementCreateManyCompetitionInput[]
    skipDuplicates?: boolean
  }

  export type RegionCreateWithoutCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Region: number
    Name: string
    RegionDetail: string
  }

  export type RegionUncheckedCreateWithoutCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Region: number
    Name: string
    RegionDetail: string
  }

  export type RegionCreateOrConnectWithoutCompetitionInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutCompetitionInput, RegionUncheckedCreateWithoutCompetitionInput>
  }

  export type SeasonCreateWithoutCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    StartDate: number
    EndDate: number
  }

  export type SeasonUncheckedCreateWithoutCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    StartDate: number
    EndDate: number
  }

  export type SeasonCreateOrConnectWithoutCompetitionInput = {
    where: SeasonWhereUniqueInput
    create: XOR<SeasonCreateWithoutCompetitionInput, SeasonUncheckedCreateWithoutCompetitionInput>
  }

  export type SubjectCreateWithoutCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
  }

  export type SubjectUncheckedCreateWithoutCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
  }

  export type SubjectCreateOrConnectWithoutCompetitionInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutCompetitionInput, SubjectUncheckedCreateWithoutCompetitionInput>
  }

  export type CompetitionParticipantCreateWithoutCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    ParticipantId?: string | null
    Attedance?: boolean | null
    Score?: number | null
    Correct?: number | null
    Incorrect?: number | null
    PathAnswer?: string | null
    CompetitionRoom?: CompetitionRoomCreateNestedOneWithoutCompetitionParticipantInput
    Payment?: PaymentCreateNestedOneWithoutCompetitionParticipantInput
    Student: StudentCreateNestedOneWithoutCompetitionParticipantInput
  }

  export type CompetitionParticipantUncheckedCreateWithoutCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    ParticipantId?: string | null
    StudentId: string
    CompetitionRoomId?: string | null
    PaymentId?: string | null
    Attedance?: boolean | null
    Score?: number | null
    Correct?: number | null
    Incorrect?: number | null
    PathAnswer?: string | null
  }

  export type CompetitionParticipantCreateOrConnectWithoutCompetitionInput = {
    where: CompetitionParticipantWhereUniqueInput
    create: XOR<CompetitionParticipantCreateWithoutCompetitionInput, CompetitionParticipantUncheckedCreateWithoutCompetitionInput>
  }

  export type CompetitionParticipantCreateManyCompetitionInputEnvelope = {
    data: CompetitionParticipantCreateManyCompetitionInput | CompetitionParticipantCreateManyCompetitionInput[]
    skipDuplicates?: boolean
  }

  export type CompetitionRoomCreateWithoutCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    CompetitionParticipant?: CompetitionParticipantCreateNestedManyWithoutCompetitionRoomInput
    Supervisor?: SupervisorCreateNestedOneWithoutCompetitionRoomInput
  }

  export type CompetitionRoomUncheckedCreateWithoutCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    SupervisorId?: string | null
    CompetitionParticipant?: CompetitionParticipantUncheckedCreateNestedManyWithoutCompetitionRoomInput
  }

  export type CompetitionRoomCreateOrConnectWithoutCompetitionInput = {
    where: CompetitionRoomWhereUniqueInput
    create: XOR<CompetitionRoomCreateWithoutCompetitionInput, CompetitionRoomUncheckedCreateWithoutCompetitionInput>
  }

  export type CompetitionRoomCreateManyCompetitionInputEnvelope = {
    data: CompetitionRoomCreateManyCompetitionInput | CompetitionRoomCreateManyCompetitionInput[]
    skipDuplicates?: boolean
  }

  export type KisiCreateWithoutCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Header?: string | null
    Content: string
  }

  export type KisiUncheckedCreateWithoutCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Header?: string | null
    Content: string
  }

  export type KisiCreateOrConnectWithoutCompetitionInput = {
    where: KisiWhereUniqueInput
    create: XOR<KisiCreateWithoutCompetitionInput, KisiUncheckedCreateWithoutCompetitionInput>
  }

  export type KisiCreateManyCompetitionInputEnvelope = {
    data: KisiCreateManyCompetitionInput | KisiCreateManyCompetitionInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionCreateWithoutCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    StartDate: Date | string
    EndDate: Date | string
    Status?: boolean
    Student: StudentCreateNestedOneWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateWithoutCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    StartDate: Date | string
    EndDate: Date | string
    Status?: boolean
    StudentId: string
  }

  export type SubscriptionCreateOrConnectWithoutCompetitionInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutCompetitionInput, SubscriptionUncheckedCreateWithoutCompetitionInput>
  }

  export type SubscriptionCreateManyCompetitionInputEnvelope = {
    data: SubscriptionCreateManyCompetitionInput | SubscriptionCreateManyCompetitionInput[]
    skipDuplicates?: boolean
  }

  export type TryoutCreateWithoutCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Question?: QuestionCreateNestedManyWithoutTryoutInput
  }

  export type TryoutUncheckedCreateWithoutCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Question?: QuestionUncheckedCreateNestedManyWithoutTryoutInput
  }

  export type TryoutCreateOrConnectWithoutCompetitionInput = {
    where: TryoutWhereUniqueInput
    create: XOR<TryoutCreateWithoutCompetitionInput, TryoutUncheckedCreateWithoutCompetitionInput>
  }

  export type TryoutCreateManyCompetitionInputEnvelope = {
    data: TryoutCreateManyCompetitionInput | TryoutCreateManyCompetitionInput[]
    skipDuplicates?: boolean
  }

  export type AchievementUpsertWithWhereUniqueWithoutCompetitionInput = {
    where: AchievementWhereUniqueInput
    update: XOR<AchievementUpdateWithoutCompetitionInput, AchievementUncheckedUpdateWithoutCompetitionInput>
    create: XOR<AchievementCreateWithoutCompetitionInput, AchievementUncheckedCreateWithoutCompetitionInput>
  }

  export type AchievementUpdateWithWhereUniqueWithoutCompetitionInput = {
    where: AchievementWhereUniqueInput
    data: XOR<AchievementUpdateWithoutCompetitionInput, AchievementUncheckedUpdateWithoutCompetitionInput>
  }

  export type AchievementUpdateManyWithWhereWithoutCompetitionInput = {
    where: AchievementScalarWhereInput
    data: XOR<AchievementUpdateManyMutationInput, AchievementUncheckedUpdateManyWithoutCompetitionInput>
  }

  export type RegionUpsertWithoutCompetitionInput = {
    update: XOR<RegionUpdateWithoutCompetitionInput, RegionUncheckedUpdateWithoutCompetitionInput>
    create: XOR<RegionCreateWithoutCompetitionInput, RegionUncheckedCreateWithoutCompetitionInput>
    where?: RegionWhereInput
  }

  export type RegionUpdateToOneWithWhereWithoutCompetitionInput = {
    where?: RegionWhereInput
    data: XOR<RegionUpdateWithoutCompetitionInput, RegionUncheckedUpdateWithoutCompetitionInput>
  }

  export type RegionUpdateWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Region?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    RegionDetail?: StringFieldUpdateOperationsInput | string
  }

  export type RegionUncheckedUpdateWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Region?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    RegionDetail?: StringFieldUpdateOperationsInput | string
  }

  export type SeasonUpsertWithoutCompetitionInput = {
    update: XOR<SeasonUpdateWithoutCompetitionInput, SeasonUncheckedUpdateWithoutCompetitionInput>
    create: XOR<SeasonCreateWithoutCompetitionInput, SeasonUncheckedCreateWithoutCompetitionInput>
    where?: SeasonWhereInput
  }

  export type SeasonUpdateToOneWithWhereWithoutCompetitionInput = {
    where?: SeasonWhereInput
    data: XOR<SeasonUpdateWithoutCompetitionInput, SeasonUncheckedUpdateWithoutCompetitionInput>
  }

  export type SeasonUpdateWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    StartDate?: IntFieldUpdateOperationsInput | number
    EndDate?: IntFieldUpdateOperationsInput | number
  }

  export type SeasonUncheckedUpdateWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    StartDate?: IntFieldUpdateOperationsInput | number
    EndDate?: IntFieldUpdateOperationsInput | number
  }

  export type SubjectUpsertWithoutCompetitionInput = {
    update: XOR<SubjectUpdateWithoutCompetitionInput, SubjectUncheckedUpdateWithoutCompetitionInput>
    create: XOR<SubjectCreateWithoutCompetitionInput, SubjectUncheckedCreateWithoutCompetitionInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutCompetitionInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutCompetitionInput, SubjectUncheckedUpdateWithoutCompetitionInput>
  }

  export type SubjectUpdateWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type SubjectUncheckedUpdateWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type CompetitionParticipantUpsertWithWhereUniqueWithoutCompetitionInput = {
    where: CompetitionParticipantWhereUniqueInput
    update: XOR<CompetitionParticipantUpdateWithoutCompetitionInput, CompetitionParticipantUncheckedUpdateWithoutCompetitionInput>
    create: XOR<CompetitionParticipantCreateWithoutCompetitionInput, CompetitionParticipantUncheckedCreateWithoutCompetitionInput>
  }

  export type CompetitionParticipantUpdateWithWhereUniqueWithoutCompetitionInput = {
    where: CompetitionParticipantWhereUniqueInput
    data: XOR<CompetitionParticipantUpdateWithoutCompetitionInput, CompetitionParticipantUncheckedUpdateWithoutCompetitionInput>
  }

  export type CompetitionParticipantUpdateManyWithWhereWithoutCompetitionInput = {
    where: CompetitionParticipantScalarWhereInput
    data: XOR<CompetitionParticipantUpdateManyMutationInput, CompetitionParticipantUncheckedUpdateManyWithoutCompetitionInput>
  }

  export type CompetitionRoomUpsertWithWhereUniqueWithoutCompetitionInput = {
    where: CompetitionRoomWhereUniqueInput
    update: XOR<CompetitionRoomUpdateWithoutCompetitionInput, CompetitionRoomUncheckedUpdateWithoutCompetitionInput>
    create: XOR<CompetitionRoomCreateWithoutCompetitionInput, CompetitionRoomUncheckedCreateWithoutCompetitionInput>
  }

  export type CompetitionRoomUpdateWithWhereUniqueWithoutCompetitionInput = {
    where: CompetitionRoomWhereUniqueInput
    data: XOR<CompetitionRoomUpdateWithoutCompetitionInput, CompetitionRoomUncheckedUpdateWithoutCompetitionInput>
  }

  export type CompetitionRoomUpdateManyWithWhereWithoutCompetitionInput = {
    where: CompetitionRoomScalarWhereInput
    data: XOR<CompetitionRoomUpdateManyMutationInput, CompetitionRoomUncheckedUpdateManyWithoutCompetitionInput>
  }

  export type CompetitionRoomScalarWhereInput = {
    AND?: CompetitionRoomScalarWhereInput | CompetitionRoomScalarWhereInput[]
    OR?: CompetitionRoomScalarWhereInput[]
    NOT?: CompetitionRoomScalarWhereInput | CompetitionRoomScalarWhereInput[]
    Id?: StringFilter<"CompetitionRoom"> | string
    DateCreate?: DateTimeFilter<"CompetitionRoom"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"CompetitionRoom"> | Date | string | null
    Name?: StringFilter<"CompetitionRoom"> | string
    CompetitionId?: StringFilter<"CompetitionRoom"> | string
    SupervisorId?: StringNullableFilter<"CompetitionRoom"> | string | null
  }

  export type KisiUpsertWithWhereUniqueWithoutCompetitionInput = {
    where: KisiWhereUniqueInput
    update: XOR<KisiUpdateWithoutCompetitionInput, KisiUncheckedUpdateWithoutCompetitionInput>
    create: XOR<KisiCreateWithoutCompetitionInput, KisiUncheckedCreateWithoutCompetitionInput>
  }

  export type KisiUpdateWithWhereUniqueWithoutCompetitionInput = {
    where: KisiWhereUniqueInput
    data: XOR<KisiUpdateWithoutCompetitionInput, KisiUncheckedUpdateWithoutCompetitionInput>
  }

  export type KisiUpdateManyWithWhereWithoutCompetitionInput = {
    where: KisiScalarWhereInput
    data: XOR<KisiUpdateManyMutationInput, KisiUncheckedUpdateManyWithoutCompetitionInput>
  }

  export type KisiScalarWhereInput = {
    AND?: KisiScalarWhereInput | KisiScalarWhereInput[]
    OR?: KisiScalarWhereInput[]
    NOT?: KisiScalarWhereInput | KisiScalarWhereInput[]
    Id?: StringFilter<"Kisi"> | string
    DateCreate?: DateTimeFilter<"Kisi"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Kisi"> | Date | string | null
    Header?: StringNullableFilter<"Kisi"> | string | null
    Content?: StringFilter<"Kisi"> | string
    CompetitionId?: StringFilter<"Kisi"> | string
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutCompetitionInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutCompetitionInput, SubscriptionUncheckedUpdateWithoutCompetitionInput>
    create: XOR<SubscriptionCreateWithoutCompetitionInput, SubscriptionUncheckedCreateWithoutCompetitionInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutCompetitionInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutCompetitionInput, SubscriptionUncheckedUpdateWithoutCompetitionInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutCompetitionInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutCompetitionInput>
  }

  export type TryoutUpsertWithWhereUniqueWithoutCompetitionInput = {
    where: TryoutWhereUniqueInput
    update: XOR<TryoutUpdateWithoutCompetitionInput, TryoutUncheckedUpdateWithoutCompetitionInput>
    create: XOR<TryoutCreateWithoutCompetitionInput, TryoutUncheckedCreateWithoutCompetitionInput>
  }

  export type TryoutUpdateWithWhereUniqueWithoutCompetitionInput = {
    where: TryoutWhereUniqueInput
    data: XOR<TryoutUpdateWithoutCompetitionInput, TryoutUncheckedUpdateWithoutCompetitionInput>
  }

  export type TryoutUpdateManyWithWhereWithoutCompetitionInput = {
    where: TryoutScalarWhereInput
    data: XOR<TryoutUpdateManyMutationInput, TryoutUncheckedUpdateManyWithoutCompetitionInput>
  }

  export type TryoutScalarWhereInput = {
    AND?: TryoutScalarWhereInput | TryoutScalarWhereInput[]
    OR?: TryoutScalarWhereInput[]
    NOT?: TryoutScalarWhereInput | TryoutScalarWhereInput[]
    Id?: StringFilter<"Tryout"> | string
    DateCreate?: DateTimeFilter<"Tryout"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Tryout"> | Date | string | null
    Name?: StringFilter<"Tryout"> | string
    CompetitionId?: StringFilter<"Tryout"> | string
  }

  export type CompetitionCreateWithoutSubscriptionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
    Achievement?: AchievementCreateNestedManyWithoutCompetitionInput
    Region: RegionCreateNestedOneWithoutCompetitionInput
    Season: SeasonCreateNestedOneWithoutCompetitionInput
    Subject: SubjectCreateNestedOneWithoutCompetitionInput
    CompetitionParticipant?: CompetitionParticipantCreateNestedManyWithoutCompetitionInput
    CompetitionRoom?: CompetitionRoomCreateNestedManyWithoutCompetitionInput
    Kisi?: KisiCreateNestedManyWithoutCompetitionInput
    Tryout?: TryoutCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionUncheckedCreateWithoutSubscriptionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    SeasonId: string
    RegionId: string
    SubjectId: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
    Achievement?: AchievementUncheckedCreateNestedManyWithoutCompetitionInput
    CompetitionParticipant?: CompetitionParticipantUncheckedCreateNestedManyWithoutCompetitionInput
    CompetitionRoom?: CompetitionRoomUncheckedCreateNestedManyWithoutCompetitionInput
    Kisi?: KisiUncheckedCreateNestedManyWithoutCompetitionInput
    Tryout?: TryoutUncheckedCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionCreateOrConnectWithoutSubscriptionInput = {
    where: CompetitionWhereUniqueInput
    create: XOR<CompetitionCreateWithoutSubscriptionInput, CompetitionUncheckedCreateWithoutSubscriptionInput>
  }

  export type StudentCreateWithoutSubscriptionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    IdMember?: string | null
    Address: string
    Stage: $Enums.StageType
    Class: string
    NIK: string
    FatherName?: string | null
    MotherName?: string | null
    PhotoPath?: string | null
    Poin?: number
    CompetitionParticipant?: CompetitionParticipantCreateNestedManyWithoutStudentInput
    User: UserCreateNestedOneWithoutStudentInput
    School: SchoolCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutSubscriptionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    IdMember?: string | null
    Address: string
    Stage: $Enums.StageType
    Class: string
    SchoolId: string
    NIK: string
    FatherName?: string | null
    MotherName?: string | null
    IdUser: string
    PhotoPath?: string | null
    Poin?: number
    CompetitionParticipant?: CompetitionParticipantUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutSubscriptionInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutSubscriptionInput, StudentUncheckedCreateWithoutSubscriptionInput>
  }

  export type CompetitionUpsertWithoutSubscriptionInput = {
    update: XOR<CompetitionUpdateWithoutSubscriptionInput, CompetitionUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<CompetitionCreateWithoutSubscriptionInput, CompetitionUncheckedCreateWithoutSubscriptionInput>
    where?: CompetitionWhereInput
  }

  export type CompetitionUpdateToOneWithWhereWithoutSubscriptionInput = {
    where?: CompetitionWhereInput
    data: XOR<CompetitionUpdateWithoutSubscriptionInput, CompetitionUncheckedUpdateWithoutSubscriptionInput>
  }

  export type CompetitionUpdateWithoutSubscriptionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    Achievement?: AchievementUpdateManyWithoutCompetitionNestedInput
    Region?: RegionUpdateOneRequiredWithoutCompetitionNestedInput
    Season?: SeasonUpdateOneRequiredWithoutCompetitionNestedInput
    Subject?: SubjectUpdateOneRequiredWithoutCompetitionNestedInput
    CompetitionParticipant?: CompetitionParticipantUpdateManyWithoutCompetitionNestedInput
    CompetitionRoom?: CompetitionRoomUpdateManyWithoutCompetitionNestedInput
    Kisi?: KisiUpdateManyWithoutCompetitionNestedInput
    Tryout?: TryoutUpdateManyWithoutCompetitionNestedInput
  }

  export type CompetitionUncheckedUpdateWithoutSubscriptionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    SeasonId?: StringFieldUpdateOperationsInput | string
    RegionId?: StringFieldUpdateOperationsInput | string
    SubjectId?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    Achievement?: AchievementUncheckedUpdateManyWithoutCompetitionNestedInput
    CompetitionParticipant?: CompetitionParticipantUncheckedUpdateManyWithoutCompetitionNestedInput
    CompetitionRoom?: CompetitionRoomUncheckedUpdateManyWithoutCompetitionNestedInput
    Kisi?: KisiUncheckedUpdateManyWithoutCompetitionNestedInput
    Tryout?: TryoutUncheckedUpdateManyWithoutCompetitionNestedInput
  }

  export type StudentUpsertWithoutSubscriptionInput = {
    update: XOR<StudentUpdateWithoutSubscriptionInput, StudentUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<StudentCreateWithoutSubscriptionInput, StudentUncheckedCreateWithoutSubscriptionInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutSubscriptionInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutSubscriptionInput, StudentUncheckedUpdateWithoutSubscriptionInput>
  }

  export type StudentUpdateWithoutSubscriptionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    IdMember?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: StringFieldUpdateOperationsInput | string
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Class?: StringFieldUpdateOperationsInput | string
    NIK?: StringFieldUpdateOperationsInput | string
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    PhotoPath?: NullableStringFieldUpdateOperationsInput | string | null
    Poin?: IntFieldUpdateOperationsInput | number
    CompetitionParticipant?: CompetitionParticipantUpdateManyWithoutStudentNestedInput
    User?: UserUpdateOneRequiredWithoutStudentNestedInput
    School?: SchoolUpdateOneRequiredWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutSubscriptionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    IdMember?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: StringFieldUpdateOperationsInput | string
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Class?: StringFieldUpdateOperationsInput | string
    SchoolId?: StringFieldUpdateOperationsInput | string
    NIK?: StringFieldUpdateOperationsInput | string
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    IdUser?: StringFieldUpdateOperationsInput | string
    PhotoPath?: NullableStringFieldUpdateOperationsInput | string | null
    Poin?: IntFieldUpdateOperationsInput | number
    CompetitionParticipant?: CompetitionParticipantUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type CompetitionCreateWithoutRegionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
    Achievement?: AchievementCreateNestedManyWithoutCompetitionInput
    Season: SeasonCreateNestedOneWithoutCompetitionInput
    Subject: SubjectCreateNestedOneWithoutCompetitionInput
    CompetitionParticipant?: CompetitionParticipantCreateNestedManyWithoutCompetitionInput
    CompetitionRoom?: CompetitionRoomCreateNestedManyWithoutCompetitionInput
    Kisi?: KisiCreateNestedManyWithoutCompetitionInput
    Subscription?: SubscriptionCreateNestedManyWithoutCompetitionInput
    Tryout?: TryoutCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionUncheckedCreateWithoutRegionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    SeasonId: string
    SubjectId: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
    Achievement?: AchievementUncheckedCreateNestedManyWithoutCompetitionInput
    CompetitionParticipant?: CompetitionParticipantUncheckedCreateNestedManyWithoutCompetitionInput
    CompetitionRoom?: CompetitionRoomUncheckedCreateNestedManyWithoutCompetitionInput
    Kisi?: KisiUncheckedCreateNestedManyWithoutCompetitionInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutCompetitionInput
    Tryout?: TryoutUncheckedCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionCreateOrConnectWithoutRegionInput = {
    where: CompetitionWhereUniqueInput
    create: XOR<CompetitionCreateWithoutRegionInput, CompetitionUncheckedCreateWithoutRegionInput>
  }

  export type CompetitionCreateManyRegionInputEnvelope = {
    data: CompetitionCreateManyRegionInput | CompetitionCreateManyRegionInput[]
    skipDuplicates?: boolean
  }

  export type CompetitionUpsertWithWhereUniqueWithoutRegionInput = {
    where: CompetitionWhereUniqueInput
    update: XOR<CompetitionUpdateWithoutRegionInput, CompetitionUncheckedUpdateWithoutRegionInput>
    create: XOR<CompetitionCreateWithoutRegionInput, CompetitionUncheckedCreateWithoutRegionInput>
  }

  export type CompetitionUpdateWithWhereUniqueWithoutRegionInput = {
    where: CompetitionWhereUniqueInput
    data: XOR<CompetitionUpdateWithoutRegionInput, CompetitionUncheckedUpdateWithoutRegionInput>
  }

  export type CompetitionUpdateManyWithWhereWithoutRegionInput = {
    where: CompetitionScalarWhereInput
    data: XOR<CompetitionUpdateManyMutationInput, CompetitionUncheckedUpdateManyWithoutRegionInput>
  }

  export type CompetitionRoomCreateWithoutSupervisorInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    CompetitionParticipant?: CompetitionParticipantCreateNestedManyWithoutCompetitionRoomInput
    Competition: CompetitionCreateNestedOneWithoutCompetitionRoomInput
  }

  export type CompetitionRoomUncheckedCreateWithoutSupervisorInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    CompetitionId: string
    CompetitionParticipant?: CompetitionParticipantUncheckedCreateNestedManyWithoutCompetitionRoomInput
  }

  export type CompetitionRoomCreateOrConnectWithoutSupervisorInput = {
    where: CompetitionRoomWhereUniqueInput
    create: XOR<CompetitionRoomCreateWithoutSupervisorInput, CompetitionRoomUncheckedCreateWithoutSupervisorInput>
  }

  export type CompetitionRoomCreateManySupervisorInputEnvelope = {
    data: CompetitionRoomCreateManySupervisorInput | CompetitionRoomCreateManySupervisorInput[]
    skipDuplicates?: boolean
  }

  export type CompetitionRoomUpsertWithWhereUniqueWithoutSupervisorInput = {
    where: CompetitionRoomWhereUniqueInput
    update: XOR<CompetitionRoomUpdateWithoutSupervisorInput, CompetitionRoomUncheckedUpdateWithoutSupervisorInput>
    create: XOR<CompetitionRoomCreateWithoutSupervisorInput, CompetitionRoomUncheckedCreateWithoutSupervisorInput>
  }

  export type CompetitionRoomUpdateWithWhereUniqueWithoutSupervisorInput = {
    where: CompetitionRoomWhereUniqueInput
    data: XOR<CompetitionRoomUpdateWithoutSupervisorInput, CompetitionRoomUncheckedUpdateWithoutSupervisorInput>
  }

  export type CompetitionRoomUpdateManyWithWhereWithoutSupervisorInput = {
    where: CompetitionRoomScalarWhereInput
    data: XOR<CompetitionRoomUpdateManyMutationInput, CompetitionRoomUncheckedUpdateManyWithoutSupervisorInput>
  }

  export type CompetitionParticipantCreateWithoutCompetitionRoomInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    ParticipantId?: string | null
    Attedance?: boolean | null
    Score?: number | null
    Correct?: number | null
    Incorrect?: number | null
    PathAnswer?: string | null
    Competition: CompetitionCreateNestedOneWithoutCompetitionParticipantInput
    Payment?: PaymentCreateNestedOneWithoutCompetitionParticipantInput
    Student: StudentCreateNestedOneWithoutCompetitionParticipantInput
  }

  export type CompetitionParticipantUncheckedCreateWithoutCompetitionRoomInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    ParticipantId?: string | null
    StudentId: string
    CompetitionId: string
    PaymentId?: string | null
    Attedance?: boolean | null
    Score?: number | null
    Correct?: number | null
    Incorrect?: number | null
    PathAnswer?: string | null
  }

  export type CompetitionParticipantCreateOrConnectWithoutCompetitionRoomInput = {
    where: CompetitionParticipantWhereUniqueInput
    create: XOR<CompetitionParticipantCreateWithoutCompetitionRoomInput, CompetitionParticipantUncheckedCreateWithoutCompetitionRoomInput>
  }

  export type CompetitionParticipantCreateManyCompetitionRoomInputEnvelope = {
    data: CompetitionParticipantCreateManyCompetitionRoomInput | CompetitionParticipantCreateManyCompetitionRoomInput[]
    skipDuplicates?: boolean
  }

  export type CompetitionCreateWithoutCompetitionRoomInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
    Achievement?: AchievementCreateNestedManyWithoutCompetitionInput
    Region: RegionCreateNestedOneWithoutCompetitionInput
    Season: SeasonCreateNestedOneWithoutCompetitionInput
    Subject: SubjectCreateNestedOneWithoutCompetitionInput
    CompetitionParticipant?: CompetitionParticipantCreateNestedManyWithoutCompetitionInput
    Kisi?: KisiCreateNestedManyWithoutCompetitionInput
    Subscription?: SubscriptionCreateNestedManyWithoutCompetitionInput
    Tryout?: TryoutCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionUncheckedCreateWithoutCompetitionRoomInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    SeasonId: string
    RegionId: string
    SubjectId: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
    Achievement?: AchievementUncheckedCreateNestedManyWithoutCompetitionInput
    CompetitionParticipant?: CompetitionParticipantUncheckedCreateNestedManyWithoutCompetitionInput
    Kisi?: KisiUncheckedCreateNestedManyWithoutCompetitionInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutCompetitionInput
    Tryout?: TryoutUncheckedCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionCreateOrConnectWithoutCompetitionRoomInput = {
    where: CompetitionWhereUniqueInput
    create: XOR<CompetitionCreateWithoutCompetitionRoomInput, CompetitionUncheckedCreateWithoutCompetitionRoomInput>
  }

  export type SupervisorCreateWithoutCompetitionRoomInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Birthdate: number
    PhoneNumber: string
  }

  export type SupervisorUncheckedCreateWithoutCompetitionRoomInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Birthdate: number
    PhoneNumber: string
  }

  export type SupervisorCreateOrConnectWithoutCompetitionRoomInput = {
    where: SupervisorWhereUniqueInput
    create: XOR<SupervisorCreateWithoutCompetitionRoomInput, SupervisorUncheckedCreateWithoutCompetitionRoomInput>
  }

  export type CompetitionParticipantUpsertWithWhereUniqueWithoutCompetitionRoomInput = {
    where: CompetitionParticipantWhereUniqueInput
    update: XOR<CompetitionParticipantUpdateWithoutCompetitionRoomInput, CompetitionParticipantUncheckedUpdateWithoutCompetitionRoomInput>
    create: XOR<CompetitionParticipantCreateWithoutCompetitionRoomInput, CompetitionParticipantUncheckedCreateWithoutCompetitionRoomInput>
  }

  export type CompetitionParticipantUpdateWithWhereUniqueWithoutCompetitionRoomInput = {
    where: CompetitionParticipantWhereUniqueInput
    data: XOR<CompetitionParticipantUpdateWithoutCompetitionRoomInput, CompetitionParticipantUncheckedUpdateWithoutCompetitionRoomInput>
  }

  export type CompetitionParticipantUpdateManyWithWhereWithoutCompetitionRoomInput = {
    where: CompetitionParticipantScalarWhereInput
    data: XOR<CompetitionParticipantUpdateManyMutationInput, CompetitionParticipantUncheckedUpdateManyWithoutCompetitionRoomInput>
  }

  export type CompetitionUpsertWithoutCompetitionRoomInput = {
    update: XOR<CompetitionUpdateWithoutCompetitionRoomInput, CompetitionUncheckedUpdateWithoutCompetitionRoomInput>
    create: XOR<CompetitionCreateWithoutCompetitionRoomInput, CompetitionUncheckedCreateWithoutCompetitionRoomInput>
    where?: CompetitionWhereInput
  }

  export type CompetitionUpdateToOneWithWhereWithoutCompetitionRoomInput = {
    where?: CompetitionWhereInput
    data: XOR<CompetitionUpdateWithoutCompetitionRoomInput, CompetitionUncheckedUpdateWithoutCompetitionRoomInput>
  }

  export type CompetitionUpdateWithoutCompetitionRoomInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    Achievement?: AchievementUpdateManyWithoutCompetitionNestedInput
    Region?: RegionUpdateOneRequiredWithoutCompetitionNestedInput
    Season?: SeasonUpdateOneRequiredWithoutCompetitionNestedInput
    Subject?: SubjectUpdateOneRequiredWithoutCompetitionNestedInput
    CompetitionParticipant?: CompetitionParticipantUpdateManyWithoutCompetitionNestedInput
    Kisi?: KisiUpdateManyWithoutCompetitionNestedInput
    Subscription?: SubscriptionUpdateManyWithoutCompetitionNestedInput
    Tryout?: TryoutUpdateManyWithoutCompetitionNestedInput
  }

  export type CompetitionUncheckedUpdateWithoutCompetitionRoomInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    SeasonId?: StringFieldUpdateOperationsInput | string
    RegionId?: StringFieldUpdateOperationsInput | string
    SubjectId?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    Achievement?: AchievementUncheckedUpdateManyWithoutCompetitionNestedInput
    CompetitionParticipant?: CompetitionParticipantUncheckedUpdateManyWithoutCompetitionNestedInput
    Kisi?: KisiUncheckedUpdateManyWithoutCompetitionNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutCompetitionNestedInput
    Tryout?: TryoutUncheckedUpdateManyWithoutCompetitionNestedInput
  }

  export type SupervisorUpsertWithoutCompetitionRoomInput = {
    update: XOR<SupervisorUpdateWithoutCompetitionRoomInput, SupervisorUncheckedUpdateWithoutCompetitionRoomInput>
    create: XOR<SupervisorCreateWithoutCompetitionRoomInput, SupervisorUncheckedCreateWithoutCompetitionRoomInput>
    where?: SupervisorWhereInput
  }

  export type SupervisorUpdateToOneWithWhereWithoutCompetitionRoomInput = {
    where?: SupervisorWhereInput
    data: XOR<SupervisorUpdateWithoutCompetitionRoomInput, SupervisorUncheckedUpdateWithoutCompetitionRoomInput>
  }

  export type SupervisorUpdateWithoutCompetitionRoomInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Birthdate?: IntFieldUpdateOperationsInput | number
    PhoneNumber?: StringFieldUpdateOperationsInput | string
  }

  export type SupervisorUncheckedUpdateWithoutCompetitionRoomInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Birthdate?: IntFieldUpdateOperationsInput | number
    PhoneNumber?: StringFieldUpdateOperationsInput | string
  }

  export type CompetitionCreateWithoutCompetitionParticipantInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
    Achievement?: AchievementCreateNestedManyWithoutCompetitionInput
    Region: RegionCreateNestedOneWithoutCompetitionInput
    Season: SeasonCreateNestedOneWithoutCompetitionInput
    Subject: SubjectCreateNestedOneWithoutCompetitionInput
    CompetitionRoom?: CompetitionRoomCreateNestedManyWithoutCompetitionInput
    Kisi?: KisiCreateNestedManyWithoutCompetitionInput
    Subscription?: SubscriptionCreateNestedManyWithoutCompetitionInput
    Tryout?: TryoutCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionUncheckedCreateWithoutCompetitionParticipantInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    SeasonId: string
    RegionId: string
    SubjectId: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
    Achievement?: AchievementUncheckedCreateNestedManyWithoutCompetitionInput
    CompetitionRoom?: CompetitionRoomUncheckedCreateNestedManyWithoutCompetitionInput
    Kisi?: KisiUncheckedCreateNestedManyWithoutCompetitionInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutCompetitionInput
    Tryout?: TryoutUncheckedCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionCreateOrConnectWithoutCompetitionParticipantInput = {
    where: CompetitionWhereUniqueInput
    create: XOR<CompetitionCreateWithoutCompetitionParticipantInput, CompetitionUncheckedCreateWithoutCompetitionParticipantInput>
  }

  export type CompetitionRoomCreateWithoutCompetitionParticipantInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Competition: CompetitionCreateNestedOneWithoutCompetitionRoomInput
    Supervisor?: SupervisorCreateNestedOneWithoutCompetitionRoomInput
  }

  export type CompetitionRoomUncheckedCreateWithoutCompetitionParticipantInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    CompetitionId: string
    SupervisorId?: string | null
  }

  export type CompetitionRoomCreateOrConnectWithoutCompetitionParticipantInput = {
    where: CompetitionRoomWhereUniqueInput
    create: XOR<CompetitionRoomCreateWithoutCompetitionParticipantInput, CompetitionRoomUncheckedCreateWithoutCompetitionParticipantInput>
  }

  export type PaymentCreateWithoutCompetitionParticipantInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Invoice: string
    Date: number
    Amount: number
    Status: $Enums.PaymentType
    User?: UserCreateNestedOneWithoutPaymentInput
    PaymentStatusHistory?: PaymentStatusHistoryCreateNestedManyWithoutPaymentInput
  }

  export type PaymentUncheckedCreateWithoutCompetitionParticipantInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Invoice: string
    Date: number
    Amount: number
    UserId?: string | null
    Status: $Enums.PaymentType
    PaymentStatusHistory?: PaymentStatusHistoryUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type PaymentCreateOrConnectWithoutCompetitionParticipantInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutCompetitionParticipantInput, PaymentUncheckedCreateWithoutCompetitionParticipantInput>
  }

  export type StudentCreateWithoutCompetitionParticipantInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    IdMember?: string | null
    Address: string
    Stage: $Enums.StageType
    Class: string
    NIK: string
    FatherName?: string | null
    MotherName?: string | null
    PhotoPath?: string | null
    Poin?: number
    User: UserCreateNestedOneWithoutStudentInput
    School: SchoolCreateNestedOneWithoutStudentInput
    Subscription?: SubscriptionCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutCompetitionParticipantInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    IdMember?: string | null
    Address: string
    Stage: $Enums.StageType
    Class: string
    SchoolId: string
    NIK: string
    FatherName?: string | null
    MotherName?: string | null
    IdUser: string
    PhotoPath?: string | null
    Poin?: number
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutCompetitionParticipantInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutCompetitionParticipantInput, StudentUncheckedCreateWithoutCompetitionParticipantInput>
  }

  export type CompetitionUpsertWithoutCompetitionParticipantInput = {
    update: XOR<CompetitionUpdateWithoutCompetitionParticipantInput, CompetitionUncheckedUpdateWithoutCompetitionParticipantInput>
    create: XOR<CompetitionCreateWithoutCompetitionParticipantInput, CompetitionUncheckedCreateWithoutCompetitionParticipantInput>
    where?: CompetitionWhereInput
  }

  export type CompetitionUpdateToOneWithWhereWithoutCompetitionParticipantInput = {
    where?: CompetitionWhereInput
    data: XOR<CompetitionUpdateWithoutCompetitionParticipantInput, CompetitionUncheckedUpdateWithoutCompetitionParticipantInput>
  }

  export type CompetitionUpdateWithoutCompetitionParticipantInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    Achievement?: AchievementUpdateManyWithoutCompetitionNestedInput
    Region?: RegionUpdateOneRequiredWithoutCompetitionNestedInput
    Season?: SeasonUpdateOneRequiredWithoutCompetitionNestedInput
    Subject?: SubjectUpdateOneRequiredWithoutCompetitionNestedInput
    CompetitionRoom?: CompetitionRoomUpdateManyWithoutCompetitionNestedInput
    Kisi?: KisiUpdateManyWithoutCompetitionNestedInput
    Subscription?: SubscriptionUpdateManyWithoutCompetitionNestedInput
    Tryout?: TryoutUpdateManyWithoutCompetitionNestedInput
  }

  export type CompetitionUncheckedUpdateWithoutCompetitionParticipantInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    SeasonId?: StringFieldUpdateOperationsInput | string
    RegionId?: StringFieldUpdateOperationsInput | string
    SubjectId?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    Achievement?: AchievementUncheckedUpdateManyWithoutCompetitionNestedInput
    CompetitionRoom?: CompetitionRoomUncheckedUpdateManyWithoutCompetitionNestedInput
    Kisi?: KisiUncheckedUpdateManyWithoutCompetitionNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutCompetitionNestedInput
    Tryout?: TryoutUncheckedUpdateManyWithoutCompetitionNestedInput
  }

  export type CompetitionRoomUpsertWithoutCompetitionParticipantInput = {
    update: XOR<CompetitionRoomUpdateWithoutCompetitionParticipantInput, CompetitionRoomUncheckedUpdateWithoutCompetitionParticipantInput>
    create: XOR<CompetitionRoomCreateWithoutCompetitionParticipantInput, CompetitionRoomUncheckedCreateWithoutCompetitionParticipantInput>
    where?: CompetitionRoomWhereInput
  }

  export type CompetitionRoomUpdateToOneWithWhereWithoutCompetitionParticipantInput = {
    where?: CompetitionRoomWhereInput
    data: XOR<CompetitionRoomUpdateWithoutCompetitionParticipantInput, CompetitionRoomUncheckedUpdateWithoutCompetitionParticipantInput>
  }

  export type CompetitionRoomUpdateWithoutCompetitionParticipantInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Competition?: CompetitionUpdateOneRequiredWithoutCompetitionRoomNestedInput
    Supervisor?: SupervisorUpdateOneWithoutCompetitionRoomNestedInput
  }

  export type CompetitionRoomUncheckedUpdateWithoutCompetitionParticipantInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    CompetitionId?: StringFieldUpdateOperationsInput | string
    SupervisorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentUpsertWithoutCompetitionParticipantInput = {
    update: XOR<PaymentUpdateWithoutCompetitionParticipantInput, PaymentUncheckedUpdateWithoutCompetitionParticipantInput>
    create: XOR<PaymentCreateWithoutCompetitionParticipantInput, PaymentUncheckedCreateWithoutCompetitionParticipantInput>
    where?: PaymentWhereInput
  }

  export type PaymentUpdateToOneWithWhereWithoutCompetitionParticipantInput = {
    where?: PaymentWhereInput
    data: XOR<PaymentUpdateWithoutCompetitionParticipantInput, PaymentUncheckedUpdateWithoutCompetitionParticipantInput>
  }

  export type PaymentUpdateWithoutCompetitionParticipantInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Invoice?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Amount?: IntFieldUpdateOperationsInput | number
    Status?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    User?: UserUpdateOneWithoutPaymentNestedInput
    PaymentStatusHistory?: PaymentStatusHistoryUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateWithoutCompetitionParticipantInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Invoice?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Amount?: IntFieldUpdateOperationsInput | number
    UserId?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    PaymentStatusHistory?: PaymentStatusHistoryUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type StudentUpsertWithoutCompetitionParticipantInput = {
    update: XOR<StudentUpdateWithoutCompetitionParticipantInput, StudentUncheckedUpdateWithoutCompetitionParticipantInput>
    create: XOR<StudentCreateWithoutCompetitionParticipantInput, StudentUncheckedCreateWithoutCompetitionParticipantInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutCompetitionParticipantInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutCompetitionParticipantInput, StudentUncheckedUpdateWithoutCompetitionParticipantInput>
  }

  export type StudentUpdateWithoutCompetitionParticipantInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    IdMember?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: StringFieldUpdateOperationsInput | string
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Class?: StringFieldUpdateOperationsInput | string
    NIK?: StringFieldUpdateOperationsInput | string
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    PhotoPath?: NullableStringFieldUpdateOperationsInput | string | null
    Poin?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutStudentNestedInput
    School?: SchoolUpdateOneRequiredWithoutStudentNestedInput
    Subscription?: SubscriptionUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutCompetitionParticipantInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    IdMember?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: StringFieldUpdateOperationsInput | string
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Class?: StringFieldUpdateOperationsInput | string
    SchoolId?: StringFieldUpdateOperationsInput | string
    NIK?: StringFieldUpdateOperationsInput | string
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    IdUser?: StringFieldUpdateOperationsInput | string
    PhotoPath?: NullableStringFieldUpdateOperationsInput | string | null
    Poin?: IntFieldUpdateOperationsInput | number
    Subscription?: SubscriptionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type CompetitionCreateWithoutKisiInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
    Achievement?: AchievementCreateNestedManyWithoutCompetitionInput
    Region: RegionCreateNestedOneWithoutCompetitionInput
    Season: SeasonCreateNestedOneWithoutCompetitionInput
    Subject: SubjectCreateNestedOneWithoutCompetitionInput
    CompetitionParticipant?: CompetitionParticipantCreateNestedManyWithoutCompetitionInput
    CompetitionRoom?: CompetitionRoomCreateNestedManyWithoutCompetitionInput
    Subscription?: SubscriptionCreateNestedManyWithoutCompetitionInput
    Tryout?: TryoutCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionUncheckedCreateWithoutKisiInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    SeasonId: string
    RegionId: string
    SubjectId: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
    Achievement?: AchievementUncheckedCreateNestedManyWithoutCompetitionInput
    CompetitionParticipant?: CompetitionParticipantUncheckedCreateNestedManyWithoutCompetitionInput
    CompetitionRoom?: CompetitionRoomUncheckedCreateNestedManyWithoutCompetitionInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutCompetitionInput
    Tryout?: TryoutUncheckedCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionCreateOrConnectWithoutKisiInput = {
    where: CompetitionWhereUniqueInput
    create: XOR<CompetitionCreateWithoutKisiInput, CompetitionUncheckedCreateWithoutKisiInput>
  }

  export type CompetitionUpsertWithoutKisiInput = {
    update: XOR<CompetitionUpdateWithoutKisiInput, CompetitionUncheckedUpdateWithoutKisiInput>
    create: XOR<CompetitionCreateWithoutKisiInput, CompetitionUncheckedCreateWithoutKisiInput>
    where?: CompetitionWhereInput
  }

  export type CompetitionUpdateToOneWithWhereWithoutKisiInput = {
    where?: CompetitionWhereInput
    data: XOR<CompetitionUpdateWithoutKisiInput, CompetitionUncheckedUpdateWithoutKisiInput>
  }

  export type CompetitionUpdateWithoutKisiInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    Achievement?: AchievementUpdateManyWithoutCompetitionNestedInput
    Region?: RegionUpdateOneRequiredWithoutCompetitionNestedInput
    Season?: SeasonUpdateOneRequiredWithoutCompetitionNestedInput
    Subject?: SubjectUpdateOneRequiredWithoutCompetitionNestedInput
    CompetitionParticipant?: CompetitionParticipantUpdateManyWithoutCompetitionNestedInput
    CompetitionRoom?: CompetitionRoomUpdateManyWithoutCompetitionNestedInput
    Subscription?: SubscriptionUpdateManyWithoutCompetitionNestedInput
    Tryout?: TryoutUpdateManyWithoutCompetitionNestedInput
  }

  export type CompetitionUncheckedUpdateWithoutKisiInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    SeasonId?: StringFieldUpdateOperationsInput | string
    RegionId?: StringFieldUpdateOperationsInput | string
    SubjectId?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    Achievement?: AchievementUncheckedUpdateManyWithoutCompetitionNestedInput
    CompetitionParticipant?: CompetitionParticipantUncheckedUpdateManyWithoutCompetitionNestedInput
    CompetitionRoom?: CompetitionRoomUncheckedUpdateManyWithoutCompetitionNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutCompetitionNestedInput
    Tryout?: TryoutUncheckedUpdateManyWithoutCompetitionNestedInput
  }

  export type QuestionCreateWithoutTryoutInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Content: string
    Option?: OptionCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutTryoutInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Content: string
    Option?: OptionUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutTryoutInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutTryoutInput, QuestionUncheckedCreateWithoutTryoutInput>
  }

  export type QuestionCreateManyTryoutInputEnvelope = {
    data: QuestionCreateManyTryoutInput | QuestionCreateManyTryoutInput[]
    skipDuplicates?: boolean
  }

  export type CompetitionCreateWithoutTryoutInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
    Achievement?: AchievementCreateNestedManyWithoutCompetitionInput
    Region: RegionCreateNestedOneWithoutCompetitionInput
    Season: SeasonCreateNestedOneWithoutCompetitionInput
    Subject: SubjectCreateNestedOneWithoutCompetitionInput
    CompetitionParticipant?: CompetitionParticipantCreateNestedManyWithoutCompetitionInput
    CompetitionRoom?: CompetitionRoomCreateNestedManyWithoutCompetitionInput
    Kisi?: KisiCreateNestedManyWithoutCompetitionInput
    Subscription?: SubscriptionCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionUncheckedCreateWithoutTryoutInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    SeasonId: string
    RegionId: string
    SubjectId: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
    Achievement?: AchievementUncheckedCreateNestedManyWithoutCompetitionInput
    CompetitionParticipant?: CompetitionParticipantUncheckedCreateNestedManyWithoutCompetitionInput
    CompetitionRoom?: CompetitionRoomUncheckedCreateNestedManyWithoutCompetitionInput
    Kisi?: KisiUncheckedCreateNestedManyWithoutCompetitionInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionCreateOrConnectWithoutTryoutInput = {
    where: CompetitionWhereUniqueInput
    create: XOR<CompetitionCreateWithoutTryoutInput, CompetitionUncheckedCreateWithoutTryoutInput>
  }

  export type QuestionUpsertWithWhereUniqueWithoutTryoutInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutTryoutInput, QuestionUncheckedUpdateWithoutTryoutInput>
    create: XOR<QuestionCreateWithoutTryoutInput, QuestionUncheckedCreateWithoutTryoutInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutTryoutInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutTryoutInput, QuestionUncheckedUpdateWithoutTryoutInput>
  }

  export type QuestionUpdateManyWithWhereWithoutTryoutInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutTryoutInput>
  }

  export type QuestionScalarWhereInput = {
    AND?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    OR?: QuestionScalarWhereInput[]
    NOT?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    Id?: StringFilter<"Question"> | string
    DateCreate?: DateTimeFilter<"Question"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Question"> | Date | string | null
    TryoutId?: StringFilter<"Question"> | string
    Content?: StringFilter<"Question"> | string
  }

  export type CompetitionUpsertWithoutTryoutInput = {
    update: XOR<CompetitionUpdateWithoutTryoutInput, CompetitionUncheckedUpdateWithoutTryoutInput>
    create: XOR<CompetitionCreateWithoutTryoutInput, CompetitionUncheckedCreateWithoutTryoutInput>
    where?: CompetitionWhereInput
  }

  export type CompetitionUpdateToOneWithWhereWithoutTryoutInput = {
    where?: CompetitionWhereInput
    data: XOR<CompetitionUpdateWithoutTryoutInput, CompetitionUncheckedUpdateWithoutTryoutInput>
  }

  export type CompetitionUpdateWithoutTryoutInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    Achievement?: AchievementUpdateManyWithoutCompetitionNestedInput
    Region?: RegionUpdateOneRequiredWithoutCompetitionNestedInput
    Season?: SeasonUpdateOneRequiredWithoutCompetitionNestedInput
    Subject?: SubjectUpdateOneRequiredWithoutCompetitionNestedInput
    CompetitionParticipant?: CompetitionParticipantUpdateManyWithoutCompetitionNestedInput
    CompetitionRoom?: CompetitionRoomUpdateManyWithoutCompetitionNestedInput
    Kisi?: KisiUpdateManyWithoutCompetitionNestedInput
    Subscription?: SubscriptionUpdateManyWithoutCompetitionNestedInput
  }

  export type CompetitionUncheckedUpdateWithoutTryoutInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    SeasonId?: StringFieldUpdateOperationsInput | string
    RegionId?: StringFieldUpdateOperationsInput | string
    SubjectId?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    Achievement?: AchievementUncheckedUpdateManyWithoutCompetitionNestedInput
    CompetitionParticipant?: CompetitionParticipantUncheckedUpdateManyWithoutCompetitionNestedInput
    CompetitionRoom?: CompetitionRoomUncheckedUpdateManyWithoutCompetitionNestedInput
    Kisi?: KisiUncheckedUpdateManyWithoutCompetitionNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutCompetitionNestedInput
  }

  export type OptionCreateWithoutQuestionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Answer: string
    IsCorrect: boolean
  }

  export type OptionUncheckedCreateWithoutQuestionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Answer: string
    IsCorrect: boolean
  }

  export type OptionCreateOrConnectWithoutQuestionInput = {
    where: OptionWhereUniqueInput
    create: XOR<OptionCreateWithoutQuestionInput, OptionUncheckedCreateWithoutQuestionInput>
  }

  export type OptionCreateManyQuestionInputEnvelope = {
    data: OptionCreateManyQuestionInput | OptionCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type TryoutCreateWithoutQuestionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Competition: CompetitionCreateNestedOneWithoutTryoutInput
  }

  export type TryoutUncheckedCreateWithoutQuestionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    CompetitionId: string
  }

  export type TryoutCreateOrConnectWithoutQuestionInput = {
    where: TryoutWhereUniqueInput
    create: XOR<TryoutCreateWithoutQuestionInput, TryoutUncheckedCreateWithoutQuestionInput>
  }

  export type OptionUpsertWithWhereUniqueWithoutQuestionInput = {
    where: OptionWhereUniqueInput
    update: XOR<OptionUpdateWithoutQuestionInput, OptionUncheckedUpdateWithoutQuestionInput>
    create: XOR<OptionCreateWithoutQuestionInput, OptionUncheckedCreateWithoutQuestionInput>
  }

  export type OptionUpdateWithWhereUniqueWithoutQuestionInput = {
    where: OptionWhereUniqueInput
    data: XOR<OptionUpdateWithoutQuestionInput, OptionUncheckedUpdateWithoutQuestionInput>
  }

  export type OptionUpdateManyWithWhereWithoutQuestionInput = {
    where: OptionScalarWhereInput
    data: XOR<OptionUpdateManyMutationInput, OptionUncheckedUpdateManyWithoutQuestionInput>
  }

  export type OptionScalarWhereInput = {
    AND?: OptionScalarWhereInput | OptionScalarWhereInput[]
    OR?: OptionScalarWhereInput[]
    NOT?: OptionScalarWhereInput | OptionScalarWhereInput[]
    Id?: StringFilter<"Option"> | string
    DateCreate?: DateTimeFilter<"Option"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"Option"> | Date | string | null
    Answer?: StringFilter<"Option"> | string
    IsCorrect?: BoolFilter<"Option"> | boolean
    QuestionId?: StringFilter<"Option"> | string
  }

  export type TryoutUpsertWithoutQuestionInput = {
    update: XOR<TryoutUpdateWithoutQuestionInput, TryoutUncheckedUpdateWithoutQuestionInput>
    create: XOR<TryoutCreateWithoutQuestionInput, TryoutUncheckedCreateWithoutQuestionInput>
    where?: TryoutWhereInput
  }

  export type TryoutUpdateToOneWithWhereWithoutQuestionInput = {
    where?: TryoutWhereInput
    data: XOR<TryoutUpdateWithoutQuestionInput, TryoutUncheckedUpdateWithoutQuestionInput>
  }

  export type TryoutUpdateWithoutQuestionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Competition?: CompetitionUpdateOneRequiredWithoutTryoutNestedInput
  }

  export type TryoutUncheckedUpdateWithoutQuestionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    CompetitionId?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionCreateWithoutOptionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Content: string
    Tryout: TryoutCreateNestedOneWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutOptionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    TryoutId: string
    Content: string
  }

  export type QuestionCreateOrConnectWithoutOptionInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutOptionInput, QuestionUncheckedCreateWithoutOptionInput>
  }

  export type QuestionUpsertWithoutOptionInput = {
    update: XOR<QuestionUpdateWithoutOptionInput, QuestionUncheckedUpdateWithoutOptionInput>
    create: XOR<QuestionCreateWithoutOptionInput, QuestionUncheckedCreateWithoutOptionInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutOptionInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutOptionInput, QuestionUncheckedUpdateWithoutOptionInput>
  }

  export type QuestionUpdateWithoutOptionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Content?: StringFieldUpdateOperationsInput | string
    Tryout?: TryoutUpdateOneRequiredWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutOptionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TryoutId?: StringFieldUpdateOperationsInput | string
    Content?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutPaymentInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Username: string
    Password: string
    Birthdate: number
    BirthPlace?: string | null
    PhoneNumber: string
    Gender: boolean
    Email?: string | null
    Status?: $Enums.ActiveStatus
    Achievement?: AchievementCreateNestedManyWithoutUserInput
    Student?: StudentCreateNestedManyWithoutUserInput
    Role: RoleCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPaymentInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Username: string
    Password: string
    RoleId: string
    Birthdate: number
    BirthPlace?: string | null
    PhoneNumber: string
    Gender: boolean
    Email?: string | null
    Status?: $Enums.ActiveStatus
    Achievement?: AchievementUncheckedCreateNestedManyWithoutUserInput
    Student?: StudentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPaymentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPaymentInput, UserUncheckedCreateWithoutPaymentInput>
  }

  export type CompetitionParticipantCreateWithoutPaymentInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    ParticipantId?: string | null
    Attedance?: boolean | null
    Score?: number | null
    Correct?: number | null
    Incorrect?: number | null
    PathAnswer?: string | null
    Competition: CompetitionCreateNestedOneWithoutCompetitionParticipantInput
    CompetitionRoom?: CompetitionRoomCreateNestedOneWithoutCompetitionParticipantInput
    Student: StudentCreateNestedOneWithoutCompetitionParticipantInput
  }

  export type CompetitionParticipantUncheckedCreateWithoutPaymentInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    ParticipantId?: string | null
    StudentId: string
    CompetitionId: string
    CompetitionRoomId?: string | null
    Attedance?: boolean | null
    Score?: number | null
    Correct?: number | null
    Incorrect?: number | null
    PathAnswer?: string | null
  }

  export type CompetitionParticipantCreateOrConnectWithoutPaymentInput = {
    where: CompetitionParticipantWhereUniqueInput
    create: XOR<CompetitionParticipantCreateWithoutPaymentInput, CompetitionParticipantUncheckedCreateWithoutPaymentInput>
  }

  export type CompetitionParticipantCreateManyPaymentInputEnvelope = {
    data: CompetitionParticipantCreateManyPaymentInput | CompetitionParticipantCreateManyPaymentInput[]
    skipDuplicates?: boolean
  }

  export type PaymentStatusHistoryCreateWithoutPaymentInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Status: $Enums.PaymentType
    Date: number
  }

  export type PaymentStatusHistoryUncheckedCreateWithoutPaymentInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Status: $Enums.PaymentType
    Date: number
  }

  export type PaymentStatusHistoryCreateOrConnectWithoutPaymentInput = {
    where: PaymentStatusHistoryWhereUniqueInput
    create: XOR<PaymentStatusHistoryCreateWithoutPaymentInput, PaymentStatusHistoryUncheckedCreateWithoutPaymentInput>
  }

  export type PaymentStatusHistoryCreateManyPaymentInputEnvelope = {
    data: PaymentStatusHistoryCreateManyPaymentInput | PaymentStatusHistoryCreateManyPaymentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPaymentInput = {
    update: XOR<UserUpdateWithoutPaymentInput, UserUncheckedUpdateWithoutPaymentInput>
    create: XOR<UserCreateWithoutPaymentInput, UserUncheckedCreateWithoutPaymentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPaymentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPaymentInput, UserUncheckedUpdateWithoutPaymentInput>
  }

  export type UserUpdateWithoutPaymentInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Birthdate?: IntFieldUpdateOperationsInput | number
    BirthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    Gender?: BoolFieldUpdateOperationsInput | boolean
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: EnumActiveStatusFieldUpdateOperationsInput | $Enums.ActiveStatus
    Achievement?: AchievementUpdateManyWithoutUserNestedInput
    Student?: StudentUpdateManyWithoutUserNestedInput
    Role?: RoleUpdateOneRequiredWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPaymentInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    RoleId?: StringFieldUpdateOperationsInput | string
    Birthdate?: IntFieldUpdateOperationsInput | number
    BirthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    Gender?: BoolFieldUpdateOperationsInput | boolean
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: EnumActiveStatusFieldUpdateOperationsInput | $Enums.ActiveStatus
    Achievement?: AchievementUncheckedUpdateManyWithoutUserNestedInput
    Student?: StudentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CompetitionParticipantUpsertWithWhereUniqueWithoutPaymentInput = {
    where: CompetitionParticipantWhereUniqueInput
    update: XOR<CompetitionParticipantUpdateWithoutPaymentInput, CompetitionParticipantUncheckedUpdateWithoutPaymentInput>
    create: XOR<CompetitionParticipantCreateWithoutPaymentInput, CompetitionParticipantUncheckedCreateWithoutPaymentInput>
  }

  export type CompetitionParticipantUpdateWithWhereUniqueWithoutPaymentInput = {
    where: CompetitionParticipantWhereUniqueInput
    data: XOR<CompetitionParticipantUpdateWithoutPaymentInput, CompetitionParticipantUncheckedUpdateWithoutPaymentInput>
  }

  export type CompetitionParticipantUpdateManyWithWhereWithoutPaymentInput = {
    where: CompetitionParticipantScalarWhereInput
    data: XOR<CompetitionParticipantUpdateManyMutationInput, CompetitionParticipantUncheckedUpdateManyWithoutPaymentInput>
  }

  export type PaymentStatusHistoryUpsertWithWhereUniqueWithoutPaymentInput = {
    where: PaymentStatusHistoryWhereUniqueInput
    update: XOR<PaymentStatusHistoryUpdateWithoutPaymentInput, PaymentStatusHistoryUncheckedUpdateWithoutPaymentInput>
    create: XOR<PaymentStatusHistoryCreateWithoutPaymentInput, PaymentStatusHistoryUncheckedCreateWithoutPaymentInput>
  }

  export type PaymentStatusHistoryUpdateWithWhereUniqueWithoutPaymentInput = {
    where: PaymentStatusHistoryWhereUniqueInput
    data: XOR<PaymentStatusHistoryUpdateWithoutPaymentInput, PaymentStatusHistoryUncheckedUpdateWithoutPaymentInput>
  }

  export type PaymentStatusHistoryUpdateManyWithWhereWithoutPaymentInput = {
    where: PaymentStatusHistoryScalarWhereInput
    data: XOR<PaymentStatusHistoryUpdateManyMutationInput, PaymentStatusHistoryUncheckedUpdateManyWithoutPaymentInput>
  }

  export type PaymentStatusHistoryScalarWhereInput = {
    AND?: PaymentStatusHistoryScalarWhereInput | PaymentStatusHistoryScalarWhereInput[]
    OR?: PaymentStatusHistoryScalarWhereInput[]
    NOT?: PaymentStatusHistoryScalarWhereInput | PaymentStatusHistoryScalarWhereInput[]
    Id?: StringFilter<"PaymentStatusHistory"> | string
    DateCreate?: DateTimeFilter<"PaymentStatusHistory"> | Date | string
    DateUpdate?: DateTimeNullableFilter<"PaymentStatusHistory"> | Date | string | null
    PaymentId?: StringFilter<"PaymentStatusHistory"> | string
    Status?: EnumPaymentTypeFilter<"PaymentStatusHistory"> | $Enums.PaymentType
    Date?: IntFilter<"PaymentStatusHistory"> | number
  }

  export type PaymentCreateWithoutPaymentStatusHistoryInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Invoice: string
    Date: number
    Amount: number
    Status: $Enums.PaymentType
    User?: UserCreateNestedOneWithoutPaymentInput
    CompetitionParticipant?: CompetitionParticipantCreateNestedManyWithoutPaymentInput
  }

  export type PaymentUncheckedCreateWithoutPaymentStatusHistoryInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Invoice: string
    Date: number
    Amount: number
    UserId?: string | null
    Status: $Enums.PaymentType
    CompetitionParticipant?: CompetitionParticipantUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type PaymentCreateOrConnectWithoutPaymentStatusHistoryInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutPaymentStatusHistoryInput, PaymentUncheckedCreateWithoutPaymentStatusHistoryInput>
  }

  export type PaymentUpsertWithoutPaymentStatusHistoryInput = {
    update: XOR<PaymentUpdateWithoutPaymentStatusHistoryInput, PaymentUncheckedUpdateWithoutPaymentStatusHistoryInput>
    create: XOR<PaymentCreateWithoutPaymentStatusHistoryInput, PaymentUncheckedCreateWithoutPaymentStatusHistoryInput>
    where?: PaymentWhereInput
  }

  export type PaymentUpdateToOneWithWhereWithoutPaymentStatusHistoryInput = {
    where?: PaymentWhereInput
    data: XOR<PaymentUpdateWithoutPaymentStatusHistoryInput, PaymentUncheckedUpdateWithoutPaymentStatusHistoryInput>
  }

  export type PaymentUpdateWithoutPaymentStatusHistoryInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Invoice?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Amount?: IntFieldUpdateOperationsInput | number
    Status?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    User?: UserUpdateOneWithoutPaymentNestedInput
    CompetitionParticipant?: CompetitionParticipantUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateWithoutPaymentStatusHistoryInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Invoice?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Amount?: IntFieldUpdateOperationsInput | number
    UserId?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    CompetitionParticipant?: CompetitionParticipantUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type StudentCreateWithoutSchoolInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    IdMember?: string | null
    Address: string
    Stage: $Enums.StageType
    Class: string
    NIK: string
    FatherName?: string | null
    MotherName?: string | null
    PhotoPath?: string | null
    Poin?: number
    CompetitionParticipant?: CompetitionParticipantCreateNestedManyWithoutStudentInput
    User: UserCreateNestedOneWithoutStudentInput
    Subscription?: SubscriptionCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutSchoolInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    IdMember?: string | null
    Address: string
    Stage: $Enums.StageType
    Class: string
    NIK: string
    FatherName?: string | null
    MotherName?: string | null
    IdUser: string
    PhotoPath?: string | null
    Poin?: number
    CompetitionParticipant?: CompetitionParticipantUncheckedCreateNestedManyWithoutStudentInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutSchoolInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput>
  }

  export type StudentCreateManySchoolInputEnvelope = {
    data: StudentCreateManySchoolInput | StudentCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type StudentUpsertWithWhereUniqueWithoutSchoolInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutSchoolInput, StudentUncheckedUpdateWithoutSchoolInput>
    create: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutSchoolInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutSchoolInput, StudentUncheckedUpdateWithoutSchoolInput>
  }

  export type StudentUpdateManyWithWhereWithoutSchoolInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutSchoolInput>
  }

  export type UserCreateManyRoleInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Username: string
    Password: string
    Birthdate: number
    BirthPlace?: string | null
    PhoneNumber: string
    Gender: boolean
    Email?: string | null
    Status?: $Enums.ActiveStatus
  }

  export type UserUpdateWithoutRoleInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Birthdate?: IntFieldUpdateOperationsInput | number
    BirthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    Gender?: BoolFieldUpdateOperationsInput | boolean
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: EnumActiveStatusFieldUpdateOperationsInput | $Enums.ActiveStatus
    Achievement?: AchievementUpdateManyWithoutUserNestedInput
    Student?: StudentUpdateManyWithoutUserNestedInput
    Payment?: PaymentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRoleInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Birthdate?: IntFieldUpdateOperationsInput | number
    BirthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    Gender?: BoolFieldUpdateOperationsInput | boolean
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: EnumActiveStatusFieldUpdateOperationsInput | $Enums.ActiveStatus
    Achievement?: AchievementUncheckedUpdateManyWithoutUserNestedInput
    Student?: StudentUncheckedUpdateManyWithoutUserNestedInput
    Payment?: PaymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutRoleInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Username?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Birthdate?: IntFieldUpdateOperationsInput | number
    BirthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    Gender?: BoolFieldUpdateOperationsInput | boolean
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: EnumActiveStatusFieldUpdateOperationsInput | $Enums.ActiveStatus
  }

  export type AchievementCreateManyUserInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Category: string
    Describe?: string | null
    CompetitionId: string
  }

  export type StudentCreateManyUserInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    IdMember?: string | null
    Address: string
    Stage: $Enums.StageType
    Class: string
    SchoolId: string
    NIK: string
    FatherName?: string | null
    MotherName?: string | null
    PhotoPath?: string | null
    Poin?: number
  }

  export type PaymentCreateManyUserInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Invoice: string
    Date: number
    Amount: number
    Status: $Enums.PaymentType
  }

  export type AchievementUpdateWithoutUserInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Category?: StringFieldUpdateOperationsInput | string
    Describe?: NullableStringFieldUpdateOperationsInput | string | null
    Competition?: CompetitionUpdateOneRequiredWithoutAchievementNestedInput
  }

  export type AchievementUncheckedUpdateWithoutUserInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Category?: StringFieldUpdateOperationsInput | string
    Describe?: NullableStringFieldUpdateOperationsInput | string | null
    CompetitionId?: StringFieldUpdateOperationsInput | string
  }

  export type AchievementUncheckedUpdateManyWithoutUserInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Category?: StringFieldUpdateOperationsInput | string
    Describe?: NullableStringFieldUpdateOperationsInput | string | null
    CompetitionId?: StringFieldUpdateOperationsInput | string
  }

  export type StudentUpdateWithoutUserInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    IdMember?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: StringFieldUpdateOperationsInput | string
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Class?: StringFieldUpdateOperationsInput | string
    NIK?: StringFieldUpdateOperationsInput | string
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    PhotoPath?: NullableStringFieldUpdateOperationsInput | string | null
    Poin?: IntFieldUpdateOperationsInput | number
    CompetitionParticipant?: CompetitionParticipantUpdateManyWithoutStudentNestedInput
    School?: SchoolUpdateOneRequiredWithoutStudentNestedInput
    Subscription?: SubscriptionUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutUserInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    IdMember?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: StringFieldUpdateOperationsInput | string
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Class?: StringFieldUpdateOperationsInput | string
    SchoolId?: StringFieldUpdateOperationsInput | string
    NIK?: StringFieldUpdateOperationsInput | string
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    PhotoPath?: NullableStringFieldUpdateOperationsInput | string | null
    Poin?: IntFieldUpdateOperationsInput | number
    CompetitionParticipant?: CompetitionParticipantUncheckedUpdateManyWithoutStudentNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutUserInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    IdMember?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: StringFieldUpdateOperationsInput | string
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Class?: StringFieldUpdateOperationsInput | string
    SchoolId?: StringFieldUpdateOperationsInput | string
    NIK?: StringFieldUpdateOperationsInput | string
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    PhotoPath?: NullableStringFieldUpdateOperationsInput | string | null
    Poin?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentUpdateWithoutUserInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Invoice?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Amount?: IntFieldUpdateOperationsInput | number
    Status?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    CompetitionParticipant?: CompetitionParticipantUpdateManyWithoutPaymentNestedInput
    PaymentStatusHistory?: PaymentStatusHistoryUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateWithoutUserInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Invoice?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Amount?: IntFieldUpdateOperationsInput | number
    Status?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    CompetitionParticipant?: CompetitionParticipantUncheckedUpdateManyWithoutPaymentNestedInput
    PaymentStatusHistory?: PaymentStatusHistoryUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateManyWithoutUserInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Invoice?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Amount?: IntFieldUpdateOperationsInput | number
    Status?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
  }

  export type CompetitionParticipantCreateManyStudentInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    ParticipantId?: string | null
    CompetitionId: string
    CompetitionRoomId?: string | null
    PaymentId?: string | null
    Attedance?: boolean | null
    Score?: number | null
    Correct?: number | null
    Incorrect?: number | null
    PathAnswer?: string | null
  }

  export type SubscriptionCreateManyStudentInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    StartDate: Date | string
    EndDate: Date | string
    Status?: boolean
    CompetitionId?: string | null
  }

  export type CompetitionParticipantUpdateWithoutStudentInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ParticipantId?: NullableStringFieldUpdateOperationsInput | string | null
    Attedance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Score?: NullableIntFieldUpdateOperationsInput | number | null
    Correct?: NullableIntFieldUpdateOperationsInput | number | null
    Incorrect?: NullableIntFieldUpdateOperationsInput | number | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    Competition?: CompetitionUpdateOneRequiredWithoutCompetitionParticipantNestedInput
    CompetitionRoom?: CompetitionRoomUpdateOneWithoutCompetitionParticipantNestedInput
    Payment?: PaymentUpdateOneWithoutCompetitionParticipantNestedInput
  }

  export type CompetitionParticipantUncheckedUpdateWithoutStudentInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ParticipantId?: NullableStringFieldUpdateOperationsInput | string | null
    CompetitionId?: StringFieldUpdateOperationsInput | string
    CompetitionRoomId?: NullableStringFieldUpdateOperationsInput | string | null
    PaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    Attedance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Score?: NullableIntFieldUpdateOperationsInput | number | null
    Correct?: NullableIntFieldUpdateOperationsInput | number | null
    Incorrect?: NullableIntFieldUpdateOperationsInput | number | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompetitionParticipantUncheckedUpdateManyWithoutStudentInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ParticipantId?: NullableStringFieldUpdateOperationsInput | string | null
    CompetitionId?: StringFieldUpdateOperationsInput | string
    CompetitionRoomId?: NullableStringFieldUpdateOperationsInput | string | null
    PaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    Attedance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Score?: NullableIntFieldUpdateOperationsInput | number | null
    Correct?: NullableIntFieldUpdateOperationsInput | number | null
    Incorrect?: NullableIntFieldUpdateOperationsInput | number | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SubscriptionUpdateWithoutStudentInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    StartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    EndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    Competition?: CompetitionUpdateOneWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutStudentInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    StartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    EndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    CompetitionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SubscriptionUncheckedUpdateManyWithoutStudentInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    StartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    EndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    CompetitionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompetitionCreateManySeasonInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    RegionId: string
    SubjectId: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
  }

  export type CompetitionUpdateWithoutSeasonInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    Achievement?: AchievementUpdateManyWithoutCompetitionNestedInput
    Region?: RegionUpdateOneRequiredWithoutCompetitionNestedInput
    Subject?: SubjectUpdateOneRequiredWithoutCompetitionNestedInput
    CompetitionParticipant?: CompetitionParticipantUpdateManyWithoutCompetitionNestedInput
    CompetitionRoom?: CompetitionRoomUpdateManyWithoutCompetitionNestedInput
    Kisi?: KisiUpdateManyWithoutCompetitionNestedInput
    Subscription?: SubscriptionUpdateManyWithoutCompetitionNestedInput
    Tryout?: TryoutUpdateManyWithoutCompetitionNestedInput
  }

  export type CompetitionUncheckedUpdateWithoutSeasonInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    RegionId?: StringFieldUpdateOperationsInput | string
    SubjectId?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    Achievement?: AchievementUncheckedUpdateManyWithoutCompetitionNestedInput
    CompetitionParticipant?: CompetitionParticipantUncheckedUpdateManyWithoutCompetitionNestedInput
    CompetitionRoom?: CompetitionRoomUncheckedUpdateManyWithoutCompetitionNestedInput
    Kisi?: KisiUncheckedUpdateManyWithoutCompetitionNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutCompetitionNestedInput
    Tryout?: TryoutUncheckedUpdateManyWithoutCompetitionNestedInput
  }

  export type CompetitionUncheckedUpdateManyWithoutSeasonInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    RegionId?: StringFieldUpdateOperationsInput | string
    SubjectId?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompetitionCreateManySubjectInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    SeasonId: string
    RegionId: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
  }

  export type CompetitionUpdateWithoutSubjectInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    Achievement?: AchievementUpdateManyWithoutCompetitionNestedInput
    Region?: RegionUpdateOneRequiredWithoutCompetitionNestedInput
    Season?: SeasonUpdateOneRequiredWithoutCompetitionNestedInput
    CompetitionParticipant?: CompetitionParticipantUpdateManyWithoutCompetitionNestedInput
    CompetitionRoom?: CompetitionRoomUpdateManyWithoutCompetitionNestedInput
    Kisi?: KisiUpdateManyWithoutCompetitionNestedInput
    Subscription?: SubscriptionUpdateManyWithoutCompetitionNestedInput
    Tryout?: TryoutUpdateManyWithoutCompetitionNestedInput
  }

  export type CompetitionUncheckedUpdateWithoutSubjectInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    SeasonId?: StringFieldUpdateOperationsInput | string
    RegionId?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    Achievement?: AchievementUncheckedUpdateManyWithoutCompetitionNestedInput
    CompetitionParticipant?: CompetitionParticipantUncheckedUpdateManyWithoutCompetitionNestedInput
    CompetitionRoom?: CompetitionRoomUncheckedUpdateManyWithoutCompetitionNestedInput
    Kisi?: KisiUncheckedUpdateManyWithoutCompetitionNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutCompetitionNestedInput
    Tryout?: TryoutUncheckedUpdateManyWithoutCompetitionNestedInput
  }

  export type CompetitionUncheckedUpdateManyWithoutSubjectInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    SeasonId?: StringFieldUpdateOperationsInput | string
    RegionId?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AchievementCreateManyCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    UserId: string
    Category: string
    Describe?: string | null
  }

  export type CompetitionParticipantCreateManyCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    ParticipantId?: string | null
    StudentId: string
    CompetitionRoomId?: string | null
    PaymentId?: string | null
    Attedance?: boolean | null
    Score?: number | null
    Correct?: number | null
    Incorrect?: number | null
    PathAnswer?: string | null
  }

  export type CompetitionRoomCreateManyCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    SupervisorId?: string | null
  }

  export type KisiCreateManyCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Header?: string | null
    Content: string
  }

  export type SubscriptionCreateManyCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    StartDate: Date | string
    EndDate: Date | string
    Status?: boolean
    StudentId: string
  }

  export type TryoutCreateManyCompetitionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
  }

  export type AchievementUpdateWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Category?: StringFieldUpdateOperationsInput | string
    Describe?: NullableStringFieldUpdateOperationsInput | string | null
    User?: UserUpdateOneRequiredWithoutAchievementNestedInput
  }

  export type AchievementUncheckedUpdateWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    UserId?: StringFieldUpdateOperationsInput | string
    Category?: StringFieldUpdateOperationsInput | string
    Describe?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AchievementUncheckedUpdateManyWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    UserId?: StringFieldUpdateOperationsInput | string
    Category?: StringFieldUpdateOperationsInput | string
    Describe?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompetitionParticipantUpdateWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ParticipantId?: NullableStringFieldUpdateOperationsInput | string | null
    Attedance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Score?: NullableIntFieldUpdateOperationsInput | number | null
    Correct?: NullableIntFieldUpdateOperationsInput | number | null
    Incorrect?: NullableIntFieldUpdateOperationsInput | number | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    CompetitionRoom?: CompetitionRoomUpdateOneWithoutCompetitionParticipantNestedInput
    Payment?: PaymentUpdateOneWithoutCompetitionParticipantNestedInput
    Student?: StudentUpdateOneRequiredWithoutCompetitionParticipantNestedInput
  }

  export type CompetitionParticipantUncheckedUpdateWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ParticipantId?: NullableStringFieldUpdateOperationsInput | string | null
    StudentId?: StringFieldUpdateOperationsInput | string
    CompetitionRoomId?: NullableStringFieldUpdateOperationsInput | string | null
    PaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    Attedance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Score?: NullableIntFieldUpdateOperationsInput | number | null
    Correct?: NullableIntFieldUpdateOperationsInput | number | null
    Incorrect?: NullableIntFieldUpdateOperationsInput | number | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompetitionParticipantUncheckedUpdateManyWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ParticipantId?: NullableStringFieldUpdateOperationsInput | string | null
    StudentId?: StringFieldUpdateOperationsInput | string
    CompetitionRoomId?: NullableStringFieldUpdateOperationsInput | string | null
    PaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    Attedance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Score?: NullableIntFieldUpdateOperationsInput | number | null
    Correct?: NullableIntFieldUpdateOperationsInput | number | null
    Incorrect?: NullableIntFieldUpdateOperationsInput | number | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompetitionRoomUpdateWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    CompetitionParticipant?: CompetitionParticipantUpdateManyWithoutCompetitionRoomNestedInput
    Supervisor?: SupervisorUpdateOneWithoutCompetitionRoomNestedInput
  }

  export type CompetitionRoomUncheckedUpdateWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    SupervisorId?: NullableStringFieldUpdateOperationsInput | string | null
    CompetitionParticipant?: CompetitionParticipantUncheckedUpdateManyWithoutCompetitionRoomNestedInput
  }

  export type CompetitionRoomUncheckedUpdateManyWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    SupervisorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type KisiUpdateWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Header?: NullableStringFieldUpdateOperationsInput | string | null
    Content?: StringFieldUpdateOperationsInput | string
  }

  export type KisiUncheckedUpdateWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Header?: NullableStringFieldUpdateOperationsInput | string | null
    Content?: StringFieldUpdateOperationsInput | string
  }

  export type KisiUncheckedUpdateManyWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Header?: NullableStringFieldUpdateOperationsInput | string | null
    Content?: StringFieldUpdateOperationsInput | string
  }

  export type SubscriptionUpdateWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    StartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    EndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    Student?: StudentUpdateOneRequiredWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    StartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    EndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    StudentId?: StringFieldUpdateOperationsInput | string
  }

  export type SubscriptionUncheckedUpdateManyWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    StartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    EndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Status?: BoolFieldUpdateOperationsInput | boolean
    StudentId?: StringFieldUpdateOperationsInput | string
  }

  export type TryoutUpdateWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Question?: QuestionUpdateManyWithoutTryoutNestedInput
  }

  export type TryoutUncheckedUpdateWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Question?: QuestionUncheckedUpdateManyWithoutTryoutNestedInput
  }

  export type TryoutUncheckedUpdateManyWithoutCompetitionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type CompetitionCreateManyRegionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    Description: string
    Date: number
    Level: number
    Stage: $Enums.StageType
    Price: number
    Location: string
    SeasonId: string
    SubjectId: string
    CodePackage?: string | null
    PathAnswer?: string | null
    regionId?: string | null
  }

  export type CompetitionUpdateWithoutRegionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    Achievement?: AchievementUpdateManyWithoutCompetitionNestedInput
    Season?: SeasonUpdateOneRequiredWithoutCompetitionNestedInput
    Subject?: SubjectUpdateOneRequiredWithoutCompetitionNestedInput
    CompetitionParticipant?: CompetitionParticipantUpdateManyWithoutCompetitionNestedInput
    CompetitionRoom?: CompetitionRoomUpdateManyWithoutCompetitionNestedInput
    Kisi?: KisiUpdateManyWithoutCompetitionNestedInput
    Subscription?: SubscriptionUpdateManyWithoutCompetitionNestedInput
    Tryout?: TryoutUpdateManyWithoutCompetitionNestedInput
  }

  export type CompetitionUncheckedUpdateWithoutRegionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    SeasonId?: StringFieldUpdateOperationsInput | string
    SubjectId?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
    Achievement?: AchievementUncheckedUpdateManyWithoutCompetitionNestedInput
    CompetitionParticipant?: CompetitionParticipantUncheckedUpdateManyWithoutCompetitionNestedInput
    CompetitionRoom?: CompetitionRoomUncheckedUpdateManyWithoutCompetitionNestedInput
    Kisi?: KisiUncheckedUpdateManyWithoutCompetitionNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutCompetitionNestedInput
    Tryout?: TryoutUncheckedUpdateManyWithoutCompetitionNestedInput
  }

  export type CompetitionUncheckedUpdateManyWithoutRegionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    Date?: IntFieldUpdateOperationsInput | number
    Level?: IntFieldUpdateOperationsInput | number
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Price?: IntFieldUpdateOperationsInput | number
    Location?: StringFieldUpdateOperationsInput | string
    SeasonId?: StringFieldUpdateOperationsInput | string
    SubjectId?: StringFieldUpdateOperationsInput | string
    CodePackage?: NullableStringFieldUpdateOperationsInput | string | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    regionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompetitionRoomCreateManySupervisorInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Name: string
    CompetitionId: string
  }

  export type CompetitionRoomUpdateWithoutSupervisorInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    CompetitionParticipant?: CompetitionParticipantUpdateManyWithoutCompetitionRoomNestedInput
    Competition?: CompetitionUpdateOneRequiredWithoutCompetitionRoomNestedInput
  }

  export type CompetitionRoomUncheckedUpdateWithoutSupervisorInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    CompetitionId?: StringFieldUpdateOperationsInput | string
    CompetitionParticipant?: CompetitionParticipantUncheckedUpdateManyWithoutCompetitionRoomNestedInput
  }

  export type CompetitionRoomUncheckedUpdateManyWithoutSupervisorInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Name?: StringFieldUpdateOperationsInput | string
    CompetitionId?: StringFieldUpdateOperationsInput | string
  }

  export type CompetitionParticipantCreateManyCompetitionRoomInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    ParticipantId?: string | null
    StudentId: string
    CompetitionId: string
    PaymentId?: string | null
    Attedance?: boolean | null
    Score?: number | null
    Correct?: number | null
    Incorrect?: number | null
    PathAnswer?: string | null
  }

  export type CompetitionParticipantUpdateWithoutCompetitionRoomInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ParticipantId?: NullableStringFieldUpdateOperationsInput | string | null
    Attedance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Score?: NullableIntFieldUpdateOperationsInput | number | null
    Correct?: NullableIntFieldUpdateOperationsInput | number | null
    Incorrect?: NullableIntFieldUpdateOperationsInput | number | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    Competition?: CompetitionUpdateOneRequiredWithoutCompetitionParticipantNestedInput
    Payment?: PaymentUpdateOneWithoutCompetitionParticipantNestedInput
    Student?: StudentUpdateOneRequiredWithoutCompetitionParticipantNestedInput
  }

  export type CompetitionParticipantUncheckedUpdateWithoutCompetitionRoomInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ParticipantId?: NullableStringFieldUpdateOperationsInput | string | null
    StudentId?: StringFieldUpdateOperationsInput | string
    CompetitionId?: StringFieldUpdateOperationsInput | string
    PaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    Attedance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Score?: NullableIntFieldUpdateOperationsInput | number | null
    Correct?: NullableIntFieldUpdateOperationsInput | number | null
    Incorrect?: NullableIntFieldUpdateOperationsInput | number | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompetitionParticipantUncheckedUpdateManyWithoutCompetitionRoomInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ParticipantId?: NullableStringFieldUpdateOperationsInput | string | null
    StudentId?: StringFieldUpdateOperationsInput | string
    CompetitionId?: StringFieldUpdateOperationsInput | string
    PaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    Attedance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Score?: NullableIntFieldUpdateOperationsInput | number | null
    Correct?: NullableIntFieldUpdateOperationsInput | number | null
    Incorrect?: NullableIntFieldUpdateOperationsInput | number | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuestionCreateManyTryoutInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Content: string
  }

  export type QuestionUpdateWithoutTryoutInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Content?: StringFieldUpdateOperationsInput | string
    Option?: OptionUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutTryoutInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Content?: StringFieldUpdateOperationsInput | string
    Option?: OptionUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateManyWithoutTryoutInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Content?: StringFieldUpdateOperationsInput | string
  }

  export type OptionCreateManyQuestionInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Answer: string
    IsCorrect: boolean
  }

  export type OptionUpdateWithoutQuestionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Answer?: StringFieldUpdateOperationsInput | string
    IsCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OptionUncheckedUpdateWithoutQuestionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Answer?: StringFieldUpdateOperationsInput | string
    IsCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OptionUncheckedUpdateManyWithoutQuestionInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Answer?: StringFieldUpdateOperationsInput | string
    IsCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompetitionParticipantCreateManyPaymentInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    ParticipantId?: string | null
    StudentId: string
    CompetitionId: string
    CompetitionRoomId?: string | null
    Attedance?: boolean | null
    Score?: number | null
    Correct?: number | null
    Incorrect?: number | null
    PathAnswer?: string | null
  }

  export type PaymentStatusHistoryCreateManyPaymentInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    Status: $Enums.PaymentType
    Date: number
  }

  export type CompetitionParticipantUpdateWithoutPaymentInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ParticipantId?: NullableStringFieldUpdateOperationsInput | string | null
    Attedance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Score?: NullableIntFieldUpdateOperationsInput | number | null
    Correct?: NullableIntFieldUpdateOperationsInput | number | null
    Incorrect?: NullableIntFieldUpdateOperationsInput | number | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    Competition?: CompetitionUpdateOneRequiredWithoutCompetitionParticipantNestedInput
    CompetitionRoom?: CompetitionRoomUpdateOneWithoutCompetitionParticipantNestedInput
    Student?: StudentUpdateOneRequiredWithoutCompetitionParticipantNestedInput
  }

  export type CompetitionParticipantUncheckedUpdateWithoutPaymentInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ParticipantId?: NullableStringFieldUpdateOperationsInput | string | null
    StudentId?: StringFieldUpdateOperationsInput | string
    CompetitionId?: StringFieldUpdateOperationsInput | string
    CompetitionRoomId?: NullableStringFieldUpdateOperationsInput | string | null
    Attedance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Score?: NullableIntFieldUpdateOperationsInput | number | null
    Correct?: NullableIntFieldUpdateOperationsInput | number | null
    Incorrect?: NullableIntFieldUpdateOperationsInput | number | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompetitionParticipantUncheckedUpdateManyWithoutPaymentInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ParticipantId?: NullableStringFieldUpdateOperationsInput | string | null
    StudentId?: StringFieldUpdateOperationsInput | string
    CompetitionId?: StringFieldUpdateOperationsInput | string
    CompetitionRoomId?: NullableStringFieldUpdateOperationsInput | string | null
    Attedance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Score?: NullableIntFieldUpdateOperationsInput | number | null
    Correct?: NullableIntFieldUpdateOperationsInput | number | null
    Incorrect?: NullableIntFieldUpdateOperationsInput | number | null
    PathAnswer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentStatusHistoryUpdateWithoutPaymentInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    Date?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentStatusHistoryUncheckedUpdateWithoutPaymentInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    Date?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentStatusHistoryUncheckedUpdateManyWithoutPaymentInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    Date?: IntFieldUpdateOperationsInput | number
  }

  export type StudentCreateManySchoolInput = {
    Id: string
    DateCreate?: Date | string
    DateUpdate?: Date | string | null
    IdMember?: string | null
    Address: string
    Stage: $Enums.StageType
    Class: string
    NIK: string
    FatherName?: string | null
    MotherName?: string | null
    IdUser: string
    PhotoPath?: string | null
    Poin?: number
  }

  export type StudentUpdateWithoutSchoolInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    IdMember?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: StringFieldUpdateOperationsInput | string
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Class?: StringFieldUpdateOperationsInput | string
    NIK?: StringFieldUpdateOperationsInput | string
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    PhotoPath?: NullableStringFieldUpdateOperationsInput | string | null
    Poin?: IntFieldUpdateOperationsInput | number
    CompetitionParticipant?: CompetitionParticipantUpdateManyWithoutStudentNestedInput
    User?: UserUpdateOneRequiredWithoutStudentNestedInput
    Subscription?: SubscriptionUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutSchoolInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    IdMember?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: StringFieldUpdateOperationsInput | string
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Class?: StringFieldUpdateOperationsInput | string
    NIK?: StringFieldUpdateOperationsInput | string
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    IdUser?: StringFieldUpdateOperationsInput | string
    PhotoPath?: NullableStringFieldUpdateOperationsInput | string | null
    Poin?: IntFieldUpdateOperationsInput | number
    CompetitionParticipant?: CompetitionParticipantUncheckedUpdateManyWithoutStudentNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutSchoolInput = {
    Id?: StringFieldUpdateOperationsInput | string
    DateCreate?: DateTimeFieldUpdateOperationsInput | Date | string
    DateUpdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    IdMember?: NullableStringFieldUpdateOperationsInput | string | null
    Address?: StringFieldUpdateOperationsInput | string
    Stage?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    Class?: StringFieldUpdateOperationsInput | string
    NIK?: StringFieldUpdateOperationsInput | string
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    IdUser?: StringFieldUpdateOperationsInput | string
    PhotoPath?: NullableStringFieldUpdateOperationsInput | string | null
    Poin?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use RoleCountOutputTypeDefaultArgs instead
     */
    export type RoleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentCountOutputTypeDefaultArgs instead
     */
    export type StudentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeasonCountOutputTypeDefaultArgs instead
     */
    export type SeasonCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeasonCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubjectCountOutputTypeDefaultArgs instead
     */
    export type SubjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompetitionCountOutputTypeDefaultArgs instead
     */
    export type CompetitionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompetitionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RegionCountOutputTypeDefaultArgs instead
     */
    export type RegionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RegionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SupervisorCountOutputTypeDefaultArgs instead
     */
    export type SupervisorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SupervisorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompetitionRoomCountOutputTypeDefaultArgs instead
     */
    export type CompetitionRoomCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompetitionRoomCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TryoutCountOutputTypeDefaultArgs instead
     */
    export type TryoutCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TryoutCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestionCountOutputTypeDefaultArgs instead
     */
    export type QuestionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentCountOutputTypeDefaultArgs instead
     */
    export type PaymentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SchoolCountOutputTypeDefaultArgs instead
     */
    export type SchoolCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SchoolCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleDefaultArgs instead
     */
    export type RoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentDefaultArgs instead
     */
    export type StudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AchievementDefaultArgs instead
     */
    export type AchievementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AchievementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeasonDefaultArgs instead
     */
    export type SeasonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeasonDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubjectDefaultArgs instead
     */
    export type SubjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompetitionDefaultArgs instead
     */
    export type CompetitionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompetitionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubscriptionDefaultArgs instead
     */
    export type SubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubscriptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RegionDefaultArgs instead
     */
    export type RegionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RegionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SupervisorDefaultArgs instead
     */
    export type SupervisorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SupervisorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompetitionRoomDefaultArgs instead
     */
    export type CompetitionRoomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompetitionRoomDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompetitionParticipantDefaultArgs instead
     */
    export type CompetitionParticipantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompetitionParticipantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KisiDefaultArgs instead
     */
    export type KisiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KisiDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TryoutDefaultArgs instead
     */
    export type TryoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TryoutDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestionDefaultArgs instead
     */
    export type QuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OptionDefaultArgs instead
     */
    export type OptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentDefaultArgs instead
     */
    export type PaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentStatusHistoryDefaultArgs instead
     */
    export type PaymentStatusHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentStatusHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SchoolDefaultArgs instead
     */
    export type SchoolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SchoolDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NewsDefaultArgs instead
     */
    export type NewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NewsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}